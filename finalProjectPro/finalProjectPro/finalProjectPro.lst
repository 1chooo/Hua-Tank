Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 21:01:16
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				printStartScene PROTO
				decStrLevel PROTO, levelNumDec:WORD
				decStrScore PROTO, scoreNumDec:WORD
				decStrLives PROTO, livesNumDec:WORD
				decStrBogys PROTO, bogysNumDec:WORD

				printLevel PROTO, xyPosInit:COORD
				printScore PROTO, xyPosInit:COORD
				printLives PROTO, xyPosInit:COORD
				printBogys PROTO, xyPosInit:COORD

				bogyWalking PROTO, xyPosInBogy:COORD
				bogyClear   PROTO, xyPosInBogy:COORD
				printGreenLine PROTO, xyPosInLine:COORD

				tankWalking PROTO, xyPosInit:COORD
				tankClear   PROTO, xyPosInit:COORD
				;controlTank PROTO

				; bullet move
				noWorkWalking PROTO, xyPosInit:COORD
				noWorkClear   PROTO, xyPosInit:COORD

				printEndScene PROTO
				printGameStage PROTO

				initialLevelBogyPos PROTO

				; 	玩遊戲   ebx = 1
				; 	暫停		ebx = 2
				; 	結束畫面	ebx = 3
				; 	離開程式	ebx = 4

 00000000			.data
					; 視窗的變數們
 00000000 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy",0 ; 標題
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 00000012 0000 0000 007D		windowBound    SMALL_RECT <0,0,125,25>    ; 視窗大小
	   0019
 0000001A 00000000			consoleHandle  DWORD ?

 0000001E 0006 0005			xyPos COORD   <6,5>
 00000022 0007 000F			xyPosTank COORD    <7,15>

 00000026 000F 0006			xyPosNoWork0 COORD <15,6>
 0000002A 000F 0007			xyPosNoWork1 COORD <15,7>
 0000002E 000F 0008			xyPosNoWork2 COORD <15,8>
 00000032 000F 0009			xyPosNoWork3 COORD <15,9>
 00000036 000F 000A			xyPosNoWork4 COORD <15,10>
 0000003A 000F 000B			xyPosNoWork5 COORD <15,11>
 0000003E 000F 000C			xyPosNoWork6 COORD <15,12>
 00000042 000F 000D			xyPosNoWork7 COORD <15,13>
 00000046 000F 000E			xyPosNoWork8 COORD <15,14>
 0000004A 000F 000F			xyPosNoWork9 COORD <15,15>
 0000004E 000F 0010			xyPosNoWork10 COORD <15,16>
 00000052 000F 0011			xyPosNoWork11 COORD <15,17>
 00000056 000F 0012			xyPosNoWork12 COORD <15,18>
 0000005A 000F 0013			xyPosNoWork13 COORD <15,19>
 0000005E 000F 0014			xyPosNoWork14 COORD <15,20>
 00000062 000F 0015			xyPosNoWork15 COORD <15,21>
 00000066 000F 0016			xyPosNoWork16 COORD <15,22>
 0000006A 000F 0017			xyPosNoWork17 COORD <15,23>
 0000006E 000F 0018			xyPosNoWork18 COORD <15,24>
 00000072 000F 0019			xyPosNoWork19 COORD <15,25>
 00000076 000F 001A			xyPosNoWork20 COORD <15,26>

 0000007A 0000				N0  WORD 0
 0000007C 0000				N1  WORD 0
 0000007E 0000				N2  WORD 0
 00000080 0000				N3  WORD 0
 00000082 0000				N4  WORD 0
 00000084 0000				N5  WORD 0
 00000086 0000				N6  WORD 0
 00000088 0000				N7  WORD 0
 0000008A 0000				N8  WORD 0
 0000008C 0000				N9  WORD 0
 0000008E 0000				N10 WORD 0
 00000090 0000				N11 WORD 0
 00000092 0000				N12 WORD 0
 00000094 0000				N13 WORD 0
 00000096 0000				N14 WORD 0
 00000098 0000				N15 WORD 0
 0000009A 0000				N16 WORD 0
 0000009C 0000				N17 WORD 0
 0000009E 0000				N18 WORD 0
 000000A0 0000				N19 WORD 0
 000000A2 0000				N20 WORD 0

 000000A4 006C 006D 007B		xPosBogy0LevelArr WORD 108, 109, 123
 000000AA 0087 0085 007C	    xPosBogy1LevelArr WORD 135, 133, 124
 000000B0 006D 0077 0096	    xPosBogy2LevelArr WORD 109, 119, 150
 000000B6 0078 006E 00AE	    xPosBogy3LevelArr WORD 120, 110, 174
 000000BC 006F 007C 0099	    xPosBogy4LevelArr WORD 111, 124, 153
 000000C2 007A 0082 007A	    xPosBogy5LevelArr WORD 122, 130, 122

 000000C8 0000 0005		    xyPosBogy0 COORD   <?,5>
 000000CC 0000 0009		    xyPosBogy1 COORD   <?,9>
 000000D0 0000 000D		    xyPosBogy2 COORD   <?,13>
 000000D4 0000 0011		    xyPosBogy3 COORD   <?,17>
 000000D8 0000 0015		    xyPosBogy4 COORD   <?,21>
 000000DC 0000 0019		    xyPosBogy5 COORD   <?,25>

 000000E0 00000000			cells_Written DWORD ?

					; 開始畫面的字
 000000E4 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 00000150  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _.' ____ \    |_   _ \  .'   `.  .' ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 2E 27 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2E 27
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 000001BC  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / _ \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/ .'   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 5F
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 2E
	   27 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000228  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __'.      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 27
	   2E 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 00000294  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\ `.___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 60
	   2E 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 00000300  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20

					;印開始畫面的提示字
 0000036C 50 72 65 73 73		enterMsg  BYTE "Press 'E' to enter",0
	   20 27 45 27 20
	   74 6F 20 65 6E
	   74 65 72 00
 0000037F 50 72 65 73 73		leaveMsg  BYTE "Press 'L' to leave",0
	   20 27 4C 27 20
	   74 6F 20 6C 65
	   61 76 65 00
 00000392 50 72 65 73 73		restart   BYTE "Press 'R' to restart",0
	   20 27 52 27 20
	   74 6F 20 72 65
	   73 74 61 72 74
	   00
 000003A7 50 72 65 73 73		nextLevel BYTE "Press 'N' to next level",0
	   20 27 4E 27 20
	   74 6F 20 6E 65
	   78 74 20 6C 65
	   76 65 6C 00
 000003BF 54 68 65 20 64		finalMsg  BYTE "The day is saved, thanks to the Powerful Hua Tank!",0
	   61 79 20 69 73
	   20 73 61 76 65
	   64 2C 20 74 68
	   61 6E 6B 73 20
	   74 6F 20 74 68
	   65 20 50 6F 77
	   65 72 66 75 6C
	   20 48 75 61 20
	   54 61 6E 6B 21
	   00
					
					;印坦克
 000003F2 20 20 20 20 20		startTank BYTE "      C\                "
	   20 43 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 0000040A  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 00000422  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 0000043A  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 00000452  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 0000046A  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 00000482  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20
					;印Bogy
 0000049A 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 000004A1  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 000004A8  2F 20 3D 3D 3D				  BYTE "/ === \"
	   20 5C
 000004AF  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 000004B6  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20

 000004BD 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 000004FE  2A 20 20 20 20	              BYTE "*                      Game Introduction:                       *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000053F  2A 20 20 20 20	              BYTE "*            Control the Hua Tank to kill the Bogy.             *"
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000580  2A 20 20 20 20	              BYTE "*             Don't let Bogy cross the green line,              *"
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000005C1  2A 20 20 20 20				  BYTE "*                or your life will shock down!!                 *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000602  2A 20 20 20 53	              BYTE "*   Start with 3 lives, once the live reaches zero, you lose!!  *"
	   74 61 72 74 20
	   77 69 74 68 20
	   33 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 2A
 00000643  2A 20 20 20 20	              BYTE "*     Kill the last monsters, if you still alive, you win!!     *"
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 2A
 00000684  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000006C5  2A 20 20 20 20	              BYTE "*                   How to control the tank:                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000706  2A 20 20 20 20	              BYTE "*               + press 'up'    to move up                      *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000747  2A 20 20 20 20	              BYTE "*               + press 'down'  to move down                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000788  2A 20 20 20 20	              BYTE "*               + press 'right' to fire bullet                  *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000007C9  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000080A  2A 20 20 20 20	              BYTE "*                         How to play:                          *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000084B  2A 20 20 20 20	              BYTE "*               + press 'space' to start game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000088C  2A 20 20 20 20	              BYTE "*               + press 'P'     to pause game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000008CD  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A

 0000090E 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 00000916  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 0000091E  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20

 00000926 20 20 20 20 20		clearTank BYTE "        "
	   20 20 20
 0000092E  20 20 20 20 20				  BYTE "        "
	   20 20 20
 00000936  20 20 20 20 20				  BYTE "        "
	   20 20 20

 0000093E 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 00000943  7C 4F 76 4F 7C				  BYTE "|OvO|"
 00000948  7C 5F 7C 5F 7C				  BYTE "|_|_|"

 0000094D 20 20 20 20 20		clearBogy BYTE "     "
 00000952  20 20 20 20 20				  BYTE "     "
 00000957  20 20 20 20 20				  BYTE "     "

 0000095C 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 00000963 20 20 20 20 20		clearBullet BYTE "      ",0
	   20 00

 0000096A 7C 00				line BYTE "|",0
 0000096C 000A				greenColor WORD 0Ah

 0000096E 000E				yellowColor WORD 0Eh

 00000970 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 00000978 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 00000980 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000988 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 00000990 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000998 0001				levelNum WORD 1
 0000099A  00000004 [			levelStr BYTE 4 DUP(?)
	    00
	   ]

 0000099E 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 000009A6 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 000009AE 0000				scoreNum WORD 0
 000009B0  00000004 [			scoreStr BYTE 4 DUP(?)
	    00
	   ]

 000009B4 0003				livesNum WORD 3
 000009B6  00000004 [			livesStr BYTE 4 DUP(?)
	    00
	   ]
					
 000009BA 0001				bogysNum WORD 1
 000009BC  00000004 [			bogysStr BYTE 4 DUP(?)
	    00
	   ]

 000009C0  0000006E [			gameBgTB BYTE 110 DUP("*"),0
	    2A
	   ] 00
 00000A2F 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0	
	   0000006C [
	    20
	   ] 2A 00
					
 00000A9E 20 20 5F 5F 5F		winStr  BYTE "  ____      ____ _____ ____  _____  "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   20
 00000AC2  20 7C 5F 20 20			    BYTE " |_  _|    |_  _|_   _|_   \|_   _| "
	   5F 7C 20 20 20
	   20 7C 5F 20 20
	   5F 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 20 5C 7C 5F
	   20 20 20 5F 7C
	   20
 00000AE6  20 20 20 5C 20			    BYTE "   \ \  /\  / /   | |   |   \ | |   "
	   5C 20 20 2F 5C
	   20 20 2F 20 2F
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 5C 20
	   7C 20 7C 20 20
	   20
 00000B0A  20 20 20 20 5C			    BYTE "    \ \/  \/ /    | |   | |\ \| |   "
	   20 5C 2F 20 20
	   5C 2F 20 2F 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5C 20 5C
	   7C 20 7C 20 20
	   20
 00000B2E  20 20 20 20 20			    BYTE "     \  /\  /    _| |_ _| |_\   |_  "
	   5C 20 20 2F 5C
	   20 20 2F 20 20
	   20 20 5F 7C 20
	   7C 5F 20 5F 7C
	   20 7C 5F 5C 20
	   20 20 7C 5F 20
	   20
 00000B52  20 20 20 20 20			    BYTE "      \/  \/    |_____|_____|\____| "
	   20 5C 2F 20 20
	   5C 2F 20 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5C
	   5F 5F 5F 5F 7C
	   20

 00000B76 20 5F 5F 5F 5F		loseStr BYTE " _____      ___    ______  ________ "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20
 00000B9A  7C 5F 20 20 20				BYTE "|_   _|   .'   `..' ____ \|_   __  |"
	   5F 7C 20 20 20
	   2E 27 20 20 20
	   60 2E 2E 27 20
	   5F 5F 5F 5F 20
	   5C 7C 5F 20 20
	   20 5F 5F 20 20
	   7C
 00000BBE  20 20 7C 20 7C				BYTE "  | |    /  .-.  | (____\_| | |_ \_|"	
	   20 20 20 20 2F
	   20 20 2E 2D 2E
	   20 20 7C 20 28
	   5F 5F 5F 5F 5C
	   5F 7C 20 7C 20
	   7C 5F 20 5C 5F
	   7C
 00000BE2  20 20 7C 20 7C				BYTE "  | |   _| |   | |_.____ \  |  _| _ "
	   20 20 20 5F 7C
	   20 7C 20 20 20
	   7C 20 7C 5F 2E
	   5F 5F 5F 5F 20
	   5C 20 20 7C 20
	   20 5F 7C 20 5F
	   20
 00000C06  20 5F 7C 20 7C				BYTE " _| |__/ \  `-'  / \____) \_| |__/ |"
	   5F 5F 2F 20 5C
	   20 20 60 2D 27
	   20 20 2F 20 5C
	   5F 5F 5F 5F 29
	   20 5C 5F 7C 20
	   7C 5F 5F 2F 20
	   7C
 00000C2A  7C 5F 5F 5F 5F				BYTE "|________|`.___.' \_______/________|"
	   5F 5F 5F 5F 7C
	   60 2E 5F 5F 5F
	   2E 27 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 2F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C


 00000000			.code

 00000000			main PROC
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001A R		mov consoleHandle, eax
					
					INVOKE SetConsoleTitle, ADDR windowTitleStr			; 設定視窗標題
					
					INVOKE SetConsoleWindowInfo,						; 設定視窗大小
				     	consoleHandle,
				     	TRUE,
				     	ADDR windowBound
					
					INVOKE printStartScene

 0000002D			Ex:	
					.IF ebx == 3
 00000032  E8 00000000 E			call Clrscr
						INVOKE printEndScene
					.ENDIF

					.IF ebx == 4        ;直接離開
 00000041  E8 00000000 E			call Clrscr
 00000046  E9 00001BC1				jmp ExitProgram
					.ENDIF

					.IF ebx == 1 ; 進入遊戲
 00000054  66| C7 05				mov scoreNum, 0
	   000009AE R
	   0000
						.IF levelNum == 1
 00000067  66| C7 05					mov livesNum, 3
	   000009B4 R
	   0003
 00000070  66| C7 05					mov bogysNum, 5
	   000009BA R
	   0005
						.ENDIF
						.IF levelNum == 2
 00000083  66| C7 05					mov livesNum, 5
	   000009B4 R
	   0005
 0000008C  66| C7 05					mov bogysNum, 10
	   000009BA R
	   000A
						.ENDIF
						.IF levelNum == 3
 0000009F  66| C7 05					mov livesNum, 7
	   000009B4 R
	   0007
 000000A8  66| C7 05					mov bogysNum, 15
	   000009BA R
	   000F
						.ENDIF
						INVOKE printGameStage


						INVOKE initialLevelBogyPos

 000000BB  66| C7 05				mov xyPosTank.y, 15
	   00000024 R
	   000F

 000000C4  66| C7 05				mov N0, 0
	   0000007A R
	   0000
 000000CD  66| C7 05				mov N1, 0
	   0000007C R
	   0000
 000000D6  66| C7 05				mov N2, 0
	   0000007E R
	   0000
 000000DF  66| C7 05				mov N3, 0
	   00000080 R
	   0000
 000000E8  66| C7 05				mov N4 , 0 
	   00000082 R
	   0000
 000000F1  66| C7 05				mov N5 , 0 
	   00000084 R
	   0000
 000000FA  66| C7 05				mov N6 , 0 
	   00000086 R
	   0000
 00000103  66| C7 05				mov N7 , 0 
	   00000088 R
	   0000
 0000010C  66| C7 05				mov N8 , 0 
	   0000008A R
	   0000
 00000115  66| C7 05				mov N9 , 0 
	   0000008C R
	   0000
 0000011E  66| C7 05				mov N10, 0 
	   0000008E R
	   0000
 00000127  66| C7 05				mov N11, 0 
	   00000090 R
	   0000
 00000130  66| C7 05				mov N12, 0 
	   00000092 R
	   0000
 00000139  66| C7 05				mov N13, 0 
	   00000094 R
	   0000
 00000142  66| C7 05				mov N14, 0 
	   00000096 R
	   0000
 0000014B  66| C7 05				mov N15, 0 
	   00000098 R
	   0000
 00000154  66| C7 05				mov N16, 0 
	   0000009A R
	   0000
 0000015D  66| C7 05				mov N17, 0 
	   0000009C R
	   0000
 00000166  66| C7 05				mov N18, 0 
	   0000009E R
	   0000
 0000016F  66| C7 05				mov N19, 0 
	   000000A0 R
	   0000
 00000178  66| C7 05				mov N20, 0
	   000000A2 R
	   0000

 00000181  66| C7 05				mov xyPosNoWork0.x , 15
	   00000026 R
	   000F
 0000018A  66| C7 05				mov xyPosNoWork1.x , 15
	   0000002A R
	   000F
 00000193  66| C7 05				mov xyPosNoWork2.x , 15
	   0000002E R
	   000F
 0000019C  66| C7 05				mov xyPosNoWork3.x , 15
	   00000032 R
	   000F
 000001A5  66| C7 05				mov xyPosNoWork4.x , 15
	   00000036 R
	   000F
 000001AE  66| C7 05				mov xyPosNoWork5.x , 15
	   0000003A R
	   000F
 000001B7  66| C7 05				mov xyPosNoWork6.x , 15
	   0000003E R
	   000F
 000001C0  66| C7 05				mov xyPosNoWork7.x , 15
	   00000042 R
	   000F
 000001C9  66| C7 05				mov xyPosNoWork8.x , 15
	   00000046 R
	   000F
 000001D2  66| C7 05				mov xyPosNoWork9.x , 15
	   0000004A R
	   000F
 000001DB  66| C7 05				mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
 000001E4  66| C7 05				mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 000001ED  66| C7 05				mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 000001F6  66| C7 05				mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 000001FF  66| C7 05				mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
 00000208  66| C7 05				mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00000211  66| C7 05				mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 0000021A  66| C7 05				mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 00000223  66| C7 05				mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
 0000022C  66| C7 05				mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00000235  66| C7 05				mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
					.ENDIF

 0000023E			GameLoop:
					
					INVOKE tankWalking, xyPosTank

					.IF N0 == 1
				        INVOKE noWorkWalking, xyPosNoWork0 
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkWalking, xyPosNoWork1 
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkWalking, xyPosNoWork2 
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkWalking, xyPosNoWork3 
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkWalking, xyPosNoWork4 
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkWalking, xyPosNoWork5 
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkWalking, xyPosNoWork6 
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkWalking, xyPosNoWork7 
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkWalking, xyPosNoWork8 
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkWalking, xyPosNoWork9 
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkWalking, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkWalking, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkWalking, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkWalking, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkWalking, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkWalking, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkWalking, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkWalking, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkWalking, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkWalking, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkWalking, xyPosNoWork20
				    .ENDIF

					.IF xyPosBogy0.x < 107
						INVOKE bogyWalking, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyWalking, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyWalking, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyWalking, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyWalking, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyWalking, xyPosBogy5
					.ENDIF

 00000480  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 00000489  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR playing,
						SIZEOF playing,
						xyPos,
						ADDR cells_Written
 000004AF  E8 00000000 E		call ReadKey

					.IF ax == 1970h
 000004BA  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 000004C3  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR paused,
						SIZEOF paused,
						xyPos,
						ADDR cells_Written
 000004E9			pauseLoop:
 000004E9  E8 00000000 E			call ReadKey
						.IF ax == 3920h
 000004F4  EB 02					jmp backToGame
						.ENDIF
 000004F6  EB F1				jmp pauseLoop
					.ENDIF

 000004F8			backToGame:

					.IF ax == 4800h
						INVOKE tankClear, xyPosTank
 00000509  66| 83 2D				sub xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y < 5
 0000051B  66| C7 05					mov xyPosTank.y, 5
	   00000024 R
	   0005
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 5000h
						INVOKE tankClear, xyPosTank
 00000540  66| 83 05				add xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y > 25
 00000552  66| C7 05					mov xyPosTank.y, 25
	   00000024 R
	   0019
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 4D00h
						.IF xyPosTank.y == 5
 0000057A  66| C7 05		            mov N0, 1
	   0000007A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 6
 0000058D  66| C7 05		            mov N1, 1
	   0000007C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 7
 000005A0  66| C7 05		            mov N2, 1
	   0000007E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 8
 000005B3  66| C7 05		            mov N3, 1
	   00000080 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 9
 000005C6  66| C7 05		            mov N4, 1
	   00000082 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 10
 000005D9  66| C7 05		            mov N5, 1
	   00000084 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 11
 000005EC  66| C7 05		            mov N6, 1
	   00000086 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 12
 000005FF  66| C7 05		            mov N7, 1
	   00000088 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 13
 00000612  66| C7 05		            mov N8, 1
	   0000008A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 14
 00000625  66| C7 05		            mov N9, 1
	   0000008C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 15
 00000638  66| C7 05		            mov N10, 1
	   0000008E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 16
 0000064B  66| C7 05		            mov N11, 1
	   00000090 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 17
 0000065E  66| C7 05		            mov N12, 1
	   00000092 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 18
 00000671  66| C7 05		            mov N13, 1
	   00000094 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 19
 00000684  66| C7 05		            mov N14, 1
	   00000096 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 20
 00000697  66| C7 05		            mov N15, 1
	   00000098 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 21
 000006AA  66| C7 05		            mov N16, 1
	   0000009A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 22
 000006BD  66| C7 05		            mov N17, 1
	   0000009C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 23
 000006D0  66| C7 05		            mov N18, 1
	   0000009E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 24
 000006E3  66| C7 05		            mov N19, 1
	   000000A0 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 25
 000006F6  66| C7 05		            mov N20, 1
	   000000A2 R
	   0001
				        .ENDIF
					.ENDIF

 000006FF  50				push eax
 00000700  B8 000001F4			mov eax, 500
 00000705  E8 00000000 E		call Delay
 0000070A  58				pop eax

					.IF xyPosBogy0.x < 107
						INVOKE bogyClear, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyClear, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyClear, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyClear, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyClear, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyClear, xyPosBogy5
					.ENDIF

					; clear no work
					.IF N0 == 1
				        INVOKE noWorkClear, xyPosNoWork0
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkClear, xyPosNoWork1
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkClear, xyPosNoWork2
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkClear, xyPosNoWork3
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkClear, xyPosNoWork4
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkClear, xyPosNoWork5
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkClear, xyPosNoWork6
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkClear, xyPosNoWork7
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkClear, xyPosNoWork8
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkClear, xyPosNoWork9
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkClear, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkClear, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkClear, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkClear, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkClear, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkClear, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkClear, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkClear, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkClear, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkClear, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkClear, xyPosNoWork20
				    .ENDIF

					
					INVOKE printGreenLine, xyPos
					.IF levelNum == 1
 00000957  66| 83 2D				sub xyPosBogy0.x, 1
	   000000C8 R 01
 0000095F  66| 83 2D				sub xyPosBogy1.x, 1
	   000000CC R 01
 00000967  66| 83 2D				sub xyPosBogy2.x, 1
	   000000D0 R 01
 0000096F  66| 83 2D				sub xyPosBogy3.x, 1
	   000000D4 R 01
 00000977  66| 83 2D				sub xyPosBogy4.x, 1
	   000000D8 R 01
 0000097F  66| 83 2D				sub xyPosBogy5.x, 1
	   000000DC R 01
					.ENDIF
					.IF levelNum == 2
 00000991  50					push eax
 00000992  B8 00000004				mov eax, 4
 00000997  E8 00000000 E			call RandomRange
 0000099C  40					inc eax
 0000099D  66| 29 05				sub xyPosBogy0.x, ax
	   000000C8 R
 000009A4  B8 00000004				mov eax, 4
 000009A9  E8 00000000 E			call RandomRange
 000009AE  40					inc eax
 000009AF  66| 29 05				sub xyPosBogy1.x, ax
	   000000CC R
 000009B6  B8 00000004				mov eax, 4
 000009BB  E8 00000000 E			call RandomRange
 000009C0  66| 29 05				sub xyPosBogy2.x, ax
	   000000D0 R
 000009C7  B8 00000004				mov eax, 4
 000009CC  E8 00000000 E			call RandomRange
 000009D1  40					inc eax
 000009D2  66| 29 05				sub xyPosBogy3.x, ax
	   000000D4 R
 000009D9  B8 00000004				mov eax, 4
 000009DE  E8 00000000 E			call RandomRange
 000009E3  66| 29 05				sub xyPosBogy4.x, ax
	   000000D8 R
 000009EA  B8 00000004				mov eax, 4
 000009EF  E8 00000000 E			call RandomRange
 000009F4  66| 29 05				sub xyPosBogy5.x, ax
	   000000DC R
 000009FB  58					pop eax
					.ENDIF
					.IF levelNum == 3
 00000A06  50					push eax
 00000A07  B8 00000005				mov eax, 5
 00000A0C  E8 00000000 E			call RandomRange
 00000A11  83 C0 02				add eax, 2
 00000A14  66| 29 05				sub xyPosBogy0.x, ax
	   000000C8 R
 00000A1B  B8 00000007				mov eax, 7
 00000A20  E8 00000000 E			call RandomRange
 00000A25  66| 29 05				sub xyPosBogy1.x, ax
	   000000CC R
 00000A2C  B8 00000009				mov eax, 9
 00000A31  E8 00000000 E			call RandomRange
 00000A36  66| 29 05				sub xyPosBogy2.x, ax
	   000000D0 R
 00000A3D  B8 00000007				mov eax, 7
 00000A42  E8 00000000 E			call RandomRange
 00000A47  66| 29 05				sub xyPosBogy3.x, ax
	   000000D4 R
 00000A4E  B8 00000009				mov eax, 9
 00000A53  E8 00000000 E			call RandomRange
 00000A58  66| 29 05				sub xyPosBogy4.x, ax
	   000000D8 R
 00000A5F  B8 00000005				mov eax, 5
 00000A64  E8 00000000 E			call RandomRange
 00000A69  66| 29 05				sub xyPosBogy5.x, ax
	   000000DC R
 00000A70  58					pop eax
					.ENDIF

					.IF N0 == 1
 00000A7F  66| 83 05		        add xyPosNoWork0.x, 3
	   00000026 R 03
						.IF levelNum == 3
 00000A91  66| FF 05					inc xyPosNoWork0.x
	   00000026 R
						.ENDIF
 00000A98  50			        push eax
 00000A99  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000A9F  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork0.x >= ax
 00000AB0  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 00000AB9  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
 00000AC2  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000ACA  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000AF2  BB 00000003		                mov ebx, 3
 00000AF7  E9 FFFFF531		                jmp Ex
				            .ENDIF
							.IF levelNum == 1
 00000B06  66| A1						mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
							.ENDIF
							.IF levelNum == 2
 00000B16  66| A1						mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
							.ENDIF
							.IF levelNum == 3
 00000B26  66| A1						mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
							.ENDIF
 00000B2C  66| A3					mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 00000B32  58			        pop eax
				        .IF xyPosNoWork0.x > 106
 00000B3D  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 00000B46  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N1 == 1
 00000B5D  66| 83 05		        add xyPosNoWork1.x, 3
	   0000002A R 03
				        .IF levelNum == 3
 00000B6F  66| FF 05					inc xyPosNoWork1.x
	   0000002A R
						.ENDIF
 00000B76  50					push eax
 00000B77  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000B7D  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork1.x >= ax
 00000B8E  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000B97  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
 00000BA0  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000BA8  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000BD0  BB 00000003		                mov ebx, 3
 00000BD5  E9 FFFFF453		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000BE4  66| A1		                mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
				            .ENDIF
				            .IF levelNum == 2
 00000BF4  66| A1		                mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
				            .ENDIF
				            .IF levelNum == 3
 00000C04  66| A1		                mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
				            .ENDIF
 00000C0A  66| A3		            mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 00000C10  58			        pop eax
				        .IF xyPosNoWork1.x > 106
 00000C1B  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000C24  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N2 == 1
 00000C37  66| 83 05		        add xyPosNoWork2.x, 3
	   0000002E R 03
				        .IF levelNum == 3
 00000C49  66| FF 05					inc xyPosNoWork2.x
	   0000002E R
						.ENDIF
						.IF xyPosNoWork2.x > 106
 00000C5A  66| C7 05		            mov N2, 0
	   0000007E R
	   0000
 00000C63  66| C7 05		            mov xyPosNoWork2.x, 15
	   0000002E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N3 == 1
 00000C7A  66| 83 05		        add xyPosNoWork3.x, 3
	   00000032 R 03
						.IF levelNum == 3
 00000C8C  66| FF 05					inc xyPosNoWork3.x
	   00000032 R
						.ENDIF
 00000C93  50			        push eax
 00000C94  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000C9A  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork3.x >= ax
 00000CAB  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000CB4  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
 00000CBD  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000CC5  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000CED  BB 00000003		                mov ebx, 3
 00000CF2  E9 FFFFF336		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000D01  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000D11  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000D21  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000D27  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000D2D  58			        pop eax
				        .IF xyPosNoWork3.x > 106
 00000D38  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000D41  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N4 == 1
 00000D58  66| 83 05		        add xyPosNoWork4.x, 3
	   00000036 R 03
						.IF levelNum == 3
 00000D6A  66| FF 05					inc xyPosNoWork4.x
	   00000036 R
						.ENDIF
 00000D71  50			        push eax
 00000D72  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000D78  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork4.x >= ax
 00000D89  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000D92  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
 00000D9B  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000DA3  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000DCB  BB 00000003		                mov ebx, 3
 00000DD0  E9 FFFFF258		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000DDF  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000DEF  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000DFF  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000E05  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000E0B  58			        pop eax
				        .IF xyPosNoWork4.x > 106
 00000E16  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000E1F  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N5 == 1
 00000E36  66| 83 05		        add xyPosNoWork5.x, 3
	   0000003A R 03
				        .IF levelNum == 3
 00000E48  66| FF 05					inc xyPosNoWork5.x
	   0000003A R
						.ENDIF
 00000E4F  50					push eax
 00000E50  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000E56  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork5.x >= ax
 00000E67  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000E70  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
 00000E79  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000E81  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000EA9  BB 00000003		                mov ebx, 3
 00000EAE  E9 FFFFF17A		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000EBD  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000ECD  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000EDD  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000EE3  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000EE9  58			        pop eax
				        .IF xyPosNoWork5.x > 106
 00000EF4  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000EFD  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N6 == 1
 00000F10  66| 83 05		        add xyPosNoWork6.x, 3
	   0000003E R 03
						.IF levelNum == 3
 00000F22  66| FF 05					inc xyPosNoWork6.x
	   0000003E R
						.ENDIF
				        .IF xyPosNoWork6.x > 106
 00000F33  66| C7 05		            mov N6, 0
	   00000086 R
	   0000
 00000F3C  66| C7 05		            mov xyPosNoWork6.x, 15
	   0000003E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N7 == 1
 00000F53  66| 83 05		        add xyPosNoWork7.x, 3
	   00000042 R 03
				        .IF levelNum == 3
 00000F65  66| FF 05					inc xyPosNoWork7.x
	   00000042 R
						.ENDIF
 00000F6C  50					push eax
 00000F6D  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00000F73  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork7.x >= ax
 00000F84  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000F8D  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
 00000F96  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00000F9E  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000FC6  BB 00000003		                mov ebx, 3
 00000FCB  E9 FFFFF05D		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000FDA  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 00000FEA  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 00000FFA  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 00001000  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 00001006  58			        pop eax
				        .IF xyPosNoWork7.x > 106
 00001011  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 0000101A  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N8 == 1
 00001031  66| 83 05		        add xyPosNoWork8.x, 3
	   00000046 R 03
				        .IF levelNum == 3
 00001043  66| FF 05					inc xyPosNoWork8.x
	   00000046 R
						.ENDIF
 0000104A  50					push eax
 0000104B  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00001051  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork8.x >= ax
 00001062  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 0000106B  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
 00001074  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 0000107C  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000010A4  BB 00000003		                mov ebx, 3
 000010A9  E9 FFFFEF7F		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 000010B8  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 000010C8  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 000010D8  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 000010DE  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 000010E4  58			        pop eax
				        .IF xyPosNoWork8.x > 106
 000010EF  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 000010F8  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N9 == 1
 0000110F  66| 83 05		        add xyPosNoWork9.x, 3
	   0000004A R 03
				        .IF levelNum == 3
 00001121  66| FF 05					inc xyPosNoWork9.x
	   0000004A R
						.ENDIF
 00001128  50					push eax
 00001129  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 0000112F  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork9.x >= ax
 00001140  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00001149  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
 00001152  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 0000115A  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001182  BB 00000003		                mov ebx, 3
 00001187  E9 FFFFEEA1		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001196  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 000011A6  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 000011B6  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 000011BC  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 000011C2  58			        pop eax
				        .IF xyPosNoWork9.x > 106
 000011CD  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 000011D6  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N10 == 1
 000011E9  66| 83 05				add xyPosNoWork10.x, 3
	   0000004E R 03
						.IF levelNum == 3
 000011FB  66| FF 05					inc xyPosNoWork10.x
	   0000004E R
						.ENDIF
						.IF xyPosNoWork10.x > 106
 0000120C  66| C7 05					mov N10, 0
	   0000008E R
	   0000
 00001215  66| C7 05					mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
						.ENDIF
					.ENDIF

					.IF N11 == 1
 0000122C  66| 83 05				add xyPosNoWork11.x, 3
	   00000052 R 03
						.IF levelNum == 3
 0000123E  66| FF 05					inc xyPosNoWork11.x
	   00000052 R
						.ENDIF
 00001245  50					push eax
 00001246  66| A1				mov ax, xyPosBogy3.x
	   000000D4 R
 0000124C  66| 83 E8 06				sub ax, 6
						.IF xyPosNoWork11.x >= ax
 0000125D  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00001266  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 0000126F  66| 83 05					add scoreNum, 10
	   000009AE R 0A
 00001277  66| 83 2D					sub bogysNum, 1
	   000009BA R 01
							INVOKE printScore, xyPos
							INVOKE printBogys, xyPos
							.IF bogysNum == 0
 0000129F  BB 00000003						mov ebx, 3
 000012A4  E9 FFFFED84						jmp Ex
							.ENDIF

							.IF levelNum == 1
 000012B3  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000012C3  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 000012D3  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 000012D9  66| A3					mov xyPosBogy3.x, ax
	   000000D4 R
						.ENDIF
 000012DF  58					pop eax
						.IF xyPosNoWork11.x > 106
 000012EA  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 000012F3  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
						.ENDIF
					.ENDIF

					.IF N12 == 1
 0000130A  66| 83 05		        add xyPosNoWork12.x, 3
	   00000056 R 03
						.IF levelNum == 3
 0000131C  66| FF 05					inc xyPosNoWork12.x
	   00000056 R
						.ENDIF
 00001323  50			        push eax
 00001324  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 0000132A  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork12.x >= ax
 0000133B  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00001344  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 0000134D  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00001355  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000137D  BB 00000003		                mov ebx, 3
 00001382  E9 FFFFECA6		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001391  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000013A1  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 000013B1  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 000013B7  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 000013BD  58			        pop eax
				        .IF xyPosNoWork12.x > 106
 000013C8  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 000013D1  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N13 == 1
 000013E8  66| 83 05		        add xyPosNoWork13.x, 3
	   0000005A R 03
						.IF levelNum == 3
 000013FA  66| FF 05					inc xyPosNoWork13.x
	   0000005A R
						.ENDIF
 00001401  50			        push eax
 00001402  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 00001408  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork13.x >= ax
 00001419  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 00001422  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 0000142B  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00001433  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000145B  BB 00000003		                mov ebx, 3
 00001460  E9 FFFFEBC8		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000146F  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 0000147F  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 0000148F  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 00001495  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 0000149B  58			        pop eax
				        .IF xyPosNoWork13.x > 106
 000014A6  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 000014AF  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N14 == 1
 000014C2  66| 83 05		        add xyPosNoWork14.x, 3
	   0000005E R 03
						.IF levelNum == 3
 000014D4  66| FF 05					inc xyPosNoWork14.x
	   0000005E R
						.ENDIF
				        .IF xyPosNoWork14.x > 106
 000014E5  66| C7 05		            mov N14, 0
	   00000096 R
	   0000
 000014EE  66| C7 05		            mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N15 == 1
 00001505  66| 83 05		        add xyPosNoWork15.x, 3
	   00000062 R 03
				        .IF levelNum == 3
 00001517  66| FF 05					inc xyPosNoWork15.x
	   00000062 R
						.ENDIF
 0000151E  50					push eax
 0000151F  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 00001525  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork15.x >= ax
 00001536  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 0000153F  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00001548  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00001550  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001578  BB 00000003		                mov ebx, 3
 0000157D  E9 FFFFEAAB		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000158C  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 0000159C  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 000015AC  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 000015B2  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 000015B8  58			        pop eax
				        .IF xyPosNoWork15.x > 106
 000015C3  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 000015CC  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
				        .ENDIF
				    .ENDIF
					
					.IF N16 == 1
 000015E3  66| 83 05		        add xyPosNoWork16.x, 3
	   00000066 R 03
				        .IF levelNum == 3
 000015F5  66| FF 05					inc xyPosNoWork16.x
	   00000066 R
						.ENDIF
 000015FC  50					push eax
 000015FD  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 00001603  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork16.x >= ax
 00001614  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 0000161D  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 00001626  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 0000162E  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001656  BB 00000003		                mov ebx, 3
 0000165B  E9 FFFFE9CD		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000166A  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 0000167A  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 0000168A  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 00001690  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 00001696  58			        pop eax
				        .IF xyPosNoWork16.x > 106
 000016A1  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 000016AA  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N17 == 1
 000016C1  66| 83 05		        add xyPosNoWork17.x, 3
	   0000006A R 03
				        .IF levelNum == 3
 000016D3  66| FF 05					inc xyPosNoWork17.x
	   0000006A R
						.ENDIF
 000016DA  50					push eax
 000016DB  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 000016E1  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork17.x >= ax
 000016F2  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 000016FB  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 00001704  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 0000170C  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001734  BB 00000003		                mov ebx, 3
 00001739  E9 FFFFE8EF		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001748  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 00001758  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 00001768  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 0000176E  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 00001774  58			        pop eax
				        .IF xyPosNoWork17.x > 106
 0000177F  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00001788  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N18 == 1
 0000179B  66| 83 05		        add xyPosNoWork18.x, 3
	   0000006E R 03
						.IF levelNum == 3
 000017AD  66| FF 05					inc xyPosNoWork18.x
	   0000006E R
						.ENDIF
				        .IF xyPosNoWork18.x > 106
 000017BE  66| C7 05		            mov N18, 0
	   0000009E R
	   0000
 000017C7  66| C7 05		            mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N19 == 1
 000017DE  66| 83 05		        add xyPosNoWork19.x, 3
	   00000072 R 03
				        .IF levelNum == 3
 000017F0  66| FF 05					inc xyPosNoWork19.x
	   00000072 R
						.ENDIF
 000017F7  50					push eax
 000017F8  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 000017FE  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork19.x >= ax
 0000180F  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 00001818  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00001821  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00001829  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001851  BB 00000003		                mov ebx, 3
 00001856  E9 FFFFE7D2		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001865  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 00001875  66| A1		                mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
				            .ENDIF
				            .IF levelNum == 3
 00001885  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
 0000188B  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 00001891  58			        pop eax
				        .IF xyPosNoWork19.x > 106
 0000189C  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 000018A5  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N20 == 1
 000018BC  66| 83 05		        add xyPosNoWork20.x, 3
	   00000076 R 03
				        .IF levelNum == 3
 000018CE  66| FF 05					inc xyPosNoWork20.x
	   00000076 R
						.ENDIF
 000018D5  50					push eax
 000018D6  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 000018DC  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork20.x >= ax
 000018ED  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 000018F6  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
 000018FF  66| 83 05		            add scoreNum, 10
	   000009AE R 0A
 00001907  66| 83 2D		            sub bogysNum, 1
	   000009BA R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000192F  BB 00000003		                mov ebx, 3
 00001934  E9 FFFFE6F4		                jmp Ex
				            .ENDIF
				            
							.IF levelNum == 1
 00001943  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 00001953  66| A1		                mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
				            .ENDIF
				            .IF levelNum == 3
 00001963  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
 00001969  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 0000196F  58			        pop eax
				        .IF xyPosNoWork20.x > 106
 0000197A  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001983  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF xyPosBogy0.x <= 16
 00001996  50					push eax
						.IF levelNum == 1
 000019A1  66| A1					mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
						.ENDIF
						.IF levelNum == 2
 000019B1  66| A1					mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
						.ENDIF
						.IF levelNum == 3
 000019C1  66| A1					mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
						.ENDIF
 000019C7  66| A3				mov xyPosBogy0.x, ax
	   000000C8 R
 000019CD  58					pop eax
 000019CE  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000019EB  BB 00000003					mov ebx, 3 ;之後要改3
 000019F0  E9 FFFFE638					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy1.x <= 16
 000019FF  50					push eax
						.IF levelNum == 1
 00001A0A  66| A1					mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
						.ENDIF
						.IF levelNum == 2
 00001A1A  66| A1					mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
						.ENDIF
						.IF levelNum == 3
 00001A2A  66| A1					mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
						.ENDIF
 00001A30  66| A3				mov xyPosBogy1.x, ax
	   000000CC R
 00001A36  58					pop eax
 00001A37  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001A54  BB 00000003					mov ebx, 3 ;之後要改3
 00001A59  E9 FFFFE5CF					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy2.x <= 16
 00001A68  50					push eax
						.IF levelNum == 1
 00001A73  66| A1					mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
						.ENDIF
						.IF levelNum == 2
 00001A83  66| A1					mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
						.ENDIF
						.IF levelNum == 3
 00001A93  66| A1					mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
						.ENDIF
 00001A99  66| A3				mov xyPosBogy2.x, ax
	   000000D0 R
 00001A9F  58					pop eax
 00001AA0  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001ABD  BB 00000003					mov ebx, 3 ;之後要改3
 00001AC2  E9 FFFFE566					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy3.x <= 16
 00001AD1  50					push eax
						.IF levelNum == 1
 00001ADC  66| A1					mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
						.ENDIF
						.IF levelNum == 2
 00001AEC  66| A1					mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
						.ENDIF
						.IF levelNum == 3
 00001AFC  66| A1					mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
						.ENDIF
 00001B02  66| A3				mov xyPosBogy3.x, ax
	   000000D4 R
 00001B08  58					pop eax
 00001B09  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001B26  BB 00000003					mov ebx, 3 ;之後要改3
 00001B2B  E9 FFFFE4FD					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy4.x <= 16
 00001B3A  50					push eax
						.IF levelNum == 1
 00001B45  66| A1					mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
						.ENDIF
						.IF levelNum == 2
 00001B55  66| A1					mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
						.ENDIF
						.IF levelNum == 3
 00001B65  66| A1					mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
						.ENDIF
 00001B6B  66| A3				mov xyPosBogy4.x, ax
	   000000D8 R
 00001B71  58					pop eax
 00001B72  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001B8F  BB 00000003					mov ebx, 3 ;之後要改3
 00001B94  E9 FFFFE494					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy5.x <= 16
 00001BA3  50					push eax
						.IF levelNum == 1
 00001BAE  66| A1					mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
						.ENDIF
						.IF levelNum == 2
 00001BBE  66| A1					mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
						.ENDIF
						.IF levelNum == 3
 00001BCE  66| A1					mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
						.ENDIF
 00001BD4  66| A3				mov xyPosBogy5.x, ax
	   000000DC R
 00001BDA  58					pop eax
 00001BDB  66| 83 2D				sub livesNum, 1
	   000009B4 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001BF8  BB 00000003					mov ebx, 3 ;之後要改3
 00001BFD  E9 FFFFE42B					jmp Ex		
						.ENDIF
					.ENDIF
					
 00001C02  E9 FFFFE637			jmp GameLoop



 00001C07  E8 00000000 E		call WaitMsg

 00001C0C			ExitProgram:
					exit
 00001C13			main ENDP

 00001C13			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 00001C19  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 00001C20  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
				    	consoleHandle,
				        ADDR cursorInfo

					; 清空畫面
 00001C36  E8 00000000 E		call Clrscr

 00001C3B  B9 00000006			mov ecx, 6
 00001C40  BE 00000000			mov esi, 0

				; 印開始畫面的標題
 00001C45			ShowStartStr:
 00001C45  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108,
						xyPos,
						ADDR cells_Written

 00001C65  83 C6 6C			add esi, 108
 00001C68  66| FF 05			inc xyPos.y
	   00000020 R
 00001C6F  59				pop ecx
 00001C70  E2 D3			loop ShowStartStr

				; 印開始畫面的選項
 00001C72			PrintOption:
 00001C72  66| 83 05		    add xyPos.y, 7
	   00000020 R 07
 00001C7A  66| 83 05		    add xyPos.x, 48
	   0000001E R 30

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR enterMsg,
				        SIZEOF enterMsg,
				        xyPos,
				        ADDR cells_Written

 00001C9F  66| 83 05		    add xyPos.y, 2
	   00000020 R 02

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR LeaveMsg,
				        SIZEOF LeaveMsg,
				        xyPos,
				        ADDR cells_Written

 00001CC4  B9 00000007			mov ecx, 7
 00001CC9  BE 00000000			mov esi, 0
 00001CCE  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 00001CD7  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F

 00001CE0			PrintStartTank:
 00001CE0  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written

 00001D00  83 C6 18			add esi, 24
 00001D03  66| FF 05			inc xyPos.y
	   00000020 R
 00001D0A  59				pop ecx
 00001D0B  E2 D3			loop PrintStartTank

 00001D0D  B9 00000005			mov ecx, 5
 00001D12  BE 00000000			mov esi, 0
 00001D17  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 00001D20  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001D29			PrintStartBogy:
 00001D29  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written

 00001D49  83 C6 07			add esi, 7
 00001D4C  66| FF 05			inc xyPos.y
	   00000020 R
 00001D53  59				pop ecx
 00001D54  E2 D3			loop PrintStartBogy

 00001D56			StartOrNot:
 00001D56  E8 00000000 E	    call ReadChar

					.IF ax == 1265h     ;press e to start game
 00001D61  E8 00000000 E	        call Clrscr
 00001D66  66| C7 05				mov xyPos.x, 28
	   0000001E R
	   001C
 00001D6F  66| C7 05				mov xyPos.y, 7
	   00000020 R
	   0007

 00001D78  B9 00000011				mov ecx, 17
 00001D7D  BE 00000000				mov esi, 0
 00001D82  EB 0F				jmp PrintIntro
				    .ENDIF
				    .IF ax == 266ch     ;press l to leave
 00001D8A  BB 00000004				mov ebx, 4
				        ret
				    .ENDIF
 00001D91  EB C3			jmp StartOrNot

 00001D93			PrintIntro:
 00001D93  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written

 00001DB3  83 C6 41			add esi, 65
 00001DB6  66| FF 05			inc xyPos.y
	   00000020 R
 00001DBD  59				pop ecx
 00001DBE  E2 D3			loop PrintIntro

 00001DC0			GameOrNot:
 00001DC0  E8 00000000 E	    call ReadChar
					.IF ax == 3920h     ;press space to start game
 00001DCB  E8 00000000 E	        call Clrscr
						INVOKE printGameStage
 00001DD5  BB 00000001				mov ebx, 1
 00001DDA  EB 02				jmp ExitFunc
					.ENDIF
 00001DDC  EB E2			jmp GameOrNot

 00001DDE			ExitFunc:
					ret
 00001DE0			printStartScene ENDP

 00001DE0			printGameStage PROC
 00001DE0				PrintGameSceneTop:
 00001DE0  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001DE9  66| C7 05			mov xyPos.y, 4
	   00000020 R
	   0004
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00001E0F  66| FF 05			inc xyPos.y
	   00000020 R

 00001E16  B9 00000018			mov ecx, 24
 00001E1B			PrintGameScene:
 00001E1B  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 00001E39  66| FF 05			inc xyPos.y
	   00000020 R
 00001E40  59				pop ecx
 00001E41  E2 D8			loop PrintGameScene

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00001E60  66| FF 05			inc xyPos.y
	   00000020 R

					INVOKE printGreenLine, xyPos
					
 00001E72			PrintBar:
 00001E72  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001E7B  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written

					INVOKE printLevel, xyPos

 00001EAC  66| C7 05			mov xyPos.x, 29
	   0000001E R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written
					
 00001ED2  66| C7 05			mov xyPos.x, 56
	   0000001E R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

					INVOKE printScore, xyPos

 00001F03  66| C7 05			mov xyPos.x, 80
	   0000001E R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

					INVOKE printLives, xyPos

 00001F34  66| C7 05			mov xyPos.x, 104
	   0000001E R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

					INVOKE printBogys, xyPos
 00001F65  C3				ret
 00001F66			printGameStage ENDP

 00001F66			printEndScene PROC
 00001F66  66| C7 05			mov xyPos.x, 40
	   0000001E R
	   0028
 00001F6F  66| C7 05			mov xyPos.y, 5
	   00000020 R
	   0005
 00001F78  B9 00000006			mov ecx, 6
 00001F7D  BE 00000000			mov esi, 0
					.IF bogysNum == 0
 00001F8C			printWin:
 00001F8C  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [winStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00001FAC  59					pop ecx
 00001FAD  83 C6 24				add esi, 36
 00001FB0  66| FF 05				inc xyPos.y
	   00000020 R
 00001FB7  E2 D3				loop printWin
					.ENDIF

					.IF livesNum == 0
 00001FC3			printLose:
 00001FC3  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [loseStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00001FE3  59					pop ecx
 00001FE4  83 C6 24				add esi, 36
 00001FE7  66| FF 05				inc xyPos.y
	   00000020 R
 00001FEE  E2 D3				loop printLose
					.ENDIF

 00001FF0  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00001FF9  66| C7 05			mov xyPos.x, 32
	   0000001E R
	   0020
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

 0000201F  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00002027  66| 8B 15			mov dx, scoreNum
	   000009AE R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPos,
						ADDR cells_Written

 00002055  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

 0000207A  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00002082  66| 8B 15			mov dx, livesNum
	   000009B4 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPos,
						ADDR cells_Written

 000020B0  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

 000020D5  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 000020DD  66| 8B 15			mov dx, bogysNum
	   000009BA R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPos,
						ADDR cells_Written

 0000210B  66| 83 05			add xyPos.y, 3
	   00000020 R 03
 00002113  66| C7 05			mov xyPos.x, 50
	   0000001E R
	   0032
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR restart,
						SIZEOF restart,
						xyPos,
						ADDR cells_Written

 00002139  66| 83 05			add xyPos.y, 2
	   00000020 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg,
						xyPos,
						ADDR cells_Written

					.IF bogysNum == 0
 00002168  66| 83 05				add xyPos.y, 2
	   00000020 R 02
						.IF levelNum < 3
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR nextLevel,
								SIZEOF nextLevel,
								xyPos,
								ADDR cells_Written
						.ENDIF
						.IF levelNum == 3
 000021A1  66| 83 2D					sub xyPos.x, 15
	   0000001E R 0F
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR finalMsg,
								SIZEOF finalMsg,
								xyPos,
								ADDR cells_Written
						.ENDIF
					.ENDIF

 000021C6			restartOrLeave:
 000021C6  E8 00000000 E		call ReadChar
					.IF ax == 1372h
 000021D1  BB 00000001				mov ebx, 1
 000021D6  E8 00000000 E			call Clrscr
 000021DB  EB 37				jmp ExitEndScene
					.ENDIF
					.IF ax == 266ch
 000021E3  BB 00000004				mov ebx, 4
 000021E8  EB 2A				jmp ExitEndScene
					.ENDIF
					.IF bogysNum == 0
						.IF ax == 316eh
 000021FA  BB 00000001					mov ebx, 1
							.IF levelNum < 3
 00002209  66| FF 05						inc levelNum
	   00000998 R
							.ENDIF
 00002210  EB 02					jmp ExitEndScene
						.ENDIF
					.ENDIF
 00002212  EB B2			jmp restartOrLeave

 00002214			ExitEndScene:
 00002214  C3				ret
 00002215			printEndScene ENDP

 00002215			printLevel PROC,
					xyPosInit:COORD
 00002218  66| C7 45 08			mov xyPosInit.x, 12
	   000C
 0000221E  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00002224  66| 8B 15			mov dx, levelNum
	   00000998 R
					INVOKE decStrLevel, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR levelStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00002253			printLevel ENDP

 00002253			printScore PROC,
					xyPosInit:COORD
 00002256  66| C7 45 08			mov xyPosInit.x, 63
	   003F
 0000225C  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00002262  66| 8B 15			mov dx, scoreNum
	   000009AE R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00002291			printScore ENDP

 00002291			printLives PROC,
					xyPosInit:COORD
 00002294  66| C7 45 08			mov xyPosInit.x, 87
	   0057
 0000229A  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 000022A0  66| 8B 15			mov dx, livesNum
	   000009B4 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 000022CF			printLives ENDP

 000022CF			printBogys PROC,
					xyPosInit:COORD
 000022D2  66| C7 45 08			mov xyPosInit.x, 111
	   006F
 000022D8  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 000022DE  66| 8B 15			mov dx, bogysNum
	   000009BA R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 0000230D			printBogys ENDP

 0000230D			initialLevelBogyPos PROC
 0000230D  50				push eax

				    .IF levelNum == 1
 00002318  66| A1		        mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
 0000231E  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 00002324  66| A1		        mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
 0000232A  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 00002330  66| A1		        mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
 00002336  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 0000233C  66| A1		        mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
 00002342  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 00002348  66| A1		        mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
 0000234E  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 00002354  66| A1		        mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
 0000235A  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 2
 0000236A  66| A1		        mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
 00002370  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 00002376  66| A1		        mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
 0000237C  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 00002382  66| A1		        mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
 00002388  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 0000238E  66| A1		        mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
 00002394  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 0000239A  66| A1		        mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
 000023A0  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 000023A6  66| A1		        mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
 000023AC  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 3
 000023BC  66| A1		        mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
 000023C2  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 000023C8  66| A1		        mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
 000023CE  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 000023D4  66| A1		        mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
 000023DA  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 000023E0  66| A1		        mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
 000023E6  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 000023EC  66| A1		        mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
 000023F2  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 000023F8  66| A1		        mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
 000023FE  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

 00002404  58			    pop eax
 00002405  C3			    ret
 00002406			initialLevelBogyPos ENDP

 00002406			bogyWalking PROC,
					xyPosInBogy:COORD
 00002409  B9 00000003			mov ecx, 3
 0000240E  BE 00000000			mov esi, 0

					;mov ebx, xyPosInBogy.y
 00002413			printBogy:
 00002413  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00002430  83 C6 05			add esi, 5
 00002433  66| FF 45 0A			inc xyPosInBogy.y
 00002437  59				pop ecx
 00002438  E2 D9			loop printBogy
					
					ret
 0000243E			bogyWalking ENDP

 0000243E			bogyClear PROC,
					xyPosInBogy:COORD
 00002441  B9 00000003			mov ecx, 3
 00002446  BE 00000000			mov esi, 0
 0000244B			removeBogy:
 0000244B  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00002468  83 C6 05			add esi, 5
 0000246B  66| FF 45 0A			inc xyPosInBogy.y
 0000246F  59				pop ecx
 00002470  E2 D9			loop removeBogy
					ret
 00002476			bogyClear ENDP

 00002476			tankWalking PROC,
					xyPosInit:COORD
 00002479  B9 00000003			mov ecx, 3
 0000247E  BE 00000000			mov esi, 0

					;mov ebx, xyPosInit.y
 00002483			printTank:
 00002483  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 000024A0  83 C6 08			add esi, 8
 000024A3  66| FF 45 0A			inc xyPosInit.y
 000024A7  59				pop ecx
 000024A8  E2 D9			loop printTank
					ret
 000024AE			tankWalking ENDP

 000024AE			tankClear PROC,
					xyPosInit:COORD
 000024B1  B9 00000003			mov ecx, 3
 000024B6  BE 00000000			mov esi, 0
 000024BB			removeTank:
 000024BB  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 000024D8  83 C6 08			add esi, 8
 000024DB  66| FF 45 0A			inc xyPosInit.y
 000024DF  59				pop ecx
 000024E0  E2 D9			loop removeTank
					ret
 000024E6			tankClear ENDP

 000024E6			noWorkWalking PROC,
					xyPosInit:COORD
 000024E9			printNoWork:
 000024E9  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bullet,
						SIZEOF bullet,
						xyPosInit,
						ADDR cells_Written
 00002504  59				pop ecx
					ret
 00002509			noWorkWalking ENDP

 00002509			noWorkClear PROC,
					xyPosInit:COORD
 0000250C			removeNoWork:
 0000250C  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR clearBullet,
						SIZEOF clearBullet,
						xyPosInit,
						ADDR cells_Written
 00002527  59				pop ecx
					ret
 0000252C			noWorkClear ENDP

 0000252C			printGreenLine PROC,
					xyPosInLine:COORD
 0000252F  66| C7 45 08			mov xyPosInLine.x, 20
	   0014
 00002535  66| C7 45 0A			mov xyPosInLine.y, 5
	   0005

 0000253B  B9 00000018			mov ecx, 24
 00002540  BE 00000000			mov esi, 0
 00002545			PrintLine:
 00002545  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInLine,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInLine,
						ADDR cells_Written
 0000257A  66| FF 45 0A			inc xyPosInLine.y
 0000257E  59				pop ecx
 0000257F  E2 C4			loop PrintLine
					ret
 00002585			printGreenLine ENDP

 00002585			decStrLevel PROC,
					levelNumDec:WORD
 00002588  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 0000258D  B2 0A			mov dl, 10					;除數
 0000258F  66| 8B 45 08			mov ax, levelNumDec			;被除數
 00002593			change:
 00002593  51				push ecx
 00002594  F6 F2			div dl
 00002596  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00002599  49				dec ecx
 0000259A  88 A1 0000099A R		mov [levelStr + ecx], ah
 000025A0  66| 0F B6 C0			movzx ax, al				;商繼續除
 000025A4  59				pop ecx
 000025A5  E2 EC			loop change
					ret
 000025AB			decStrLevel ENDP

 000025AB			decStrScore PROC,
					scoreNumDec:WORD
 000025AE  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000025B3  B2 0A			mov dl, 10					;除數
 000025B5  66| 8B 45 08			mov ax, scoreNumDec			;被除數
 000025B9			change:
 000025B9  51				push ecx
 000025BA  F6 F2			div dl
 000025BC  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000025BF  49				dec ecx
 000025C0  88 A1 000009B0 R		mov [scoreStr + ecx], ah
 000025C6  66| 0F B6 C0			movzx ax, al				;商繼續除
 000025CA  59				pop ecx
 000025CB  E2 EC			loop change
					ret
 000025D1			decStrScore ENDP

 000025D1			decStrLives PROC,
					livesNumDec:WORD
 000025D4  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000025D9  B2 0A			mov dl, 10					;除數
 000025DB  66| 8B 45 08			mov ax, livesNumDec			;被除數
 000025DF			change:
 000025DF  51				push ecx
 000025E0  F6 F2			div dl
 000025E2  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000025E5  49				dec ecx
 000025E6  88 A1 000009B6 R		mov [livesStr + ecx], ah
 000025EC  66| 0F B6 C0			movzx ax, al				;商繼續除
 000025F0  59				pop ecx
 000025F1  E2 EC			loop change
					ret
 000025F7			decStrLives ENDP

 000025F7			decStrBogys PROC,
					bogysNumDec:WORD
 000025FA  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000025FF  B2 0A			mov dl, 10					;除數
 00002601  66| 8B 45 08			mov ax, bogysNumDec			;被除數
 00002605			change:
 00002605  51				push ecx
 00002606  F6 F2			div dl
 00002608  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 0000260B  49				dec ecx
 0000260C  88 A1 000009BC R		mov [bogysStr + ecx], ah
 00002612  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002616  59				pop ecx
 00002617  E2 EC			loop change
					ret
 0000261D			decStrBogys ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 21:01:16
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000C4E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000261D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 0000243E _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 0000244B _TEXT	
bogyWalking  . . . . . . . . . .	P Near	 00002406 _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  printBogy  . . . . . . . . . .	L Near	 00002413 _TEXT	
decStrBogys  . . . . . . . . . .	P Near	 000025F7 _TEXT	Length= 00000026 Public STDCALL
  bogysNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002605 _TEXT	
decStrLevel  . . . . . . . . . .	P Near	 00002585 _TEXT	Length= 00000026 Public STDCALL
  levelNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002593 _TEXT	
decStrLives  . . . . . . . . . .	P Near	 000025D1 _TEXT	Length= 00000026 Public STDCALL
  livesNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000025DF _TEXT	
decStrScore  . . . . . . . . . .	P Near	 000025AB _TEXT	Length= 00000026 Public STDCALL
  scoreNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000025B9 _TEXT	
initialLevelBogyPos  . . . . . .	P Near	 0000230D _TEXT	Length= 000000F9 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00001C13 Public STDCALL
  Ex . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 0000023E _TEXT	
  pauseLoop  . . . . . . . . . .	L Near	 000004E9 _TEXT	
  backToGame . . . . . . . . . .	L Near	 000004F8 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00001C0C _TEXT	
noWorkClear  . . . . . . . . . .	P Near	 00002509 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeNoWork . . . . . . . . .	L Near	 0000250C _TEXT	
noWorkWalking  . . . . . . . . .	P Near	 000024E6 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printNoWork  . . . . . . . . .	L Near	 000024E9 _TEXT	
printBogys . . . . . . . . . . .	P Near	 000022CF _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printEndScene  . . . . . . . . .	P Near	 00001F66 _TEXT	Length= 000002AF Public STDCALL
  printWin . . . . . . . . . . .	L Near	 00001F8C _TEXT	
  printLose  . . . . . . . . . .	L Near	 00001FC3 _TEXT	
  restartOrLeave . . . . . . . .	L Near	 000021C6 _TEXT	
  ExitEndScene . . . . . . . . .	L Near	 00002214 _TEXT	
printGameStage . . . . . . . . .	P Near	 00001DE0 _TEXT	Length= 00000186 Public STDCALL
  PrintGameSceneTop  . . . . . .	L Near	 00001DE0 _TEXT	
  PrintGameScene . . . . . . . .	L Near	 00001E1B _TEXT	
  PrintBar . . . . . . . . . . .	L Near	 00001E72 _TEXT	
printGreenLine . . . . . . . . .	P Near	 0000252C _TEXT	Length= 00000059 Public STDCALL
  xyPosInLine  . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00002545 _TEXT	
printLevel . . . . . . . . . . .	P Near	 00002215 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printLives . . . . . . . . . . .	P Near	 00002291 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printScore . . . . . . . . . . .	P Near	 00002253 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printStartScene  . . . . . . . .	P Near	 00001C13 _TEXT	Length= 000001CD Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 00001C45 _TEXT	
  PrintOption  . . . . . . . . .	L Near	 00001C72 _TEXT	
  PrintStartTank . . . . . . . .	L Near	 00001CE0 _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 00001D29 _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 00001D56 _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 00001D93 _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 00001DC0 _TEXT	
  ExitFunc . . . . . . . . . . .	L Near	 00001DDE _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 000024AE _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeTank . . . . . . . . . .	L Near	 000024BB _TEXT	
tankWalking  . . . . . . . . . .	P Near	 00002476 _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printTank  . . . . . . . . . .	L Near	 00002483 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
N0 . . . . . . . . . . . . . . .	Word	 0000007A _DATA	
N10  . . . . . . . . . . . . . .	Word	 0000008E _DATA	
N11  . . . . . . . . . . . . . .	Word	 00000090 _DATA	
N12  . . . . . . . . . . . . . .	Word	 00000092 _DATA	
N13  . . . . . . . . . . . . . .	Word	 00000094 _DATA	
N14  . . . . . . . . . . . . . .	Word	 00000096 _DATA	
N15  . . . . . . . . . . . . . .	Word	 00000098 _DATA	
N16  . . . . . . . . . . . . . .	Word	 0000009A _DATA	
N17  . . . . . . . . . . . . . .	Word	 0000009C _DATA	
N18  . . . . . . . . . . . . . .	Word	 0000009E _DATA	
N19  . . . . . . . . . . . . . .	Word	 000000A0 _DATA	
N1 . . . . . . . . . . . . . . .	Word	 0000007C _DATA	
N20  . . . . . . . . . . . . . .	Word	 000000A2 _DATA	
N2 . . . . . . . . . . . . . . .	Word	 0000007E _DATA	
N3 . . . . . . . . . . . . . . .	Word	 00000080 _DATA	
N4 . . . . . . . . . . . . . . .	Word	 00000082 _DATA	
N5 . . . . . . . . . . . . . . .	Word	 00000084 _DATA	
N6 . . . . . . . . . . . . . . .	Word	 00000086 _DATA	
N7 . . . . . . . . . . . . . . .	Word	 00000088 _DATA	
N8 . . . . . . . . . . . . . . .	Word	 0000008A _DATA	
N9 . . . . . . . . . . . . . . .	Word	 0000008C _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 000009BA _DATA	
bogysStr . . . . . . . . . . . .	Byte	 000009BC _DATA	
bogys  . . . . . . . . . . . . .	Byte	 00000990 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bullet . . . . . . . . . . . . .	Byte	 0000095C _DATA	
cells_Written  . . . . . . . . .	DWord	 000000E0 _DATA	
clearBogy  . . . . . . . . . . .	Byte	 0000094D _DATA	
clearBullet  . . . . . . . . . .	Byte	 00000963 _DATA	
clearTank  . . . . . . . . . . .	Byte	 00000926 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 0000036C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
finalMsg . . . . . . . . . . . .	Byte	 000003BF _DATA	
gameBgM  . . . . . . . . . . . .	Byte	 00000A2F _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 000009C0 _DATA	
gameBogy . . . . . . . . . . . .	Byte	 0000093E _DATA	
gameIntro  . . . . . . . . . . .	Byte	 000004BD _DATA	
gameTank . . . . . . . . . . . .	Byte	 0000090E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 0000096C _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 0000037F _DATA	
levelNum . . . . . . . . . . . .	Word	 00000998 _DATA	
levelStr . . . . . . . . . . . .	Byte	 0000099A _DATA	
level  . . . . . . . . . . . . .	Byte	 00000970 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 0000096A _DATA	
livesNum . . . . . . . . . . . .	Word	 000009B4 _DATA	
livesStr . . . . . . . . . . . .	Byte	 000009B6 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000988 _DATA	
loseStr  . . . . . . . . . . . .	Byte	 00000B76 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
nextLevel  . . . . . . . . . . .	Byte	 000003A7 _DATA	
paused . . . . . . . . . . . . .	Byte	 0000099E _DATA	
playing  . . . . . . . . . . . .	Byte	 000009A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restart  . . . . . . . . . . . .	Byte	 00000392 _DATA	
scoreNum . . . . . . . . . . . .	Word	 000009AE _DATA	
scoreStr . . . . . . . . . . . .	Byte	 000009B0 _DATA	
score  . . . . . . . . . . . . .	Byte	 00000980 _DATA	
startBogy  . . . . . . . . . . .	Byte	 0000049A _DATA	
startStr . . . . . . . . . . . .	Byte	 000000E4 _DATA	
startTank  . . . . . . . . . . .	Byte	 000003F2 _DATA	
state  . . . . . . . . . . . . .	Byte	 00000978 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winStr . . . . . . . . . . . . .	Byte	 00000A9E _DATA	
windowBound  . . . . . . . . . .	SMALL_RECT  00000012 _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000000 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosBogy0LevelArr  . . . . . . .	Word	 000000A4 _DATA	
xPosBogy1LevelArr  . . . . . . .	Word	 000000AA _DATA	
xPosBogy2LevelArr  . . . . . . .	Word	 000000B0 _DATA	
xPosBogy3LevelArr  . . . . . . .	Word	 000000B6 _DATA	
xPosBogy4LevelArr  . . . . . . .	Word	 000000BC _DATA	
xPosBogy5LevelArr  . . . . . . .	Word	 000000C2 _DATA	
xyPosBogy0 . . . . . . . . . . .	COORD	 000000C8 _DATA	
xyPosBogy1 . . . . . . . . . . .	COORD	 000000CC _DATA	
xyPosBogy2 . . . . . . . . . . .	COORD	 000000D0 _DATA	
xyPosBogy3 . . . . . . . . . . .	COORD	 000000D4 _DATA	
xyPosBogy4 . . . . . . . . . . .	COORD	 000000D8 _DATA	
xyPosBogy5 . . . . . . . . . . .	COORD	 000000DC _DATA	
xyPosNoWork0 . . . . . . . . . .	COORD	 00000026 _DATA	
xyPosNoWork10  . . . . . . . . .	COORD	 0000004E _DATA	
xyPosNoWork11  . . . . . . . . .	COORD	 00000052 _DATA	
xyPosNoWork12  . . . . . . . . .	COORD	 00000056 _DATA	
xyPosNoWork13  . . . . . . . . .	COORD	 0000005A _DATA	
xyPosNoWork14  . . . . . . . . .	COORD	 0000005E _DATA	
xyPosNoWork15  . . . . . . . . .	COORD	 00000062 _DATA	
xyPosNoWork16  . . . . . . . . .	COORD	 00000066 _DATA	
xyPosNoWork17  . . . . . . . . .	COORD	 0000006A _DATA	
xyPosNoWork18  . . . . . . . . .	COORD	 0000006E _DATA	
xyPosNoWork19  . . . . . . . . .	COORD	 00000072 _DATA	
xyPosNoWork1 . . . . . . . . . .	COORD	 0000002A _DATA	
xyPosNoWork20  . . . . . . . . .	COORD	 00000076 _DATA	
xyPosNoWork2 . . . . . . . . . .	COORD	 0000002E _DATA	
xyPosNoWork3 . . . . . . . . . .	COORD	 00000032 _DATA	
xyPosNoWork4 . . . . . . . . . .	COORD	 00000036 _DATA	
xyPosNoWork5 . . . . . . . . . .	COORD	 0000003A _DATA	
xyPosNoWork6 . . . . . . . . . .	COORD	 0000003E _DATA	
xyPosNoWork7 . . . . . . . . . .	COORD	 00000042 _DATA	
xyPosNoWork8 . . . . . . . . . .	COORD	 00000046 _DATA	
xyPosNoWork9 . . . . . . . . . .	COORD	 0000004A _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000022 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 0000001E _DATA	
yellowColor  . . . . . . . . . .	Word	 0000096E _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
