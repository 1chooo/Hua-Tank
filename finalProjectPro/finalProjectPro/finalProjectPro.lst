Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 11:51:16
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				printStartScene PROTO
				decStrLevel PROTO, levelNumDec:WORD
				decStrScore PROTO, scoreNumDec:WORD
				decStrLives PROTO, livesNumDec:WORD
				decStrBogys PROTO, bogysNumDec:WORD

				printLevel PROTO, xyPosInit:COORD
				printScore PROTO, xyPosInit:COORD
				printLives PROTO, xyPosInit:COORD
				printBogys PROTO, xyPosInit:COORD

				bogyWalking PROTO, xyPosInBogy:COORD
				bogyClear   PROTO, xyPosInBogy:COORD
				printGreenLine PROTO, xyPosInLine:COORD

				tankWalking PROTO, xyPosInit:COORD
				tankClear   PROTO, xyPosInit:COORD
				;controlTank PROTO

				; bullet move
				noWorkWalking PROTO, xyPosInit:COORD
				noWorkClear   PROTO, xyPosInit:COORD

				printEndScene PROTO
				printGameStage PROTO

				; 	玩遊戲   ebx = 1
				; 	暫停		ebx = 2
				; 	結束畫面	ebx = 3
				; 	離開程式	ebx = 4

 00000000			.data
					; 視窗的變數們
 00000000 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy",0 ; 標題
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 00000012 0000 0000 007D		windowBound    SMALL_RECT <0,0,125,25>    ; 視窗大小
	   0019
 0000001A 00000000			consoleHandle  DWORD ?

 0000001E 0006 0005			xyPos COORD   <6,5>
 00000022 0007 000F			xyPosTank COORD    <7,15>

 00000026 000F 0006			xyPosNoWork0 COORD <15,6>
 0000002A 000F 0007			xyPosNoWork1 COORD <15,7>
 0000002E 000F 0008			xyPosNoWork2 COORD <15,8>
 00000032 000F 0009			xyPosNoWork3 COORD <15,9>
 00000036 000F 000A			xyPosNoWork4 COORD <15,10>
 0000003A 000F 000B			xyPosNoWork5 COORD <15,11>
 0000003E 000F 000C			xyPosNoWork6 COORD <15,12>
 00000042 000F 000D			xyPosNoWork7 COORD <15,13>
 00000046 000F 000E			xyPosNoWork8 COORD <15,14>
 0000004A 000F 000F			xyPosNoWork9 COORD <15,15>
 0000004E 000F 0010			xyPosNoWork10 COORD <15,16>
 00000052 000F 0011			xyPosNoWork11 COORD <15,17>
 00000056 000F 0012			xyPosNoWork12 COORD <15,18>
 0000005A 000F 0013			xyPosNoWork13 COORD <15,19>
 0000005E 000F 0014			xyPosNoWork14 COORD <15,20>
 00000062 000F 0015			xyPosNoWork15 COORD <15,21>
 00000066 000F 0016			xyPosNoWork16 COORD <15,22>
 0000006A 000F 0017			xyPosNoWork17 COORD <15,23>
 0000006E 000F 0018			xyPosNoWork18 COORD <15,24>
 00000072 000F 0019			xyPosNoWork19 COORD <15,25>
 00000076 000F 001A			xyPosNoWork20 COORD <15,26>

 0000007A 0000				N0  WORD 0
 0000007C 0000				N1  WORD 0
 0000007E 0000				N2  WORD 0
 00000080 0000				N3  WORD 0
 00000082 0000				N4  WORD 0
 00000084 0000				N5  WORD 0
 00000086 0000				N6  WORD 0
 00000088 0000				N7  WORD 0
 0000008A 0000				N8  WORD 0
 0000008C 0000				N9  WORD 0
 0000008E 0000				N10 WORD 0
 00000090 0000				N11 WORD 0
 00000092 0000				N12 WORD 0
 00000094 0000				N13 WORD 0
 00000096 0000				N14 WORD 0
 00000098 0000				N15 WORD 0
 0000009A 0000				N16 WORD 0
 0000009C 0000				N17 WORD 0
 0000009E 0000				N18 WORD 0
 000000A0 0000				N19 WORD 0
 000000A2 0000				N20 WORD 0

 000000A4 006B 0005			xyPosBogy0 COORD   <107,5>
 000000A8 006C 0009			xyPosBogy1 COORD   <108,9>
 000000AC 006D 000D			xyPosBogy2 COORD   <109,13>
 000000B0 006E 0011			xyPosBogy3 COORD   <110,17>
 000000B4 006F 0015			xyPosBogy4 COORD   <111,21>
 000000B8 0070 0019			xyPosBogy5 COORD   <112,25>
 000000BC 00000000			cells_Written DWORD ?

					; 開始畫面的字
 000000C0 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 0000012C  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _.' ____ \    |_   _ \  .'   `.  .' ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 2E 27 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2E 27
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 00000198  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / _ \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/ .'   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 5F
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 2E
	   27 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000204  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __'.      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 27
	   2E 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 00000270  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\ `.___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 60
	   2E 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 000002DC  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20

					;印開始畫面的提示字
 00000348 50 72 65 73 73		enterMsg BYTE "Press 'E' to enter",0
	   20 27 45 27 20
	   74 6F 20 65 6E
	   74 65 72 00
 0000035B 50 72 65 73 73		leaveMsg BYTE "Press 'L' to leave",0
	   20 27 4C 27 20
	   74 6F 20 6C 65
	   61 76 65 00
 0000036E 50 72 65 73 73		restart  BYTE "Press 'R' to restart",0
	   20 27 52 27 20
	   74 6F 20 72 65
	   73 74 61 72 74
	   00

					;印坦克
 00000383 20 20 20 20 20		startTank BYTE "       \                "
	   20 20 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 0000039B  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 000003B3  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 000003CB  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 000003E3  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 000003FB  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 00000413  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20
					;印Bogy
 0000042B 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 00000432  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 00000439  2F 20 48 55 41				  BYTE "/ HUA \"
	   20 5C
 00000440  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 00000447  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20

 0000044E 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 0000048F  2A 20 20 20 20	              BYTE "*                      Game Introduction:                       *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000004D0  2A 20 20 20 20	              BYTE "*            Control the Hua Tank to kill the Bogy.             *"
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000511  2A 20 20 20 20	              BYTE "*             Don't let Bogy cross the green line,              *"
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000552  2A 20 20 20 20				  BYTE "*                or your life will shock down!!                 *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000593  2A 20 20 20 53	              BYTE "*   Start with 3 lives, once the live reaches zero, you lose!!  *"
	   74 61 72 74 20
	   77 69 74 68 20
	   33 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 2A
 000005D4  2A 20 20 20 20	              BYTE "*     Kill the last monsters, if you still alive, you win!!     *"
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 2A
 00000615  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000656  2A 20 20 20 20	              BYTE "*                   How to control the tank:                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000697  2A 20 20 20 20	              BYTE "*               + press 'up'    to move up                      *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000006D8  2A 20 20 20 20	              BYTE "*               + press 'down'  to move down                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000719  2A 20 20 20 20	              BYTE "*               + press 'right' to fire bullet                  *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000075A  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000079B  2A 20 20 20 20	              BYTE "*                         How to play:                          *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000007DC  2A 20 20 20 20	              BYTE "*               + press 'space' to start game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000081D  2A 20 20 20 20	              BYTE "*               + press 'P'     to pause game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000085E  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A

 0000089F 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 000008A7  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 000008AF  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20

 000008B7 20 20 20 20 20		clearTank BYTE "        "
	   20 20 20
 000008BF  20 20 20 20 20				  BYTE "        "
	   20 20 20
 000008C7  20 20 20 20 20				  BYTE "        "
	   20 20 20

 000008CF 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 000008D4  7C 4F 76 4F 7C				  BYTE "|OvO|"
 000008D9  7C 5F 7C 5F 7C				  BYTE "|_|_|"

 000008DE 20 20 20 20 20		clearBogy BYTE "     "
 000008E3  20 20 20 20 20				  BYTE "     "
 000008E8  20 20 20 20 20				  BYTE "     "

 000008ED 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 000008F4 20 20 20 20 20		clearBullet BYTE "      ",0
	   20 00

 000008FB 7C 00				line BYTE "|",0
 000008FD 000A				greenColor WORD 0Ah

 000008FF 000E				yellowColor WORD 0Eh

 00000901 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 00000909 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 00000911 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000919 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 00000921 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000929 0001				levelNum WORD 1
 0000092B  00000004 [			levelStr BYTE 4 DUP(?)
	    00
	   ]

 0000092F 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 00000937 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 0000093F 0000				scoreNum WORD 0
 00000941  00000004 [			scoreStr BYTE 4 DUP(?)
	    00
	   ]

 00000945 0003				livesNum WORD 3
 00000947  00000004 [			livesStr BYTE 4 DUP(?)
	    00
	   ]
					
 0000094B 0001				bogysNum WORD 1
 0000094D  00000004 [			bogysStr BYTE 4 DUP(?)
	    00
	   ]

 00000951  0000006E [			gameBgTB BYTE 110 DUP("*"),0
	    2A
	   ] 00
 000009C0 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0	
	   0000006C [
	    20
	   ] 2A 00
					
 00000A2F 20 20 5F 5F 5F		winStr  BYTE "  ____      ____ _____ ____  _____  "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   20
 00000A53  20 7C 5F 20 20			    BYTE " |_  _|    |_  _|_   _|_   \|_   _| "
	   5F 7C 20 20 20
	   20 7C 5F 20 20
	   5F 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 20 5C 7C 5F
	   20 20 20 5F 7C
	   20
 00000A77  20 20 20 5C 20			    BYTE "   \ \  /\  / /   | |   |   \ | |   "
	   5C 20 20 2F 5C
	   20 20 2F 20 2F
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 5C 20
	   7C 20 7C 20 20
	   20
 00000A9B  20 20 20 20 5C			    BYTE "    \ \/  \/ /    | |   | |\ \| |   "
	   20 5C 2F 20 20
	   5C 2F 20 2F 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5C 20 5C
	   7C 20 7C 20 20
	   20
 00000ABF  20 20 20 20 20			    BYTE "     \  /\  /    _| |_ _| |_\   |_  "
	   5C 20 20 2F 5C
	   20 20 2F 20 20
	   20 20 5F 7C 20
	   7C 5F 20 5F 7C
	   20 7C 5F 5C 20
	   20 20 7C 5F 20
	   20
 00000AE3  20 20 20 20 20			    BYTE "      \/  \/    |_____|_____|\____| "
	   20 5C 2F 20 20
	   5C 2F 20 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5C
	   5F 5F 5F 5F 7C
	   20

 00000B07 20 5F 5F 5F 5F		loseStr BYTE " _____      ___    ______  ________ "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20
 00000B2B  7C 5F 20 20 20				BYTE "|_   _|   .'   `..' ____ \|_   __  |"
	   5F 7C 20 20 20
	   2E 27 20 20 20
	   60 2E 2E 27 20
	   5F 5F 5F 5F 20
	   5C 7C 5F 20 20
	   20 5F 5F 20 20
	   7C
 00000B4F  20 20 7C 20 7C				BYTE "  | |    /  .-.  | (___ \_| | |_ \_|"	
	   20 20 20 20 2F
	   20 20 2E 2D 2E
	   20 20 7C 20 28
	   5F 5F 5F 20 5C
	   5F 7C 20 7C 20
	   7C 5F 20 5C 5F
	   7C
 00000B73  20 20 7C 20 7C				BYTE "  | |   _| |   | |_.____ \  |  _| _ "
	   20 20 20 5F 7C
	   20 7C 20 20 20
	   7C 20 7C 5F 2E
	   5F 5F 5F 5F 20
	   5C 20 20 7C 20
	   20 5F 7C 20 5F
	   20
 00000B97  20 5F 7C 20 7C				BYTE " _| |__/ \  `-'  / \____) \_| |__/ |"
	   5F 5F 2F 20 5C
	   20 20 60 2D 27
	   20 20 2F 20 5C
	   5F 5F 5F 5F 29
	   20 5C 5F 7C 20
	   7C 5F 5F 2F 20
	   7C
 00000BBB  7C 5F 5F 5F 5F				BYTE "|________|`.___.' \_______/________|"
	   5F 5F 5F 5F 7C
	   60 2E 5F 5F 5F
	   2E 27 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 2F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C


 00000000			.code

 00000000			main PROC
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001A R		mov consoleHandle, eax
					
					INVOKE SetConsoleTitle, ADDR windowTitleStr			; 設定視窗標題
					
					INVOKE SetConsoleWindowInfo,						; 設定視窗大小
				     	consoleHandle,
				     	TRUE,
				     	ADDR windowBound
					
					INVOKE printStartScene

 0000002D			Ex:	
					.IF ebx == 3
 00000032  E8 00000000 E			call Clrscr
						INVOKE printEndScene
					.ENDIF

					.IF ebx == 4        ;直接離開
 00000041  E8 00000000 E			call Clrscr
 00000046  E9 0000152D				jmp ExitProgram
					.ENDIF

					.IF ebx == 1 ; 進入遊戲
 00000054  66| C7 05				mov scoreNum, 0
	   0000093F R
	   0000
 0000005D  66| C7 05				mov livesNum, 3
	   00000945 R
	   0003
 00000066  66| C7 05				mov bogysNum, 5
	   0000094B R
	   0005
						INVOKE printGameStage

 00000074  66| C7 05				mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
 0000007D  66| C7 05				mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
 00000086  66| C7 05				mov xyPosBogy2.x, 109
	   000000AC R
	   006D
 0000008F  66| C7 05				mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
 00000098  66| C7 05				mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
 000000A1  66| C7 05				mov xyPosBogy5.x, 112
	   000000B8 R
	   0070

 000000AA  66| C7 05				mov xyPosTank.y, 15
	   00000024 R
	   000F

 000000B3  66| C7 05				mov N0, 0
	   0000007A R
	   0000
 000000BC  66| C7 05				mov N1, 0
	   0000007C R
	   0000
 000000C5  66| C7 05				mov N2, 0
	   0000007E R
	   0000
 000000CE  66| C7 05				mov N3, 0
	   00000080 R
	   0000
 000000D7  66| C7 05				mov N4 , 0 
	   00000082 R
	   0000
 000000E0  66| C7 05				mov N5 , 0 
	   00000084 R
	   0000
 000000E9  66| C7 05				mov N6 , 0 
	   00000086 R
	   0000
 000000F2  66| C7 05				mov N7 , 0 
	   00000088 R
	   0000
 000000FB  66| C7 05				mov N8 , 0 
	   0000008A R
	   0000
 00000104  66| C7 05				mov N9 , 0 
	   0000008C R
	   0000
 0000010D  66| C7 05				mov N10, 0 
	   0000008E R
	   0000
 00000116  66| C7 05				mov N11, 0 
	   00000090 R
	   0000
 0000011F  66| C7 05				mov N12, 0 
	   00000092 R
	   0000
 00000128  66| C7 05				mov N13, 0 
	   00000094 R
	   0000
 00000131  66| C7 05				mov N14, 0 
	   00000096 R
	   0000
 0000013A  66| C7 05				mov N15, 0 
	   00000098 R
	   0000
 00000143  66| C7 05				mov N16, 0 
	   0000009A R
	   0000
 0000014C  66| C7 05				mov N17, 0 
	   0000009C R
	   0000
 00000155  66| C7 05				mov N18, 0 
	   0000009E R
	   0000
 0000015E  66| C7 05				mov N19, 0 
	   000000A0 R
	   0000
 00000167  66| C7 05				mov N20, 0
	   000000A2 R
	   0000

 00000170  66| C7 05				mov xyPosNoWork0.x , 15
	   00000026 R
	   000F
 00000179  66| C7 05				mov xyPosNoWork1.x , 15
	   0000002A R
	   000F
 00000182  66| C7 05				mov xyPosNoWork2.x , 15
	   0000002E R
	   000F
 0000018B  66| C7 05				mov xyPosNoWork3.x , 15
	   00000032 R
	   000F
 00000194  66| C7 05				mov xyPosNoWork4.x , 15
	   00000036 R
	   000F
 0000019D  66| C7 05				mov xyPosNoWork5.x , 15
	   0000003A R
	   000F
 000001A6  66| C7 05				mov xyPosNoWork6.x , 15
	   0000003E R
	   000F
 000001AF  66| C7 05				mov xyPosNoWork7.x , 15
	   00000042 R
	   000F
 000001B8  66| C7 05				mov xyPosNoWork8.x , 15
	   00000046 R
	   000F
 000001C1  66| C7 05				mov xyPosNoWork9.x , 15
	   0000004A R
	   000F
 000001CA  66| C7 05				mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
 000001D3  66| C7 05				mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 000001DC  66| C7 05				mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 000001E5  66| C7 05				mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 000001EE  66| C7 05				mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
 000001F7  66| C7 05				mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00000200  66| C7 05				mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 00000209  66| C7 05				mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 00000212  66| C7 05				mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
 0000021B  66| C7 05				mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00000224  66| C7 05				mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
					.ENDIF

 0000022D			GameLoop:
					INVOKE tankWalking, xyPosTank

					.IF N0 == 1
				        INVOKE noWorkWalking, xyPosNoWork0 
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkWalking, xyPosNoWork1 
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkWalking, xyPosNoWork2 
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkWalking, xyPosNoWork3 
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkWalking, xyPosNoWork4 
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkWalking, xyPosNoWork5 
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkWalking, xyPosNoWork6 
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkWalking, xyPosNoWork7 
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkWalking, xyPosNoWork8 
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkWalking, xyPosNoWork9 
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkWalking, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkWalking, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkWalking, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkWalking, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkWalking, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkWalking, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkWalking, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkWalking, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkWalking, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkWalking, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkWalking, xyPosNoWork20
				    .ENDIF

					.IF xyPosBogy0.x < 107
						INVOKE bogyWalking, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyWalking, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyWalking, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyWalking, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyWalking, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyWalking, xyPosBogy5
					.ENDIF

 0000046F  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 00000478  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR playing,
						SIZEOF playing,
						xyPos,
						ADDR cells_Written
 0000049E  E8 00000000 E		call ReadKey

					.IF ax == 1970h
 000004A9  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 000004B2  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR paused,
						SIZEOF paused,
						xyPos,
						ADDR cells_Written
 000004D8			pauseLoop:
 000004D8  E8 00000000 E			call ReadKey
						.IF ax == 3920h
 000004E3  EB 02					jmp backToGame
						.ENDIF
 000004E5  EB F1				jmp pauseLoop
					.ENDIF

 000004E7			backToGame:

					.IF ax == 4800h
						INVOKE tankClear, xyPosTank
 000004F8  66| 83 2D				sub xyPosTank.y, 1
	   00000024 R 01
						.IF xyPosTank.y < 5
 0000050A  66| C7 05					mov xyPosTank.y, 5
	   00000024 R
	   0005
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 5000h
						INVOKE tankClear, xyPosTank
 0000052F  66| 83 05				add xyPosTank.y, 1
	   00000024 R 01
						.IF xyPosTank.y > 25
 00000541  66| C7 05					mov xyPosTank.y, 25
	   00000024 R
	   0019
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 4D00h
						.IF xyPosTank.y == 5
 00000569  66| C7 05		            mov N0, 1
	   0000007A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 6
 0000057C  66| C7 05		            mov N1, 1
	   0000007C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 7
 0000058F  66| C7 05		            mov N2, 1
	   0000007E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 8
 000005A2  66| C7 05		            mov N3, 1
	   00000080 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 9
 000005B5  66| C7 05		            mov N4, 1
	   00000082 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 10
 000005C8  66| C7 05		            mov N5, 1
	   00000084 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 11
 000005DB  66| C7 05		            mov N6, 1
	   00000086 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 12
 000005EE  66| C7 05		            mov N7, 1
	   00000088 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 13
 00000601  66| C7 05		            mov N8, 1
	   0000008A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 14
 00000614  66| C7 05		            mov N9, 1
	   0000008C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 15
 00000627  66| C7 05		            mov N10, 1
	   0000008E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 16
 0000063A  66| C7 05		            mov N11, 1
	   00000090 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 17
 0000064D  66| C7 05		            mov N12, 1
	   00000092 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 18
 00000660  66| C7 05		            mov N13, 1
	   00000094 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 19
 00000673  66| C7 05		            mov N14, 1
	   00000096 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 20
 00000686  66| C7 05		            mov N15, 1
	   00000098 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 21
 00000699  66| C7 05		            mov N16, 1
	   0000009A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 22
 000006AC  66| C7 05		            mov N17, 1
	   0000009C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 23
 000006BF  66| C7 05		            mov N18, 1
	   0000009E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 24
 000006D2  66| C7 05		            mov N19, 1
	   000000A0 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 25
 000006E5  66| C7 05		            mov N20, 1
	   000000A2 R
	   0001
				        .ENDIF
					.ENDIF

 000006EE  50				push eax
 000006EF  B8 000001F4			mov eax, 500
 000006F4  E8 00000000 E		call Delay
 000006F9  58				pop eax

					.IF xyPosBogy0.x < 107
						INVOKE bogyClear, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyClear, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyClear, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyClear, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyClear, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyClear, xyPosBogy5
					.ENDIF

					; clear no work
					.IF N0 == 1
				        INVOKE noWorkClear, xyPosNoWork0
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkClear, xyPosNoWork1
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkClear, xyPosNoWork2
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkClear, xyPosNoWork3
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkClear, xyPosNoWork4
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkClear, xyPosNoWork5
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkClear, xyPosNoWork6
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkClear, xyPosNoWork7
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkClear, xyPosNoWork8
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkClear, xyPosNoWork9
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkClear, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkClear, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkClear, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkClear, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkClear, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkClear, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkClear, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkClear, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkClear, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkClear, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkClear, xyPosNoWork20
				    .ENDIF

					
					INVOKE printGreenLine, xyPos
 0000093C  66| 83 2D			sub xyPosBogy0.x, 1
	   000000A4 R 01
 00000944  66| 83 2D			sub xyPosBogy1.x, 1
	   000000A8 R 01
 0000094C  66| 83 2D			sub xyPosBogy2.x, 1
	   000000AC R 01
 00000954  66| 83 2D			sub xyPosBogy3.x, 1
	   000000B0 R 01
 0000095C  66| 83 2D			sub xyPosBogy4.x, 1
	   000000B4 R 01
 00000964  66| 83 2D			sub xyPosBogy5.x, 1
	   000000B8 R 01

					.IF N0 == 1
 0000097A  66| 83 05		        add xyPosNoWork0.x, 3
	   00000026 R 03
 00000982  50			        push eax
 00000983  66| A1		        mov ax, xyPosBogy0.x
	   000000A4 R
 00000989  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork0.x >= ax
 00000996  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 0000099F  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
 000009A8  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 000009B0  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000009D8  BB 00000003		                mov ebx, 3
 000009DD  E9 FFFFF64B		                jmp Ex
				            .ENDIF
 000009E2  66| C7 05		            mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
				        .ENDIF
 000009EB  58			        pop eax
				        .IF xyPosNoWork0.x > 106
 000009F6  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 000009FF  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N1 == 1
 00000A16  66| 83 05		        add xyPosNoWork1.x, 3
	   0000002A R 03
 00000A1E  50			        push eax
 00000A1F  66| A1		        mov ax, xyPosBogy0.x
	   000000A4 R
 00000A25  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork1.x >= ax
 00000A32  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000A3B  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
 00000A44  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000A4C  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000A74  BB 00000003		                mov ebx, 3
 00000A79  E9 FFFFF5AF		                jmp Ex
				            .ENDIF
 00000A7E  66| C7 05		            mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
				        .ENDIF
 00000A87  58			        pop eax
				        .IF xyPosNoWork1.x > 106
 00000A92  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000A9B  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N2 == 1
 00000AAE  66| 83 05		        add xyPosNoWork2.x, 3
	   0000002E R 03
				        .IF xyPosNoWork2.x > 106
 00000AC0  66| C7 05		            mov N2, 0
	   0000007E R
	   0000
 00000AC9  66| C7 05		            mov xyPosNoWork2.x, 15
	   0000002E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N3 == 1
 00000AE0  66| 83 05		        add xyPosNoWork3.x, 3
	   00000032 R 03
 00000AE8  50			        push eax
 00000AE9  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 00000AEF  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork3.x >= ax
 00000AFC  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000B05  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
 00000B0E  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000B16  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000B3E  BB 00000003		                mov ebx, 3
 00000B43  E9 FFFFF4E5		                jmp Ex
				            .ENDIF
 00000B48  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 00000B51  58			        pop eax
				        .IF xyPosNoWork3.x > 106
 00000B5C  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000B65  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N4 == 1
 00000B7C  66| 83 05		        add xyPosNoWork4.x, 3
	   00000036 R 03
 00000B84  50			        push eax
 00000B85  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 00000B8B  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork4.x >= ax
 00000B98  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000BA1  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
 00000BAA  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000BB2  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000BDA  BB 00000003		                mov ebx, 3
 00000BDF  E9 FFFFF449		                jmp Ex
				            .ENDIF
 00000BE4  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 00000BED  58			        pop eax
				        .IF xyPosNoWork4.x > 106
 00000BF8  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000C01  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N5 == 1
 00000C18  66| 83 05		        add xyPosNoWork5.x, 3
	   0000003A R 03
 00000C20  50			        push eax
 00000C21  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 00000C27  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork5.x >= ax
 00000C34  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000C3D  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
 00000C46  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000C4E  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000C76  BB 00000003		                mov ebx, 3
 00000C7B  E9 FFFFF3AD		                jmp Ex
				            .ENDIF
 00000C80  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 00000C89  58			        pop eax
				        .IF xyPosNoWork5.x > 106
 00000C94  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000C9D  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N6 == 1
 00000CB0  66| 83 05		        add xyPosNoWork6.x, 3
	   0000003E R 03
				        .IF xyPosNoWork6.x > 106
 00000CC2  66| C7 05		            mov N6, 0
	   00000086 R
	   0000
 00000CCB  66| C7 05		            mov xyPosNoWork6.x, 15
	   0000003E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N7 == 1
 00000CE2  66| 83 05		        add xyPosNoWork7.x, 3
	   00000042 R 03
 00000CEA  50			        push eax
 00000CEB  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000CF1  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork7.x >= ax
 00000CFE  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000D07  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
 00000D10  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000D18  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000D40  BB 00000003		                mov ebx, 3
 00000D45  E9 FFFFF2E3		                jmp Ex
				            .ENDIF
 00000D4A  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000D53  58			        pop eax
				        .IF xyPosNoWork7.x > 106
 00000D5E  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000D67  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N8 == 1
 00000D7E  66| 83 05		        add xyPosNoWork8.x, 3
	   00000046 R 03
 00000D86  50			        push eax
 00000D87  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000D8D  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork8.x >= ax
 00000D9A  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000DA3  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
 00000DAC  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000DB4  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000DDC  BB 00000003		                mov ebx, 3
 00000DE1  E9 FFFFF247		                jmp Ex
				            .ENDIF
 00000DE6  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000DEF  58			        pop eax
				        .IF xyPosNoWork8.x > 106
 00000DFA  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000E03  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N9 == 1
 00000E1A  66| 83 05		        add xyPosNoWork9.x, 3
	   0000004A R 03
 00000E22  50			        push eax
 00000E23  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000E29  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork9.x >= ax
 00000E36  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000E3F  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
 00000E48  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000E50  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000E78  BB 00000003		                mov ebx, 3
 00000E7D  E9 FFFFF1AB		                jmp Ex
				            .ENDIF
 00000E82  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000E8B  58			        pop eax
				        .IF xyPosNoWork9.x > 106
 00000E96  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000E9F  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N10 == 1
 00000EB2  66| 83 05				add xyPosNoWork10.x, 3
	   0000004E R 03
						.IF xyPosNoWork10.x > 106
 00000EC4  66| C7 05					mov N10, 0
	   0000008E R
	   0000
 00000ECD  66| C7 05					mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
						.ENDIF
					.ENDIF

					.IF N11 == 1
 00000EE4  66| 83 05				add xyPosNoWork11.x, 3
	   00000052 R 03
 00000EEC  50					push eax
 00000EED  66| A1				mov ax, xyPosBogy3.x
	   000000B0 R
 00000EF3  66| 83 E8 06				sub ax, 6
						.IF xyPosNoWork11.x >= ax
 00000F00  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00000F09  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 00000F12  66| 83 05					add scoreNum, 10
	   0000093F R 0A
 00000F1A  66| 83 2D					sub bogysNum, 1
	   0000094B R 01
							INVOKE printScore, xyPos
							INVOKE printBogys, xyPos
							.IF bogysNum == 0
 00000F42  BB 00000003						mov ebx, 3
 00000F47  E9 FFFFF0E1						jmp Ex
							.ENDIF
 00000F4C  66| C7 05					mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
						.ENDIF
 00000F55  58					pop eax
						.IF xyPosNoWork11.x > 106
 00000F60  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00000F69  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
						.ENDIF
					.ENDIF

					.IF N12 == 1
 00000F80  66| 83 05		        add xyPosNoWork12.x, 3
	   00000056 R 03
 00000F88  50			        push eax
 00000F89  66| A1		        mov ax, xyPosBogy3.x
	   000000B0 R
 00000F8F  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork12.x >= ax
 00000F9C  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00000FA5  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 00000FAE  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00000FB6  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000FDE  BB 00000003		                mov ebx, 3
 00000FE3  E9 FFFFF045		                jmp Ex
				            .ENDIF
 00000FE8  66| C7 05		            mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
				        .ENDIF
 00000FF1  58			        pop eax
				        .IF xyPosNoWork12.x > 106
 00000FFC  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00001005  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N13 == 1
 0000101C  66| 83 05		        add xyPosNoWork13.x, 3
	   0000005A R 03
 00001024  50			        push eax
 00001025  66| A1		        mov ax, xyPosBogy3.x
	   000000B0 R
 0000102B  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork13.x >= ax
 00001038  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 00001041  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 0000104A  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00001052  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000107A  BB 00000003		                mov ebx, 3
 0000107F  E9 FFFFEFA9		                jmp Ex
				            .ENDIF
 00001084  66| C7 05		            mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
				        .ENDIF
 0000108D  58			        pop eax
				        .IF xyPosNoWork13.x > 106
 00001098  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 000010A1  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N14 == 1
 000010B4  66| 83 05		        add xyPosNoWork14.x, 3
	   0000005E R 03
				        .IF xyPosNoWork14.x > 106
 000010C6  66| C7 05		            mov N14, 0
	   00000096 R
	   0000
 000010CF  66| C7 05		            mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N15 == 1
 000010E6  66| 83 05		        add xyPosNoWork15.x, 3
	   00000062 R 03
 000010EE  50			        push eax
 000010EF  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 000010F5  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork15.x >= ax
 00001102  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 0000110B  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00001114  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 0000111C  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001144  BB 00000003		                mov ebx, 3
 00001149  E9 FFFFEEDF		                jmp Ex
				            .ENDIF
 0000114E  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 00001157  58			        pop eax
				        .IF xyPosNoWork15.x > 106
 00001162  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 0000116B  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
				        .ENDIF
				    .ENDIF
					
					.IF N16 == 1
 00001182  66| 83 05		        add xyPosNoWork16.x, 3
	   00000066 R 03
 0000118A  50			        push eax
 0000118B  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 00001191  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork16.x >= ax
 0000119E  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 000011A7  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 000011B0  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 000011B8  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000011E0  BB 00000003		                mov ebx, 3
 000011E5  E9 FFFFEE43		                jmp Ex
				            .ENDIF
 000011EA  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 000011F3  58			        pop eax
				        .IF xyPosNoWork16.x > 106
 000011FE  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 00001207  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N17 == 1
 0000121E  66| 83 05		        add xyPosNoWork17.x, 3
	   0000006A R 03
 00001226  50			        push eax
 00001227  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 0000122D  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork17.x >= ax
 0000123A  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00001243  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 0000124C  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 00001254  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000127C  BB 00000003		                mov ebx, 3
 00001281  E9 FFFFEDA7		                jmp Ex
				            .ENDIF
 00001286  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 0000128F  58			        pop eax
				        .IF xyPosNoWork17.x > 106
 0000129A  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 000012A3  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N18 == 1
 000012B6  66| 83 05		        add xyPosNoWork18.x, 3
	   0000006E R 03
				        .IF xyPosNoWork18.x > 106
 000012C8  66| C7 05		            mov N18, 0
	   0000009E R
	   0000
 000012D1  66| C7 05		            mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N19 == 1
 000012E8  66| 83 05		        add xyPosNoWork19.x, 3
	   00000072 R 03
 000012F0  50			        push eax
 000012F1  66| A1		        mov ax, xyPosBogy5.x
	   000000B8 R
 000012F7  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork19.x >= ax
 00001304  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 0000130D  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00001316  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 0000131E  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001346  BB 00000003		                mov ebx, 3
 0000134B  E9 FFFFECDD		                jmp Ex
				            .ENDIF
 00001350  66| C7 05		            mov xyPosBogy5.x, 112
	   000000B8 R
	   0070
				        .ENDIF
 00001359  58			        pop eax
				        .IF xyPosNoWork19.x > 106
 00001364  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 0000136D  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N20 == 1
 00001384  66| 83 05		        add xyPosNoWork20.x, 3
	   00000076 R 03
 0000138C  50			        push eax
 0000138D  66| A1		        mov ax, xyPosBogy5.x
	   000000B8 R
 00001393  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork20.x >= ax
 000013A0  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 000013A9  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
 000013B2  66| 83 05		            add scoreNum, 10
	   0000093F R 0A
 000013BA  66| 83 2D		            sub bogysNum, 1
	   0000094B R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000013E2  BB 00000003		                mov ebx, 3
 000013E7  E9 FFFFEC41		                jmp Ex
				            .ENDIF
 000013EC  66| C7 05		            mov xyPosBogy5.x, 112
	   000000B8 R
	   0070
				        .ENDIF
 000013F5  58			        pop eax
				        .IF xyPosNoWork20.x > 106
 00001400  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001409  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF xyPosBogy0.x < 16
 0000141C  66| C7 05				mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
 00001425  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001442  BB 00000003					mov ebx, 3 ;之後要改3
 00001447  E9 FFFFEBE1					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy1.x < 16
 00001456  66| C7 05				mov xyPosBogy1.x, 107
	   000000A8 R
	   006B
 0000145F  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 0000147C  BB 00000003					mov ebx, 3 ;之後要改3
 00001481  E9 FFFFEBA7					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy2.x < 16
 00001490  66| C7 05				mov xyPosBogy2.x, 107
	   000000AC R
	   006B
 00001499  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000014B6  BB 00000003					mov ebx, 3 ;之後要改3
 000014BB  E9 FFFFEB6D					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy3.x < 16
 000014CA  66| C7 05				mov xyPosBogy3.x, 107
	   000000B0 R
	   006B
 000014D3  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000014F0  BB 00000003					mov ebx, 3 ;之後要改3
 000014F5  E9 FFFFEB33					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy4.x < 16
 00001504  66| C7 05				mov xyPosBogy4.x, 107
	   000000B4 R
	   006B
 0000150D  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 0000152A  BB 00000003					mov ebx, 3 ;之後要改3
 0000152F  E9 FFFFEAF9					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy5.x < 16
 0000153E  66| C7 05				mov xyPosBogy5.x, 107
	   000000B8 R
	   006B
 00001547  66| 83 2D				sub livesNum, 1
	   00000945 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001564  BB 00000003					mov ebx, 3 ;之後要改3
 00001569  E9 FFFFEABF					jmp Ex		
						.ENDIF
					.ENDIF
					
 0000156E  E9 FFFFECBA			jmp GameLoop



 00001573  E8 00000000 E		call WaitMsg

 00001578			ExitProgram:
					exit
 0000157F			main ENDP

 0000157F			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 00001585  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 0000158C  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
				    	consoleHandle,
				        ADDR cursorInfo

					; 清空畫面
 000015A2  E8 00000000 E		call Clrscr

 000015A7  B9 00000006			mov ecx, 6
 000015AC  BE 00000000			mov esi, 0

				; 印開始畫面的標題
 000015B1			ShowStartStr:
 000015B1  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108,
						xyPos,
						ADDR cells_Written

 000015D1  83 C6 6C			add esi, 108
 000015D4  66| FF 05			inc xyPos.y
	   00000020 R
 000015DB  59				pop ecx
 000015DC  E2 D3			loop ShowStartStr

				; 印開始畫面的選項
 000015DE			PrintOption:
 000015DE  66| 83 05		    add xyPos.y, 7
	   00000020 R 07
 000015E6  66| 83 05		    add xyPos.x, 48
	   0000001E R 30

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR enterMsg,
				        SIZEOF enterMsg,
				        xyPos,
				        ADDR cells_Written

 0000160B  66| 83 05		    add xyPos.y, 2
	   00000020 R 02

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR LeaveMsg,
				        SIZEOF LeaveMsg,
				        xyPos,
				        ADDR cells_Written

 00001630  B9 00000007			mov ecx, 7
 00001635  BE 00000000			mov esi, 0
 0000163A  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 00001643  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F

 0000164C			PrintStartTank:
 0000164C  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written

 0000166C  83 C6 18			add esi, 24
 0000166F  66| FF 05			inc xyPos.y
	   00000020 R
 00001676  59				pop ecx
 00001677  E2 D3			loop PrintStartTank

 00001679  B9 00000005			mov ecx, 5
 0000167E  BE 00000000			mov esi, 0
 00001683  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 0000168C  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001695			PrintStartBogy:
 00001695  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written

 000016B5  83 C6 07			add esi, 7
 000016B8  66| FF 05			inc xyPos.y
	   00000020 R
 000016BF  59				pop ecx
 000016C0  E2 D3			loop PrintStartBogy

 000016C2			StartOrNot:
 000016C2  E8 00000000 E	    call ReadChar

					.IF ax == 1265h     ;press e to start game
 000016CD  E8 00000000 E	        call Clrscr
 000016D2  66| C7 05				mov xyPos.x, 28
	   0000001E R
	   001C
 000016DB  66| C7 05				mov xyPos.y, 7
	   00000020 R
	   0007

 000016E4  B9 00000011				mov ecx, 17
 000016E9  BE 00000000				mov esi, 0
 000016EE  EB 0F				jmp PrintIntro
				    .ENDIF
				    .IF ax == 266ch     ;press l to leave
 000016F6  BB 00000004				mov ebx, 4
				        ret
				    .ENDIF
 000016FD  EB C3			jmp StartOrNot

 000016FF			PrintIntro:
 000016FF  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written

 0000171F  83 C6 41			add esi, 65
 00001722  66| FF 05			inc xyPos.y
	   00000020 R
 00001729  59				pop ecx
 0000172A  E2 D3			loop PrintIntro

 0000172C			GameOrNot:
 0000172C  E8 00000000 E	    call ReadChar
					.IF ax == 3920h     ;press space to start game
 00001737  E8 00000000 E	        call Clrscr
						INVOKE printGameStage
						;mov ebx, 1
 00001741  EB 02				jmp ExitFunc
					.ENDIF
 00001743  EB E7			jmp GameOrNot

 00001745			ExitFunc:
					ret
 00001747			printStartScene ENDP

 00001747			printGameStage PROC
 00001747				PrintGameSceneTop:
 00001747  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001750  66| C7 05			mov xyPos.y, 4
	   00000020 R
	   0004
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00001776  66| FF 05			inc xyPos.y
	   00000020 R

 0000177D  B9 00000018			mov ecx, 24
 00001782			PrintGameScene:
 00001782  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 000017A0  66| FF 05			inc xyPos.y
	   00000020 R
 000017A7  59				pop ecx
 000017A8  E2 D8			loop PrintGameScene

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 000017C7  66| FF 05			inc xyPos.y
	   00000020 R

					INVOKE printGreenLine, xyPos
					
 000017D9			PrintBar:
 000017D9  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 000017E2  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written

					INVOKE printLevel, xyPos

 00001813  66| C7 05			mov xyPos.x, 29
	   0000001E R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written
					
 00001839  66| C7 05			mov xyPos.x, 56
	   0000001E R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

					INVOKE printScore, xyPos

 0000186A  66| C7 05			mov xyPos.x, 80
	   0000001E R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

					INVOKE printLives, xyPos

 0000189B  66| C7 05			mov xyPos.x, 104
	   0000001E R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

					INVOKE printBogys, xyPos
 000018CC  C3				ret
 000018CD			printGameStage ENDP

 000018CD			printEndScene PROC
 000018CD  66| C7 05			mov xyPos.x, 40
	   0000001E R
	   0028
 000018D6  66| C7 05			mov xyPos.y, 5
	   00000020 R
	   0005
 000018DF  B9 00000006			mov ecx, 6
 000018E4  BE 00000000			mov esi, 0
					.IF bogysNum == 0
 000018F3			printWin:
 000018F3  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [winStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00001913  59					pop ecx
 00001914  83 C6 24				add esi, 36
 00001917  66| FF 05				inc xyPos.y
	   00000020 R
 0000191E  E2 D3				loop printWin
					.ENDIF

					.IF livesNum == 0
 0000192A			printLose:
 0000192A  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [loseStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 0000194A  59					pop ecx
 0000194B  83 C6 24				add esi, 36
 0000194E  66| FF 05				inc xyPos.y
	   00000020 R
 00001955  E2 D3				loop printLose
					.ENDIF

 00001957  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00001960  66| C7 05			mov xyPos.x, 32
	   0000001E R
	   0020
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

 00001986  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 0000198E  66| 8B 15			mov dx, scoreNum
	   0000093F R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPos,
						ADDR cells_Written

 000019BC  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

 000019E1  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 000019E9  66| 8B 15			mov dx, livesNum
	   00000945 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPos,
						ADDR cells_Written

 00001A17  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

 00001A3C  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00001A44  66| 8B 15			mov dx, bogysNum
	   0000094B R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPos,
						ADDR cells_Written

 00001A72  66| 83 05			add xyPos.y, 3
	   00000020 R 03
 00001A7A  66| C7 05			mov xyPos.x, 50
	   0000001E R
	   0032
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR restart,
						SIZEOF restart,
						xyPos,
						ADDR cells_Written

 00001AA0  66| 83 05			add xyPos.y, 2
	   00000020 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg,
						xyPos,
						ADDR cells_Written

 00001AC5			restartOrLeave:
 00001AC5  E8 00000000 E		call ReadChar
					.IF ax == 1372h
 00001AD0  BB 00000001				mov ebx, 1
 00001AD5  E8 00000000 E			call Clrscr
 00001ADA  EB 0F				jmp ExitEndScene
					.ENDIF
					.IF ax == 266ch
 00001AE2  BB 00000004				mov ebx, 4
 00001AE7  EB 02				jmp ExitEndScene
					.ENDIF
 00001AE9  EB DA			jmp restartOrLeave

 00001AEB			ExitEndScene:
 00001AEB  C3				ret
 00001AEC			printEndScene ENDP

 00001AEC			printLevel PROC,
					xyPosInit:COORD
 00001AEF  66| C7 45 08			mov xyPosInit.x, 12
	   000C
 00001AF5  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001AFB  66| 8B 15			mov dx, levelNum
	   00000929 R
					INVOKE decStrLevel, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR levelStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001B2A			printLevel ENDP

 00001B2A			printScore PROC,
					xyPosInit:COORD
 00001B2D  66| C7 45 08			mov xyPosInit.x, 63
	   003F
 00001B33  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001B39  66| 8B 15			mov dx, scoreNum
	   0000093F R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001B68			printScore ENDP

 00001B68			printLives PROC,
					xyPosInit:COORD
 00001B6B  66| C7 45 08			mov xyPosInit.x, 87
	   0057
 00001B71  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001B77  66| 8B 15			mov dx, livesNum
	   00000945 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001BA6			printLives ENDP

 00001BA6			printBogys PROC,
					xyPosInit:COORD
 00001BA9  66| C7 45 08			mov xyPosInit.x, 111
	   006F
 00001BAF  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001BB5  66| 8B 15			mov dx, bogysNum
	   0000094B R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001BE4			printBogys ENDP

 00001BE4			bogyWalking PROC,
					xyPosInBogy:COORD
 00001BE7  B9 00000003			mov ecx, 3
 00001BEC  BE 00000000			mov esi, 0

					;mov ebx, xyPosInBogy.y
 00001BF1			printBogy:
 00001BF1  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00001C0E  83 C6 05			add esi, 5
 00001C11  66| FF 45 0A			inc xyPosInBogy.y
 00001C15  59				pop ecx
 00001C16  E2 D9			loop printBogy
					
					ret
 00001C1C			bogyWalking ENDP

 00001C1C			bogyClear PROC,
					xyPosInBogy:COORD
 00001C1F  B9 00000003			mov ecx, 3
 00001C24  BE 00000000			mov esi, 0
 00001C29			removeBogy:
 00001C29  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00001C46  83 C6 05			add esi, 5
 00001C49  66| FF 45 0A			inc xyPosInBogy.y
 00001C4D  59				pop ecx
 00001C4E  E2 D9			loop removeBogy
					ret
 00001C54			bogyClear ENDP

 00001C54			tankWalking PROC,
					xyPosInit:COORD
 00001C57  B9 00000003			mov ecx, 3
 00001C5C  BE 00000000			mov esi, 0

					;mov ebx, xyPosInit.y
 00001C61			printTank:
 00001C61  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00001C7E  83 C6 08			add esi, 8
 00001C81  66| FF 45 0A			inc xyPosInit.y
 00001C85  59				pop ecx
 00001C86  E2 D9			loop printTank
					ret
 00001C8C			tankWalking ENDP

 00001C8C			tankClear PROC,
					xyPosInit:COORD
 00001C8F  B9 00000003			mov ecx, 3
 00001C94  BE 00000000			mov esi, 0
 00001C99			removeTank:
 00001C99  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00001CB6  83 C6 08			add esi, 8
 00001CB9  66| FF 45 0A			inc xyPosInit.y
 00001CBD  59				pop ecx
 00001CBE  E2 D9			loop removeTank
					ret
 00001CC4			tankClear ENDP

 00001CC4			noWorkWalking PROC,
					xyPosInit:COORD
 00001CC7			printNoWork:
 00001CC7  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bullet,
						SIZEOF bullet,
						xyPosInit,
						ADDR cells_Written
 00001CE2  59				pop ecx
					ret
 00001CE7			noWorkWalking ENDP

 00001CE7			noWorkClear PROC,
					xyPosInit:COORD
 00001CEA			removeNoWork:
 00001CEA  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR clearBullet,
						SIZEOF clearBullet,
						xyPosInit,
						ADDR cells_Written
 00001D05  59				pop ecx
					ret
 00001D0A			noWorkClear ENDP

 00001D0A			printGreenLine PROC,
					xyPosInLine:COORD
 00001D0D  66| C7 45 08			mov xyPosInLine.x, 20
	   0014
 00001D13  66| C7 45 0A			mov xyPosInLine.y, 5
	   0005

 00001D19  B9 00000018			mov ecx, 24
 00001D1E  BE 00000000			mov esi, 0
 00001D23			PrintLine:
 00001D23  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInLine,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInLine,
						ADDR cells_Written
 00001D58  66| FF 45 0A			inc xyPosInLine.y
 00001D5C  59				pop ecx
 00001D5D  E2 C4			loop PrintLine
					ret
 00001D63			printGreenLine ENDP

 00001D63			decStrLevel PROC,
					levelNumDec:WORD
 00001D66  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00001D6B  B2 0A			mov dl, 10					;除數
 00001D6D  66| 8B 45 08			mov ax, levelNumDec			;被除數
 00001D71			change:
 00001D71  51				push ecx
 00001D72  F6 F2			div dl
 00001D74  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00001D77  49				dec ecx
 00001D78  88 A1 0000092B R		mov [levelStr + ecx], ah
 00001D7E  66| 0F B6 C0			movzx ax, al				;商繼續除
 00001D82  59				pop ecx
 00001D83  E2 EC			loop change
					ret
 00001D89			decStrLevel ENDP

 00001D89			decStrScore PROC,
					scoreNumDec:WORD
 00001D8C  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00001D91  B2 0A			mov dl, 10					;除數
 00001D93  66| 8B 45 08			mov ax, scoreNumDec			;被除數
 00001D97			change:
 00001D97  51				push ecx
 00001D98  F6 F2			div dl
 00001D9A  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00001D9D  49				dec ecx
 00001D9E  88 A1 00000941 R		mov [scoreStr + ecx], ah
 00001DA4  66| 0F B6 C0			movzx ax, al				;商繼續除
 00001DA8  59				pop ecx
 00001DA9  E2 EC			loop change
					ret
 00001DAF			decStrScore ENDP

 00001DAF			decStrLives PROC,
					livesNumDec:WORD
 00001DB2  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00001DB7  B2 0A			mov dl, 10					;除數
 00001DB9  66| 8B 45 08			mov ax, livesNumDec			;被除數
 00001DBD			change:
 00001DBD  51				push ecx
 00001DBE  F6 F2			div dl
 00001DC0  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00001DC3  49				dec ecx
 00001DC4  88 A1 00000947 R		mov [livesStr + ecx], ah
 00001DCA  66| 0F B6 C0			movzx ax, al				;商繼續除
 00001DCE  59				pop ecx
 00001DCF  E2 EC			loop change
					ret
 00001DD5			decStrLives ENDP

 00001DD5			decStrBogys PROC,
					bogysNumDec:WORD
 00001DD8  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00001DDD  B2 0A			mov dl, 10					;除數
 00001DDF  66| 8B 45 08			mov ax, bogysNumDec			;被除數
 00001DE3			change:
 00001DE3  51				push ecx
 00001DE4  F6 F2			div dl
 00001DE6  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00001DE9  49				dec ecx
 00001DEA  88 A1 0000094D R		mov [bogysStr + ecx], ah
 00001DF0  66| 0F B6 C0			movzx ax, al				;商繼續除
 00001DF4  59				pop ecx
 00001DF5  E2 EC			loop change
					ret
 00001DFB			decStrBogys ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 11:51:16
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000BDF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001DFB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 00001C1C _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 00001C29 _TEXT	
bogyWalking  . . . . . . . . . .	P Near	 00001BE4 _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  printBogy  . . . . . . . . . .	L Near	 00001BF1 _TEXT	
decStrBogys  . . . . . . . . . .	P Near	 00001DD5 _TEXT	Length= 00000026 Public STDCALL
  bogysNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001DE3 _TEXT	
decStrLevel  . . . . . . . . . .	P Near	 00001D63 _TEXT	Length= 00000026 Public STDCALL
  levelNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001D71 _TEXT	
decStrLives  . . . . . . . . . .	P Near	 00001DAF _TEXT	Length= 00000026 Public STDCALL
  livesNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001DBD _TEXT	
decStrScore  . . . . . . . . . .	P Near	 00001D89 _TEXT	Length= 00000026 Public STDCALL
  scoreNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001D97 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000157F Public STDCALL
  Ex . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 0000022D _TEXT	
  pauseLoop  . . . . . . . . . .	L Near	 000004D8 _TEXT	
  backToGame . . . . . . . . . .	L Near	 000004E7 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00001578 _TEXT	
noWorkClear  . . . . . . . . . .	P Near	 00001CE7 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeNoWork . . . . . . . . .	L Near	 00001CEA _TEXT	
noWorkWalking  . . . . . . . . .	P Near	 00001CC4 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printNoWork  . . . . . . . . .	L Near	 00001CC7 _TEXT	
printBogys . . . . . . . . . . .	P Near	 00001BA6 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printEndScene  . . . . . . . . .	P Near	 000018CD _TEXT	Length= 0000021F Public STDCALL
  printWin . . . . . . . . . . .	L Near	 000018F3 _TEXT	
  printLose  . . . . . . . . . .	L Near	 0000192A _TEXT	
  restartOrLeave . . . . . . . .	L Near	 00001AC5 _TEXT	
  ExitEndScene . . . . . . . . .	L Near	 00001AEB _TEXT	
printGameStage . . . . . . . . .	P Near	 00001747 _TEXT	Length= 00000186 Public STDCALL
  PrintGameSceneTop  . . . . . .	L Near	 00001747 _TEXT	
  PrintGameScene . . . . . . . .	L Near	 00001782 _TEXT	
  PrintBar . . . . . . . . . . .	L Near	 000017D9 _TEXT	
printGreenLine . . . . . . . . .	P Near	 00001D0A _TEXT	Length= 00000059 Public STDCALL
  xyPosInLine  . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00001D23 _TEXT	
printLevel . . . . . . . . . . .	P Near	 00001AEC _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printLives . . . . . . . . . . .	P Near	 00001B68 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printScore . . . . . . . . . . .	P Near	 00001B2A _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printStartScene  . . . . . . . .	P Near	 0000157F _TEXT	Length= 000001C8 Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 000015B1 _TEXT	
  PrintOption  . . . . . . . . .	L Near	 000015DE _TEXT	
  PrintStartTank . . . . . . . .	L Near	 0000164C _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 00001695 _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 000016C2 _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 000016FF _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 0000172C _TEXT	
  ExitFunc . . . . . . . . . . .	L Near	 00001745 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 00001C8C _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeTank . . . . . . . . . .	L Near	 00001C99 _TEXT	
tankWalking  . . . . . . . . . .	P Near	 00001C54 _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printTank  . . . . . . . . . .	L Near	 00001C61 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
N0 . . . . . . . . . . . . . . .	Word	 0000007A _DATA	
N10  . . . . . . . . . . . . . .	Word	 0000008E _DATA	
N11  . . . . . . . . . . . . . .	Word	 00000090 _DATA	
N12  . . . . . . . . . . . . . .	Word	 00000092 _DATA	
N13  . . . . . . . . . . . . . .	Word	 00000094 _DATA	
N14  . . . . . . . . . . . . . .	Word	 00000096 _DATA	
N15  . . . . . . . . . . . . . .	Word	 00000098 _DATA	
N16  . . . . . . . . . . . . . .	Word	 0000009A _DATA	
N17  . . . . . . . . . . . . . .	Word	 0000009C _DATA	
N18  . . . . . . . . . . . . . .	Word	 0000009E _DATA	
N19  . . . . . . . . . . . . . .	Word	 000000A0 _DATA	
N1 . . . . . . . . . . . . . . .	Word	 0000007C _DATA	
N20  . . . . . . . . . . . . . .	Word	 000000A2 _DATA	
N2 . . . . . . . . . . . . . . .	Word	 0000007E _DATA	
N3 . . . . . . . . . . . . . . .	Word	 00000080 _DATA	
N4 . . . . . . . . . . . . . . .	Word	 00000082 _DATA	
N5 . . . . . . . . . . . . . . .	Word	 00000084 _DATA	
N6 . . . . . . . . . . . . . . .	Word	 00000086 _DATA	
N7 . . . . . . . . . . . . . . .	Word	 00000088 _DATA	
N8 . . . . . . . . . . . . . . .	Word	 0000008A _DATA	
N9 . . . . . . . . . . . . . . .	Word	 0000008C _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 0000094B _DATA	
bogysStr . . . . . . . . . . . .	Byte	 0000094D _DATA	
bogys  . . . . . . . . . . . . .	Byte	 00000921 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bullet . . . . . . . . . . . . .	Byte	 000008ED _DATA	
cells_Written  . . . . . . . . .	DWord	 000000BC _DATA	
clearBogy  . . . . . . . . . . .	Byte	 000008DE _DATA	
clearBullet  . . . . . . . . . .	Byte	 000008F4 _DATA	
clearTank  . . . . . . . . . . .	Byte	 000008B7 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 00000348 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameBgM  . . . . . . . . . . . .	Byte	 000009C0 _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 00000951 _DATA	
gameBogy . . . . . . . . . . . .	Byte	 000008CF _DATA	
gameIntro  . . . . . . . . . . .	Byte	 0000044E _DATA	
gameTank . . . . . . . . . . . .	Byte	 0000089F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 000008FD _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 0000035B _DATA	
levelNum . . . . . . . . . . . .	Word	 00000929 _DATA	
levelStr . . . . . . . . . . . .	Byte	 0000092B _DATA	
level  . . . . . . . . . . . . .	Byte	 00000901 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 000008FB _DATA	
livesNum . . . . . . . . . . . .	Word	 00000945 _DATA	
livesStr . . . . . . . . . . . .	Byte	 00000947 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000919 _DATA	
loseStr  . . . . . . . . . . . .	Byte	 00000B07 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
paused . . . . . . . . . . . . .	Byte	 0000092F _DATA	
playing  . . . . . . . . . . . .	Byte	 00000937 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restart  . . . . . . . . . . . .	Byte	 0000036E _DATA	
scoreNum . . . . . . . . . . . .	Word	 0000093F _DATA	
scoreStr . . . . . . . . . . . .	Byte	 00000941 _DATA	
score  . . . . . . . . . . . . .	Byte	 00000911 _DATA	
startBogy  . . . . . . . . . . .	Byte	 0000042B _DATA	
startStr . . . . . . . . . . . .	Byte	 000000C0 _DATA	
startTank  . . . . . . . . . . .	Byte	 00000383 _DATA	
state  . . . . . . . . . . . . .	Byte	 00000909 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winStr . . . . . . . . . . . . .	Byte	 00000A2F _DATA	
windowBound  . . . . . . . . . .	SMALL_RECT  00000012 _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000000 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xyPosBogy0 . . . . . . . . . . .	COORD	 000000A4 _DATA	
xyPosBogy1 . . . . . . . . . . .	COORD	 000000A8 _DATA	
xyPosBogy2 . . . . . . . . . . .	COORD	 000000AC _DATA	
xyPosBogy3 . . . . . . . . . . .	COORD	 000000B0 _DATA	
xyPosBogy4 . . . . . . . . . . .	COORD	 000000B4 _DATA	
xyPosBogy5 . . . . . . . . . . .	COORD	 000000B8 _DATA	
xyPosNoWork0 . . . . . . . . . .	COORD	 00000026 _DATA	
xyPosNoWork10  . . . . . . . . .	COORD	 0000004E _DATA	
xyPosNoWork11  . . . . . . . . .	COORD	 00000052 _DATA	
xyPosNoWork12  . . . . . . . . .	COORD	 00000056 _DATA	
xyPosNoWork13  . . . . . . . . .	COORD	 0000005A _DATA	
xyPosNoWork14  . . . . . . . . .	COORD	 0000005E _DATA	
xyPosNoWork15  . . . . . . . . .	COORD	 00000062 _DATA	
xyPosNoWork16  . . . . . . . . .	COORD	 00000066 _DATA	
xyPosNoWork17  . . . . . . . . .	COORD	 0000006A _DATA	
xyPosNoWork18  . . . . . . . . .	COORD	 0000006E _DATA	
xyPosNoWork19  . . . . . . . . .	COORD	 00000072 _DATA	
xyPosNoWork1 . . . . . . . . . .	COORD	 0000002A _DATA	
xyPosNoWork20  . . . . . . . . .	COORD	 00000076 _DATA	
xyPosNoWork2 . . . . . . . . . .	COORD	 0000002E _DATA	
xyPosNoWork3 . . . . . . . . . .	COORD	 00000032 _DATA	
xyPosNoWork4 . . . . . . . . . .	COORD	 00000036 _DATA	
xyPosNoWork5 . . . . . . . . . .	COORD	 0000003A _DATA	
xyPosNoWork6 . . . . . . . . . .	COORD	 0000003E _DATA	
xyPosNoWork7 . . . . . . . . . .	COORD	 00000042 _DATA	
xyPosNoWork8 . . . . . . . . . .	COORD	 00000046 _DATA	
xyPosNoWork9 . . . . . . . . . .	COORD	 0000004A _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000022 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 0000001E _DATA	
yellowColor  . . . . . . . . . .	Word	 000008FF _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
