Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 17:15:17
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				printStartScene PROTO
				decStrLevel PROTO, levelNumDec:WORD
				decStrScore PROTO, scoreNumDec:WORD
				decStrLives PROTO, livesNumDec:WORD
				decStrBogys PROTO, bogysNumDec:WORD

				printLevel PROTO, xyPosInit:COORD
				printScore PROTO, xyPosInit:COORD
				printLives PROTO, xyPosInit:COORD
				printBogys PROTO, xyPosInit:COORD

				bogyWalking PROTO, xyPosInBogy:COORD
				bogyClear   PROTO, xyPosInBogy:COORD
				printGreenLine PROTO, xyPosInLine:COORD

				tankWalking PROTO, xyPosInit:COORD
				tankClear   PROTO, xyPosInit:COORD
				;controlTank PROTO

				; bullet move
				noWorkWalking PROTO, xyPosInit:COORD
				noWorkClear   PROTO, xyPosInit:COORD

				printEndScene PROTO
				printGameStage PROTO

				initialLevelBogyPos PROTO

				; 	玩遊戲   ebx = 1
				; 	暫停		ebx = 2
				; 	結束畫面	ebx = 3
				; 	離開程式	ebx = 4

 00000000			.data
					; 視窗的變數們
 00000000 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy",0 ; 標題
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 00000012 0000 0000 007D		windowBound    SMALL_RECT <0,0,125,25>    ; 視窗大小
	   0019
 0000001A 00000000			consoleHandle  DWORD ?

 0000001E 0006 0005			xyPos COORD   <6,5>
 00000022 0007 000F			xyPosTank COORD    <7,15>

 00000026 000F 0006			xyPosNoWork0 COORD <15,6>
 0000002A 000F 0007			xyPosNoWork1 COORD <15,7>
 0000002E 000F 0008			xyPosNoWork2 COORD <15,8>
 00000032 000F 0009			xyPosNoWork3 COORD <15,9>
 00000036 000F 000A			xyPosNoWork4 COORD <15,10>
 0000003A 000F 000B			xyPosNoWork5 COORD <15,11>
 0000003E 000F 000C			xyPosNoWork6 COORD <15,12>
 00000042 000F 000D			xyPosNoWork7 COORD <15,13>
 00000046 000F 000E			xyPosNoWork8 COORD <15,14>
 0000004A 000F 000F			xyPosNoWork9 COORD <15,15>
 0000004E 000F 0010			xyPosNoWork10 COORD <15,16>
 00000052 000F 0011			xyPosNoWork11 COORD <15,17>
 00000056 000F 0012			xyPosNoWork12 COORD <15,18>
 0000005A 000F 0013			xyPosNoWork13 COORD <15,19>
 0000005E 000F 0014			xyPosNoWork14 COORD <15,20>
 00000062 000F 0015			xyPosNoWork15 COORD <15,21>
 00000066 000F 0016			xyPosNoWork16 COORD <15,22>
 0000006A 000F 0017			xyPosNoWork17 COORD <15,23>
 0000006E 000F 0018			xyPosNoWork18 COORD <15,24>
 00000072 000F 0019			xyPosNoWork19 COORD <15,25>
 00000076 000F 001A			xyPosNoWork20 COORD <15,26>

 0000007A 0000				N0  WORD 0
 0000007C 0000				N1  WORD 0
 0000007E 0000				N2  WORD 0
 00000080 0000				N3  WORD 0
 00000082 0000				N4  WORD 0
 00000084 0000				N5  WORD 0
 00000086 0000				N6  WORD 0
 00000088 0000				N7  WORD 0
 0000008A 0000				N8  WORD 0
 0000008C 0000				N9  WORD 0
 0000008E 0000				N10 WORD 0
 00000090 0000				N11 WORD 0
 00000092 0000				N12 WORD 0
 00000094 0000				N13 WORD 0
 00000096 0000				N14 WORD 0
 00000098 0000				N15 WORD 0
 0000009A 0000				N16 WORD 0
 0000009C 0000				N17 WORD 0
 0000009E 0000				N18 WORD 0
 000000A0 0000				N19 WORD 0
 000000A2 0000				N20 WORD 0

 000000A4 006B 006D 0066		xPosBogy0LevelArr WORD 107, 109, 102
 000000AA 0080 0065 006E	    xPosBogy1LevelArr WORD 128, 101, 110
 000000B0 006D 007B 007A	    xPosBogy2LevelArr WORD 109, 123, 122
 000000B6 0078 0067 0073	    xPosBogy3LevelArr WORD 120, 103, 115
 000000BC 006F 0071 0069	    xPosBogy4LevelArr WORD 111, 113, 105
 000000C2 007A 0064 0064	    xPosBogy5LevelArr WORD 122, 100, 100

 000000C8 0000 0005		    xyPosBogy0 COORD   <?,5>
 000000CC 0000 0009		    xyPosBogy1 COORD   <?,9>
 000000D0 0000 000D		    xyPosBogy2 COORD   <?,13>
 000000D4 0000 0011		    xyPosBogy3 COORD   <?,17>
 000000D8 0000 0015		    xyPosBogy4 COORD   <?,21>
 000000DC 0000 0019		    xyPosBogy5 COORD   <?,25>

 000000E0 00000000			cells_Written DWORD ?

					; 開始畫面的字
 000000E4 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 00000150  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _.' ____ \    |_   _ \  .'   `.  .' ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 2E 27 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2E 27
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 000001BC  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / _ \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/ .'   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 5F
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 2E
	   27 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000228  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __'.      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 27
	   2E 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 00000294  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\ `.___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 60
	   2E 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 00000300  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20

					;印開始畫面的提示字
 0000036C 50 72 65 73 73		enterMsg  BYTE "Press 'E' to enter",0
	   20 27 45 27 20
	   74 6F 20 65 6E
	   74 65 72 00
 0000037F 50 72 65 73 73		leaveMsg  BYTE "Press 'L' to leave",0
	   20 27 4C 27 20
	   74 6F 20 6C 65
	   61 76 65 00
 00000392 50 72 65 73 73		restart   BYTE "Press 'R' to restart",0
	   20 27 52 27 20
	   74 6F 20 72 65
	   73 74 61 72 74
	   00
 000003A7 50 72 65 73 73		nextLevel BYTE "Press 'N' to next level", 0
	   20 27 4E 27 20
	   74 6F 20 6E 65
	   78 74 20 6C 65
	   76 65 6C 00

					;印坦克
 000003BF 20 20 20 20 20		startTank BYTE "       \                "
	   20 20 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 000003D7  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 000003EF  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 00000407  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 0000041F  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 00000437  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 0000044F  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20
					;印Bogy
 00000467 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 0000046E  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 00000475  2F 20 48 55 41				  BYTE "/ HUA \"
	   20 5C
 0000047C  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 00000483  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20

 0000048A 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 000004CB  2A 20 20 20 20	              BYTE "*                      Game Introduction:                       *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000050C  2A 20 20 20 20	              BYTE "*            Control the Hua Tank to kill the Bogy.             *"
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000054D  2A 20 20 20 20	              BYTE "*             Don't let Bogy cross the green line,              *"
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000058E  2A 20 20 20 20				  BYTE "*                or your life will shock down!!                 *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000005CF  2A 20 20 20 53	              BYTE "*   Start with 3 lives, once the live reaches zero, you lose!!  *"
	   74 61 72 74 20
	   77 69 74 68 20
	   33 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 2A
 00000610  2A 20 20 20 20	              BYTE "*     Kill the last monsters, if you still alive, you win!!     *"
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 2A
 00000651  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000692  2A 20 20 20 20	              BYTE "*                   How to control the tank:                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000006D3  2A 20 20 20 20	              BYTE "*               + press 'up'    to move up                      *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000714  2A 20 20 20 20	              BYTE "*               + press 'down'  to move down                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000755  2A 20 20 20 20	              BYTE "*               + press 'right' to fire bullet                  *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000796  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000007D7  2A 20 20 20 20	              BYTE "*                         How to play:                          *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000818  2A 20 20 20 20	              BYTE "*               + press 'space' to start game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000859  2A 20 20 20 20	              BYTE "*               + press 'P'     to pause game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000089A  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A

 000008DB 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 000008E3  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 000008EB  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20

 000008F3 20 20 20 20 20		clearTank BYTE "        "
	   20 20 20
 000008FB  20 20 20 20 20				  BYTE "        "
	   20 20 20
 00000903  20 20 20 20 20				  BYTE "        "
	   20 20 20

 0000090B 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 00000910  7C 4F 76 4F 7C				  BYTE "|OvO|"
 00000915  7C 5F 7C 5F 7C				  BYTE "|_|_|"

 0000091A 20 20 20 20 20		clearBogy BYTE "     "
 0000091F  20 20 20 20 20				  BYTE "     "
 00000924  20 20 20 20 20				  BYTE "     "

 00000929 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 00000930 20 20 20 20 20		clearBullet BYTE "      ",0
	   20 00

 00000937 7C 00				line BYTE "|",0
 00000939 000A				greenColor WORD 0Ah

 0000093B 000E				yellowColor WORD 0Eh

 0000093D 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 00000945 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 0000094D 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000955 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 0000095D 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000965 0001				levelNum WORD 1
 00000967  00000004 [			levelStr BYTE 4 DUP(?)
	    00
	   ]

 0000096B 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 00000973 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 0000097B 0000				scoreNum WORD 0
 0000097D  00000004 [			scoreStr BYTE 4 DUP(?)
	    00
	   ]

 00000981 0003				livesNum WORD 3
 00000983  00000004 [			livesStr BYTE 4 DUP(?)
	    00
	   ]
					
 00000987 0001				bogysNum WORD 1
 00000989  00000004 [			bogysStr BYTE 4 DUP(?)
	    00
	   ]

 0000098D  0000006E [			gameBgTB BYTE 110 DUP("*"),0
	    2A
	   ] 00
 000009FC 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0	
	   0000006C [
	    20
	   ] 2A 00
					
 00000A6B 20 20 5F 5F 5F		winStr  BYTE "  ____      ____ _____ ____  _____  "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   20
 00000A8F  20 7C 5F 20 20			    BYTE " |_  _|    |_  _|_   _|_   \|_   _| "
	   5F 7C 20 20 20
	   20 7C 5F 20 20
	   5F 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 20 5C 7C 5F
	   20 20 20 5F 7C
	   20
 00000AB3  20 20 20 5C 20			    BYTE "   \ \  /\  / /   | |   |   \ | |   "
	   5C 20 20 2F 5C
	   20 20 2F 20 2F
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 5C 20
	   7C 20 7C 20 20
	   20
 00000AD7  20 20 20 20 5C			    BYTE "    \ \/  \/ /    | |   | |\ \| |   "
	   20 5C 2F 20 20
	   5C 2F 20 2F 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5C 20 5C
	   7C 20 7C 20 20
	   20
 00000AFB  20 20 20 20 20			    BYTE "     \  /\  /    _| |_ _| |_\   |_  "
	   5C 20 20 2F 5C
	   20 20 2F 20 20
	   20 20 5F 7C 20
	   7C 5F 20 5F 7C
	   20 7C 5F 5C 20
	   20 20 7C 5F 20
	   20
 00000B1F  20 20 20 20 20			    BYTE "      \/  \/    |_____|_____|\____| "
	   20 5C 2F 20 20
	   5C 2F 20 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5C
	   5F 5F 5F 5F 7C
	   20

 00000B43 20 5F 5F 5F 5F		loseStr BYTE " _____      ___    ______  ________ "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20
 00000B67  7C 5F 20 20 20				BYTE "|_   _|   .'   `..' ____ \|_   __  |"
	   5F 7C 20 20 20
	   2E 27 20 20 20
	   60 2E 2E 27 20
	   5F 5F 5F 5F 20
	   5C 7C 5F 20 20
	   20 5F 5F 20 20
	   7C
 00000B8B  20 20 7C 20 7C				BYTE "  | |    /  .-.  | (____\_| | |_ \_|"	
	   20 20 20 20 2F
	   20 20 2E 2D 2E
	   20 20 7C 20 28
	   5F 5F 5F 5F 5C
	   5F 7C 20 7C 20
	   7C 5F 20 5C 5F
	   7C
 00000BAF  20 20 7C 20 7C				BYTE "  | |   _| |   | |_.____ \  |  _| _ "
	   20 20 20 5F 7C
	   20 7C 20 20 20
	   7C 20 7C 5F 2E
	   5F 5F 5F 5F 20
	   5C 20 20 7C 20
	   20 5F 7C 20 5F
	   20
 00000BD3  20 5F 7C 20 7C				BYTE " _| |__/ \  `-'  / \____) \_| |__/ |"
	   5F 5F 2F 20 5C
	   20 20 60 2D 27
	   20 20 2F 20 5C
	   5F 5F 5F 5F 29
	   20 5C 5F 7C 20
	   7C 5F 5F 2F 20
	   7C
 00000BF7  7C 5F 5F 5F 5F				BYTE "|________|`.___.' \_______/________|"
	   5F 5F 5F 5F 7C
	   60 2E 5F 5F 5F
	   2E 27 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 2F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C


 00000000			.code

 00000000			main PROC
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001A R		mov consoleHandle, eax
					
					INVOKE SetConsoleTitle, ADDR windowTitleStr			; 設定視窗標題
					
					INVOKE SetConsoleWindowInfo,						; 設定視窗大小
				     	consoleHandle,
				     	TRUE,
				     	ADDR windowBound
					
					INVOKE printStartScene

 0000002D			Ex:	
					.IF ebx == 3
 00000032  E8 00000000 E			call Clrscr
						INVOKE printEndScene
					.ENDIF

					.IF ebx == 4        ;直接離開
 00000041  E8 00000000 E			call Clrscr
 00000046  E9 00001926				jmp ExitProgram
					.ENDIF

					.IF ebx == 1 ; 進入遊戲
 00000054  66| C7 05				mov scoreNum, 0
	   0000097B R
	   0000
 0000005D  66| C7 05				mov livesNum, 3
	   00000981 R
	   0003
 00000066  66| C7 05				mov bogysNum, 5
	   00000987 R
	   0005
						INVOKE printGameStage

						INVOKE initialLevelBogyPos

 00000079  66| C7 05				mov xyPosTank.y, 15
	   00000024 R
	   000F

 00000082  66| C7 05				mov N0, 0
	   0000007A R
	   0000
 0000008B  66| C7 05				mov N1, 0
	   0000007C R
	   0000
 00000094  66| C7 05				mov N2, 0
	   0000007E R
	   0000
 0000009D  66| C7 05				mov N3, 0
	   00000080 R
	   0000
 000000A6  66| C7 05				mov N4 , 0 
	   00000082 R
	   0000
 000000AF  66| C7 05				mov N5 , 0 
	   00000084 R
	   0000
 000000B8  66| C7 05				mov N6 , 0 
	   00000086 R
	   0000
 000000C1  66| C7 05				mov N7 , 0 
	   00000088 R
	   0000
 000000CA  66| C7 05				mov N8 , 0 
	   0000008A R
	   0000
 000000D3  66| C7 05				mov N9 , 0 
	   0000008C R
	   0000
 000000DC  66| C7 05				mov N10, 0 
	   0000008E R
	   0000
 000000E5  66| C7 05				mov N11, 0 
	   00000090 R
	   0000
 000000EE  66| C7 05				mov N12, 0 
	   00000092 R
	   0000
 000000F7  66| C7 05				mov N13, 0 
	   00000094 R
	   0000
 00000100  66| C7 05				mov N14, 0 
	   00000096 R
	   0000
 00000109  66| C7 05				mov N15, 0 
	   00000098 R
	   0000
 00000112  66| C7 05				mov N16, 0 
	   0000009A R
	   0000
 0000011B  66| C7 05				mov N17, 0 
	   0000009C R
	   0000
 00000124  66| C7 05				mov N18, 0 
	   0000009E R
	   0000
 0000012D  66| C7 05				mov N19, 0 
	   000000A0 R
	   0000
 00000136  66| C7 05				mov N20, 0
	   000000A2 R
	   0000

 0000013F  66| C7 05				mov xyPosNoWork0.x , 15
	   00000026 R
	   000F
 00000148  66| C7 05				mov xyPosNoWork1.x , 15
	   0000002A R
	   000F
 00000151  66| C7 05				mov xyPosNoWork2.x , 15
	   0000002E R
	   000F
 0000015A  66| C7 05				mov xyPosNoWork3.x , 15
	   00000032 R
	   000F
 00000163  66| C7 05				mov xyPosNoWork4.x , 15
	   00000036 R
	   000F
 0000016C  66| C7 05				mov xyPosNoWork5.x , 15
	   0000003A R
	   000F
 00000175  66| C7 05				mov xyPosNoWork6.x , 15
	   0000003E R
	   000F
 0000017E  66| C7 05				mov xyPosNoWork7.x , 15
	   00000042 R
	   000F
 00000187  66| C7 05				mov xyPosNoWork8.x , 15
	   00000046 R
	   000F
 00000190  66| C7 05				mov xyPosNoWork9.x , 15
	   0000004A R
	   000F
 00000199  66| C7 05				mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
 000001A2  66| C7 05				mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 000001AB  66| C7 05				mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 000001B4  66| C7 05				mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 000001BD  66| C7 05				mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
 000001C6  66| C7 05				mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 000001CF  66| C7 05				mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 000001D8  66| C7 05				mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 000001E1  66| C7 05				mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
 000001EA  66| C7 05				mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 000001F3  66| C7 05				mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
					.ENDIF

 000001FC			GameLoop:
					INVOKE tankWalking, xyPosTank

					.IF N0 == 1
				        INVOKE noWorkWalking, xyPosNoWork0 
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkWalking, xyPosNoWork1 
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkWalking, xyPosNoWork2 
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkWalking, xyPosNoWork3 
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkWalking, xyPosNoWork4 
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkWalking, xyPosNoWork5 
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkWalking, xyPosNoWork6 
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkWalking, xyPosNoWork7 
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkWalking, xyPosNoWork8 
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkWalking, xyPosNoWork9 
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkWalking, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkWalking, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkWalking, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkWalking, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkWalking, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkWalking, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkWalking, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkWalking, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkWalking, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkWalking, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkWalking, xyPosNoWork20
				    .ENDIF

					.IF xyPosBogy0.x < 107
						INVOKE bogyWalking, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyWalking, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyWalking, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyWalking, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyWalking, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyWalking, xyPosBogy5
					.ENDIF

 0000043E  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 00000447  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR playing,
						SIZEOF playing,
						xyPos,
						ADDR cells_Written
 0000046D  E8 00000000 E		call ReadKey

					.IF ax == 1970h
 00000478  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 00000481  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR paused,
						SIZEOF paused,
						xyPos,
						ADDR cells_Written
 000004A7			pauseLoop:
 000004A7  E8 00000000 E			call ReadKey
						.IF ax == 3920h
 000004B2  EB 02					jmp backToGame
						.ENDIF
 000004B4  EB F1				jmp pauseLoop
					.ENDIF

 000004B6			backToGame:

					.IF ax == 4800h
						INVOKE tankClear, xyPosTank
 000004C7  66| 83 2D				sub xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y < 5
 000004D9  66| C7 05					mov xyPosTank.y, 5
	   00000024 R
	   0005
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 5000h
						INVOKE tankClear, xyPosTank
 000004FE  66| 83 05				add xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y > 25
 00000510  66| C7 05					mov xyPosTank.y, 25
	   00000024 R
	   0019
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 4D00h
						.IF xyPosTank.y == 5
 00000538  66| C7 05		            mov N0, 1
	   0000007A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 6
 0000054B  66| C7 05		            mov N1, 1
	   0000007C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 7
 0000055E  66| C7 05		            mov N2, 1
	   0000007E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 8
 00000571  66| C7 05		            mov N3, 1
	   00000080 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 9
 00000584  66| C7 05		            mov N4, 1
	   00000082 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 10
 00000597  66| C7 05		            mov N5, 1
	   00000084 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 11
 000005AA  66| C7 05		            mov N6, 1
	   00000086 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 12
 000005BD  66| C7 05		            mov N7, 1
	   00000088 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 13
 000005D0  66| C7 05		            mov N8, 1
	   0000008A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 14
 000005E3  66| C7 05		            mov N9, 1
	   0000008C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 15
 000005F6  66| C7 05		            mov N10, 1
	   0000008E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 16
 00000609  66| C7 05		            mov N11, 1
	   00000090 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 17
 0000061C  66| C7 05		            mov N12, 1
	   00000092 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 18
 0000062F  66| C7 05		            mov N13, 1
	   00000094 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 19
 00000642  66| C7 05		            mov N14, 1
	   00000096 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 20
 00000655  66| C7 05		            mov N15, 1
	   00000098 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 21
 00000668  66| C7 05		            mov N16, 1
	   0000009A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 22
 0000067B  66| C7 05		            mov N17, 1
	   0000009C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 23
 0000068E  66| C7 05		            mov N18, 1
	   0000009E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 24
 000006A1  66| C7 05		            mov N19, 1
	   000000A0 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 25
 000006B4  66| C7 05		            mov N20, 1
	   000000A2 R
	   0001
				        .ENDIF
					.ENDIF

 000006BD  50				push eax
 000006BE  B8 000001F4			mov eax, 500
 000006C3  E8 00000000 E		call Delay
 000006C8  58				pop eax

					.IF xyPosBogy0.x < 107
						INVOKE bogyClear, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyClear, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyClear, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyClear, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyClear, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyClear, xyPosBogy5
					.ENDIF

					; clear no work
					.IF N0 == 1
				        INVOKE noWorkClear, xyPosNoWork0
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkClear, xyPosNoWork1
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkClear, xyPosNoWork2
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkClear, xyPosNoWork3
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkClear, xyPosNoWork4
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkClear, xyPosNoWork5
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkClear, xyPosNoWork6
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkClear, xyPosNoWork7
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkClear, xyPosNoWork8
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkClear, xyPosNoWork9
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkClear, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkClear, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkClear, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkClear, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkClear, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkClear, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkClear, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkClear, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkClear, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkClear, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkClear, xyPosNoWork20
				    .ENDIF

					
					INVOKE printGreenLine, xyPos
 0000090B  66| 83 2D			sub xyPosBogy0.x, 1
	   000000C8 R 01
 00000913  66| 83 2D			sub xyPosBogy1.x, 1
	   000000CC R 01
 0000091B  66| 83 2D			sub xyPosBogy2.x, 1
	   000000D0 R 01
 00000923  66| 83 2D			sub xyPosBogy3.x, 1
	   000000D4 R 01
 0000092B  66| 83 2D			sub xyPosBogy4.x, 1
	   000000D8 R 01
 00000933  66| 83 2D			sub xyPosBogy5.x, 1
	   000000DC R 01

					.IF N0 == 1
 00000949  66| 83 05		        add xyPosNoWork0.x, 3
	   00000026 R 03
 00000951  50			        push eax
 00000952  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000958  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork0.x >= ax
 00000969  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 00000972  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
 0000097B  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000983  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000009AB  BB 00000003		                mov ebx, 3
 000009B0  E9 FFFFF678		                jmp Ex
				            .ENDIF
							.IF levelNum == 1
 000009BF  66| A1						mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
							.ENDIF
							.IF levelNum == 2
 000009CF  66| A1						mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
							.ENDIF
							.IF levelNum == 3
 000009DF  66| A1						mov ax, [xPosBogy0LevelArr + 8]
	   000000AC R
							.ENDIF
 000009E5  66| A3					mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 000009EB  58			        pop eax
				        .IF xyPosNoWork0.x > 106
 000009F6  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 000009FF  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N1 == 1
 00000A16  66| 83 05		        add xyPosNoWork1.x, 3
	   0000002A R 03
 00000A1E  50			        push eax
 00000A1F  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000A25  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork1.x >= ax
 00000A36  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000A3F  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
 00000A48  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000A50  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000A78  BB 00000003		                mov ebx, 3
 00000A7D  E9 FFFFF5AB		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000A8C  66| A1		                mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
				            .ENDIF
				            .IF levelNum == 2
 00000A9C  66| A1		                mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
				            .ENDIF
				            .IF levelNum == 3
 00000AAC  66| A1		                mov ax, [xPosBogy0LevelArr + 8]
	   000000AC R
				            .ENDIF
 00000AB2  66| A3		            mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 00000AB8  58			        pop eax
				        .IF xyPosNoWork1.x > 106
 00000AC3  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000ACC  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N2 == 1
 00000ADF  66| 83 05		        add xyPosNoWork2.x, 3
	   0000002E R 03
				        .IF xyPosNoWork2.x > 106
 00000AF1  66| C7 05		            mov N2, 0
	   0000007E R
	   0000
 00000AFA  66| C7 05		            mov xyPosNoWork2.x, 15
	   0000002E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N3 == 1
 00000B11  66| 83 05		        add xyPosNoWork3.x, 3
	   00000032 R 03
 00000B19  50			        push eax
 00000B1A  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000B20  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork3.x >= ax
 00000B31  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000B3A  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
 00000B43  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000B4B  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000B73  BB 00000003		                mov ebx, 3
 00000B78  E9 FFFFF4B0		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000B87  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000B97  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
				            .IF levelNum == 3
 00000BA7  66| A1		                mov ax, [xPosBogy1LevelArr + 8]
	   000000B2 R
				            .ENDIF
 00000BAD  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000BB3  58			        pop eax
				        .IF xyPosNoWork3.x > 106
 00000BBE  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000BC7  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N4 == 1
 00000BDE  66| 83 05		        add xyPosNoWork4.x, 3
	   00000036 R 03
 00000BE6  50			        push eax
 00000BE7  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000BED  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork4.x >= ax
 00000BFE  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000C07  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
 00000C10  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000C18  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000C40  BB 00000003		                mov ebx, 3
 00000C45  E9 FFFFF3E3		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000C54  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000C64  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
				            .IF levelNum == 3
 00000C74  66| A1		                mov ax, [xPosBogy1LevelArr + 8]
	   000000B2 R
				            .ENDIF
 00000C7A  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000C80  58			        pop eax
				        .IF xyPosNoWork4.x > 106
 00000C8B  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000C94  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N5 == 1
 00000CAB  66| 83 05		        add xyPosNoWork5.x, 3
	   0000003A R 03
 00000CB3  50			        push eax
 00000CB4  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000CBA  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork5.x >= ax
 00000CCB  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000CD4  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
 00000CDD  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000CE5  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000D0D  BB 00000003		                mov ebx, 3
 00000D12  E9 FFFFF316		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000D21  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000D31  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
				            .IF levelNum == 3
 00000D41  66| A1		                mov ax, [xPosBogy1LevelArr + 8]
	   000000B2 R
				            .ENDIF
 00000D47  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000D4D  58			        pop eax
				        .IF xyPosNoWork5.x > 106
 00000D58  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000D61  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N6 == 1
 00000D74  66| 83 05		        add xyPosNoWork6.x, 3
	   0000003E R 03
				        .IF xyPosNoWork6.x > 106
 00000D86  66| C7 05		            mov N6, 0
	   00000086 R
	   0000
 00000D8F  66| C7 05		            mov xyPosNoWork6.x, 15
	   0000003E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N7 == 1
 00000DA6  66| 83 05		        add xyPosNoWork7.x, 3
	   00000042 R 03
 00000DAE  50			        push eax
 00000DAF  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00000DB5  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork7.x >= ax
 00000DC6  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000DCF  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
 00000DD8  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000DE0  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000E08  BB 00000003		                mov ebx, 3
 00000E0D  E9 FFFFF21B		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000E1C  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 00000E2C  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
				            .IF levelNum == 3
 00000E3C  66| A1		                mov ax, [xPosBogy2LevelArr + 8]
	   000000B8 R
				            .ENDIF
 00000E42  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 00000E48  58			        pop eax
				        .IF xyPosNoWork7.x > 106
 00000E53  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000E5C  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N8 == 1
 00000E73  66| 83 05		        add xyPosNoWork8.x, 3
	   00000046 R 03
 00000E7B  50			        push eax
 00000E7C  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00000E82  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork8.x >= ax
 00000E93  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000E9C  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
 00000EA5  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000EAD  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000ED5  BB 00000003		                mov ebx, 3
 00000EDA  E9 FFFFF14E		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000EE9  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 00000EF9  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
				            .IF levelNum == 3
 00000F09  66| A1		                mov ax, [xPosBogy2LevelArr + 8]
	   000000B8 R
				            .ENDIF
 00000F0F  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 00000F15  58			        pop eax
				        .IF xyPosNoWork8.x > 106
 00000F20  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000F29  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N9 == 1
 00000F40  66| 83 05		        add xyPosNoWork9.x, 3
	   0000004A R 03
 00000F48  50			        push eax
 00000F49  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00000F4F  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork9.x >= ax
 00000F60  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000F69  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
 00000F72  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00000F7A  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000FA2  BB 00000003		                mov ebx, 3
 00000FA7  E9 FFFFF081		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000FB6  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 00000FC6  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
				            .IF levelNum == 3
 00000FD6  66| A1		                mov ax, [xPosBogy2LevelArr + 8]
	   000000B8 R
				            .ENDIF
 00000FDC  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 00000FE2  58			        pop eax
				        .IF xyPosNoWork9.x > 106
 00000FED  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000FF6  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N10 == 1
 00001009  66| 83 05				add xyPosNoWork10.x, 3
	   0000004E R 03
						.IF xyPosNoWork10.x > 106
 0000101B  66| C7 05					mov N10, 0
	   0000008E R
	   0000
 00001024  66| C7 05					mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
						.ENDIF
					.ENDIF

					.IF N11 == 1
 0000103B  66| 83 05				add xyPosNoWork11.x, 3
	   00000052 R 03
 00001043  50					push eax
 00001044  66| A1				mov ax, xyPosBogy3.x
	   000000D4 R
 0000104A  66| 83 E8 06				sub ax, 6
						.IF xyPosNoWork11.x >= ax
 0000105B  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00001064  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 0000106D  66| 83 05					add scoreNum, 10
	   0000097B R 0A
 00001075  66| 83 2D					sub bogysNum, 1
	   00000987 R 01
							INVOKE printScore, xyPos
							INVOKE printBogys, xyPos
							.IF bogysNum == 0
 0000109D  BB 00000003						mov ebx, 3
 000010A2  E9 FFFFEF86						jmp Ex
							.ENDIF

							.IF levelNum == 1
 000010B1  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000010C1  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
				            .IF levelNum == 3
 000010D1  66| A1		                mov ax, [xPosBogy3LevelArr + 8]
	   000000BE R
				            .ENDIF
 000010D7  66| A3					mov xyPosBogy3.x, ax
	   000000D4 R
						.ENDIF
 000010DD  58					pop eax
						.IF xyPosNoWork11.x > 106
 000010E8  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 000010F1  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
						.ENDIF
					.ENDIF

					.IF N12 == 1
 00001108  66| 83 05		        add xyPosNoWork12.x, 3
	   00000056 R 03
 00001110  50			        push eax
 00001111  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 00001117  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork12.x >= ax
 00001128  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00001131  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 0000113A  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 00001142  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000116A  BB 00000003		                mov ebx, 3
 0000116F  E9 FFFFEEB9		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000117E  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 0000118E  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
				            .IF levelNum == 3
 0000119E  66| A1		                mov ax, [xPosBogy3LevelArr + 8]
	   000000BE R
				            .ENDIF
 000011A4  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 000011AA  58			        pop eax
				        .IF xyPosNoWork12.x > 106
 000011B5  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 000011BE  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N13 == 1
 000011D5  66| 83 05		        add xyPosNoWork13.x, 3
	   0000005A R 03
 000011DD  50			        push eax
 000011DE  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 000011E4  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork13.x >= ax
 000011F5  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 000011FE  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 00001207  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 0000120F  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001237  BB 00000003		                mov ebx, 3
 0000123C  E9 FFFFEDEC		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000124B  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 0000125B  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
				            .IF levelNum == 3
 0000126B  66| A1		                mov ax, [xPosBogy3LevelArr + 8]
	   000000BE R
				            .ENDIF
 00001271  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 00001277  58			        pop eax
				        .IF xyPosNoWork13.x > 106
 00001282  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 0000128B  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N14 == 1
 0000129E  66| 83 05		        add xyPosNoWork14.x, 3
	   0000005E R 03
				        .IF xyPosNoWork14.x > 106
 000012B0  66| C7 05		            mov N14, 0
	   00000096 R
	   0000
 000012B9  66| C7 05		            mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N15 == 1
 000012D0  66| 83 05		        add xyPosNoWork15.x, 3
	   00000062 R 03
 000012D8  50			        push eax
 000012D9  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 000012DF  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork15.x >= ax
 000012F0  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 000012F9  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00001302  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 0000130A  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001332  BB 00000003		                mov ebx, 3
 00001337  E9 FFFFECF1		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001346  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 00001356  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
				            .IF levelNum == 3
 00001366  66| A1		                mov ax, [xPosBogy4LevelArr + 8]
	   000000C4 R
				            .ENDIF
 0000136C  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 00001372  58			        pop eax
				        .IF xyPosNoWork15.x > 106
 0000137D  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 00001386  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
				        .ENDIF
				    .ENDIF
					
					.IF N16 == 1
 0000139D  66| 83 05		        add xyPosNoWork16.x, 3
	   00000066 R 03
 000013A5  50			        push eax
 000013A6  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 000013AC  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork16.x >= ax
 000013BD  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 000013C6  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 000013CF  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 000013D7  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000013FF  BB 00000003		                mov ebx, 3
 00001404  E9 FFFFEC24		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001413  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 00001423  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
				            .IF levelNum == 3
 00001433  66| A1		                mov ax, [xPosBogy4LevelArr + 8]
	   000000C4 R
				            .ENDIF
 00001439  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 0000143F  58			        pop eax
				        .IF xyPosNoWork16.x > 106
 0000144A  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 00001453  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N17 == 1
 0000146A  66| 83 05		        add xyPosNoWork17.x, 3
	   0000006A R 03
 00001472  50			        push eax
 00001473  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 00001479  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork17.x >= ax
 0000148A  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00001493  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 0000149C  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 000014A4  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000014CC  BB 00000003		                mov ebx, 3
 000014D1  E9 FFFFEB57		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 000014E0  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 000014F0  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
				            .IF levelNum == 3
 00001500  66| A1		                mov ax, [xPosBogy4LevelArr + 8]
	   000000C4 R
				            .ENDIF
 00001506  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 0000150C  58			        pop eax
				        .IF xyPosNoWork17.x > 106
 00001517  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00001520  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N18 == 1
 00001533  66| 83 05		        add xyPosNoWork18.x, 3
	   0000006E R 03
				        .IF xyPosNoWork18.x > 106
 00001545  66| C7 05		            mov N18, 0
	   0000009E R
	   0000
 0000154E  66| C7 05		            mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N19 == 1
 00001565  66| 83 05		        add xyPosNoWork19.x, 3
	   00000072 R 03
 0000156D  50			        push eax
 0000156E  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 00001574  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork19.x >= ax
 00001585  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 0000158E  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00001597  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 0000159F  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000015C7  BB 00000003		                mov ebx, 3
 000015CC  E9 FFFFEA5C		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 000015DB  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 000015EB  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
				            .IF levelNum == 3
 000015FB  66| A1		                mov ax, [xPosBogy5LevelArr + 8]
	   000000CA R
				            .ENDIF
 00001601  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 00001607  58			        pop eax
				        .IF xyPosNoWork19.x > 106
 00001612  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 0000161B  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N20 == 1
 00001632  66| 83 05		        add xyPosNoWork20.x, 3
	   00000076 R 03
 0000163A  50			        push eax
 0000163B  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 00001641  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork20.x >= ax
 00001652  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 0000165B  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
 00001664  66| 83 05		            add scoreNum, 10
	   0000097B R 0A
 0000166C  66| 83 2D		            sub bogysNum, 1
	   00000987 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001694  BB 00000003		                mov ebx, 3
 00001699  E9 FFFFE98F		                jmp Ex
				            .ENDIF
				            
							.IF levelNum == 1
 000016A8  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 000016B8  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
				            .IF levelNum == 3
 000016C8  66| A1		                mov ax, [xPosBogy5LevelArr + 8]
	   000000CA R
				            .ENDIF
 000016CE  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 000016D4  58			        pop eax
				        .IF xyPosNoWork20.x > 106
 000016DF  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 000016E8  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF xyPosBogy0.x < 16
 000016FB  50					push eax
						.IF levelNum == 1
 00001706  66| A1					mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
						.ENDIF
						.IF levelNum == 2
 00001716  66| A1					mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
						.ENDIF
						.IF levelNum == 3
 00001726  66| A1					mov ax, [xPosBogy0LevelArr + 8]
	   000000AC R
						.ENDIF
 0000172C  66| A3				mov xyPosBogy0.x, ax
	   000000C8 R
 00001732  58					pop eax
 00001733  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001750  BB 00000003					mov ebx, 3 ;之後要改3
 00001755  E9 FFFFE8D3					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy1.x < 16
 00001764  50					push eax
						.IF levelNum == 1
 0000176F  66| A1					mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
						.ENDIF
						.IF levelNum == 2
 0000177F  66| A1					mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
						.ENDIF
						.IF levelNum == 3
 0000178F  66| A1					mov ax, [xPosBogy1LevelArr + 8]
	   000000B2 R
						.ENDIF
 00001795  66| A3				mov xyPosBogy1.x, ax
	   000000CC R
 0000179B  58					pop eax
 0000179C  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000017B9  BB 00000003					mov ebx, 3 ;之後要改3
 000017BE  E9 FFFFE86A					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy2.x < 16
 000017CD  50					push eax
						.IF levelNum == 1
 000017D8  66| A1					mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
						.ENDIF
						.IF levelNum == 2
 000017E8  66| A1					mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
						.ENDIF
						.IF levelNum == 3
 000017F8  66| A1					mov ax, [xPosBogy2LevelArr + 8]
	   000000B8 R
						.ENDIF
 000017FE  66| A3				mov xyPosBogy2.x, ax
	   000000D0 R
 00001804  58					pop eax
 00001805  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001822  BB 00000003					mov ebx, 3 ;之後要改3
 00001827  E9 FFFFE801					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy3.x < 16
 00001836  50					push eax
						.IF levelNum == 1
 00001841  66| A1					mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
						.ENDIF
						.IF levelNum == 2
 00001851  66| A1					mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
						.ENDIF
						.IF levelNum == 3
 00001861  66| A1					mov ax, [xPosBogy3LevelArr + 8]
	   000000BE R
						.ENDIF
 00001867  66| A3				mov xyPosBogy3.x, ax
	   000000D4 R
 0000186D  58					pop eax
 0000186E  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 0000188B  BB 00000003					mov ebx, 3 ;之後要改3
 00001890  E9 FFFFE798					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy4.x < 16
 0000189F  50					push eax
						.IF levelNum == 1
 000018AA  66| A1					mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
						.ENDIF
						.IF levelNum == 2
 000018BA  66| A1					mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
						.ENDIF
						.IF levelNum == 3
 000018CA  66| A1					mov ax, [xPosBogy4LevelArr + 8]
	   000000C4 R
						.ENDIF
 000018D0  66| A3				mov xyPosBogy4.x, ax
	   000000D8 R
 000018D6  58					pop eax
 000018D7  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000018F4  BB 00000003					mov ebx, 3 ;之後要改3
 000018F9  E9 FFFFE72F					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy5.x < 16
 00001908  50					push eax
						.IF levelNum == 1
 00001913  66| A1					mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
						.ENDIF
						.IF levelNum == 2
 00001923  66| A1					mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
						.ENDIF
						.IF levelNum == 3
 00001933  66| A1					mov ax, [xPosBogy5LevelArr + 8]
	   000000CA R
						.ENDIF
 00001939  66| A3				mov xyPosBogy5.x, ax
	   000000DC R
 0000193F  58					pop eax
 00001940  66| 83 2D				sub livesNum, 1
	   00000981 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 0000195D  BB 00000003					mov ebx, 3 ;之後要改3
 00001962  E9 FFFFE6C6					jmp Ex		
						.ENDIF
					.ENDIF
					
 00001967  E9 FFFFE890			jmp GameLoop



 0000196C  E8 00000000 E		call WaitMsg

 00001971			ExitProgram:
					exit
 00001978			main ENDP

 00001978			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 0000197E  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 00001985  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
				    	consoleHandle,
				        ADDR cursorInfo

					; 清空畫面
 0000199B  E8 00000000 E		call Clrscr

 000019A0  B9 00000006	mov ecx, 6
 000019A5  BE 00000000			mov esi, 0

				; 印開始畫面的標題
 000019AA			ShowStartStr:
 000019AA  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108,
						xyPos,
						ADDR cells_Written

 000019CA  83 C6 6C			add esi, 108
 000019CD  66| FF 05			inc xyPos.y
	   00000020 R
 000019D4  59				pop ecx
 000019D5  E2 D3			loop ShowStartStr

				; 印開始畫面的選項
 000019D7			PrintOption:
 000019D7  66| 83 05		    add xyPos.y, 7
	   00000020 R 07
 000019DF  66| 83 05		    add xyPos.x, 48
	   0000001E R 30

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR enterMsg,
				        SIZEOF enterMsg,
				        xyPos,
				        ADDR cells_Written

 00001A04  66| 83 05		    add xyPos.y, 2
	   00000020 R 02

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR LeaveMsg,
				        SIZEOF LeaveMsg,
				        xyPos,
				        ADDR cells_Written

 00001A29  B9 00000007			mov ecx, 7
 00001A2E  BE 00000000			mov esi, 0
 00001A33  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 00001A3C  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F

 00001A45			PrintStartTank:
 00001A45  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written

 00001A65  83 C6 18			add esi, 24
 00001A68  66| FF 05			inc xyPos.y
	   00000020 R
 00001A6F  59				pop ecx
 00001A70  E2 D3			loop PrintStartTank

 00001A72  B9 00000005			mov ecx, 5
 00001A77  BE 00000000			mov esi, 0
 00001A7C  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 00001A85  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001A8E			PrintStartBogy:
 00001A8E  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written

 00001AAE  83 C6 07			add esi, 7
 00001AB1  66| FF 05			inc xyPos.y
	   00000020 R
 00001AB8  59				pop ecx
 00001AB9  E2 D3			loop PrintStartBogy

 00001ABB			StartOrNot:
 00001ABB  E8 00000000 E	    call ReadChar

					.IF ax == 1265h     ;press e to start game
 00001AC6  E8 00000000 E	        call Clrscr
 00001ACB  66| C7 05				mov xyPos.x, 28
	   0000001E R
	   001C
 00001AD4  66| C7 05				mov xyPos.y, 7
	   00000020 R
	   0007

 00001ADD  B9 00000011				mov ecx, 17
 00001AE2  BE 00000000				mov esi, 0
 00001AE7  EB 0F				jmp PrintIntro
				    .ENDIF
				    .IF ax == 266ch     ;press l to leave
 00001AEF  BB 00000004				mov ebx, 4
				        ret
				    .ENDIF
 00001AF6  EB C3			jmp StartOrNot

 00001AF8			PrintIntro:
 00001AF8  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written

 00001B18  83 C6 41			add esi, 65
 00001B1B  66| FF 05			inc xyPos.y
	   00000020 R
 00001B22  59				pop ecx
 00001B23  E2 D3			loop PrintIntro

 00001B25			GameOrNot:
 00001B25  E8 00000000 E	    call ReadChar
					.IF ax == 3920h     ;press space to start game
 00001B30  E8 00000000 E	        call Clrscr
						INVOKE printGameStage
 00001B3A  BB 00000001				mov ebx, 1
 00001B3F  EB 02				jmp ExitFunc
					.ENDIF
 00001B41  EB E2			jmp GameOrNot

 00001B43			ExitFunc:
					ret
 00001B45			printStartScene ENDP

 00001B45			printGameStage PROC
 00001B45				PrintGameSceneTop:
 00001B45  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001B4E  66| C7 05			mov xyPos.y, 4
	   00000020 R
	   0004
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00001B74  66| FF 05			inc xyPos.y
	   00000020 R

 00001B7B  B9 00000018			mov ecx, 24
 00001B80			PrintGameScene:
 00001B80  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 00001B9E  66| FF 05			inc xyPos.y
	   00000020 R
 00001BA5  59				pop ecx
 00001BA6  E2 D8			loop PrintGameScene

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00001BC5  66| FF 05			inc xyPos.y
	   00000020 R

					INVOKE printGreenLine, xyPos
					
 00001BD7			PrintBar:
 00001BD7  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001BE0  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written

					INVOKE printLevel, xyPos

 00001C11  66| C7 05			mov xyPos.x, 29
	   0000001E R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written
					
 00001C37  66| C7 05			mov xyPos.x, 56
	   0000001E R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

					INVOKE printScore, xyPos

 00001C68  66| C7 05			mov xyPos.x, 80
	   0000001E R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

					INVOKE printLives, xyPos

 00001C99  66| C7 05			mov xyPos.x, 104
	   0000001E R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

					INVOKE printBogys, xyPos
 00001CCA  C3				ret
 00001CCB			printGameStage ENDP

 00001CCB			printEndScene PROC
 00001CCB  66| C7 05			mov xyPos.x, 40
	   0000001E R
	   0028
 00001CD4  66| C7 05			mov xyPos.y, 5
	   00000020 R
	   0005
 00001CDD  B9 00000006			mov ecx, 6
 00001CE2  BE 00000000			mov esi, 0
					.IF bogysNum == 0
 00001CF1			printWin:
 00001CF1  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [winStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00001D11  59					pop ecx
 00001D12  83 C6 24				add esi, 36
 00001D15  66| FF 05				inc xyPos.y
	   00000020 R
 00001D1C  E2 D3				loop printWin
					.ENDIF

					.IF livesNum == 0
 00001D28			printLose:
 00001D28  51					push ecx
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [loseStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00001D48  59					pop ecx
 00001D49  83 C6 24				add esi, 36
 00001D4C  66| FF 05				inc xyPos.y
	   00000020 R
 00001D53  E2 D3				loop printLose
					.ENDIF

 00001D55  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00001D5E  66| C7 05			mov xyPos.x, 32
	   0000001E R
	   0020
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

 00001D84  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00001D8C  66| 8B 15			mov dx, scoreNum
	   0000097B R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPos,
						ADDR cells_Written

 00001DBA  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

 00001DDF  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00001DE7  66| 8B 15			mov dx, livesNum
	   00000981 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPos,
						ADDR cells_Written

 00001E15  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

 00001E3A  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00001E42  66| 8B 15			mov dx, bogysNum
	   00000987 R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPos,
						ADDR cells_Written

 00001E70  66| 83 05			add xyPos.y, 3
	   00000020 R 03
 00001E78  66| C7 05			mov xyPos.x, 50
	   0000001E R
	   0032
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR restart,
						SIZEOF restart,
						xyPos,
						ADDR cells_Written

 00001E9E  66| 83 05			add xyPos.y, 2
	   00000020 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg,
						xyPos,
						ADDR cells_Written

					.IF bogysNum == 0
 00001ECD  66| 83 05				add xyPos.y, 2
	   00000020 R 02
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR nextLevel,
							SIZEOF nextLevel,
							xyPos,
							ADDR cells_Written
					.ENDIF

 00001EF2			restartOrLeave:
 00001EF2  E8 00000000 E		call ReadChar
					.IF ax == 1372h
 00001EFD  BB 00000001				mov ebx, 1
 00001F02  E8 00000000 E			call Clrscr
 00001F07  EB 37				jmp ExitEndScene
					.ENDIF
					.IF ax == 266ch
 00001F0F  BB 00000004				mov ebx, 4
 00001F14  EB 2A				jmp ExitEndScene
					.ENDIF
					.IF bogysNum == 0
						.IF ax == 316eh
 00001F26  BB 00000001					mov ebx, 1
							.IF levelNum < 3
 00001F35  66| FF 05						inc levelNum
	   00000965 R
							.ENDIF
 00001F3C  EB 02					jmp ExitEndScene
						.ENDIF
					.ENDIF
 00001F3E  EB B2			jmp restartOrLeave

 00001F40			ExitEndScene:
 00001F40  C3				ret
 00001F41			printEndScene ENDP

 00001F41			printLevel PROC,
					xyPosInit:COORD
 00001F44  66| C7 45 08			mov xyPosInit.x, 12
	   000C
 00001F4A  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001F50  66| 8B 15			mov dx, levelNum
	   00000965 R
					INVOKE decStrLevel, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR levelStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001F7F			printLevel ENDP

 00001F7F			printScore PROC,
					xyPosInit:COORD
 00001F82  66| C7 45 08			mov xyPosInit.x, 63
	   003F
 00001F88  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001F8E  66| 8B 15			mov dx, scoreNum
	   0000097B R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001FBD			printScore ENDP

 00001FBD			printLives PROC,
					xyPosInit:COORD
 00001FC0  66| C7 45 08			mov xyPosInit.x, 87
	   0057
 00001FC6  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001FCC  66| 8B 15			mov dx, livesNum
	   00000981 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001FFB			printLives ENDP

 00001FFB			printBogys PROC,
					xyPosInit:COORD
 00001FFE  66| C7 45 08			mov xyPosInit.x, 111
	   006F
 00002004  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000200A  66| 8B 15			mov dx, bogysNum
	   00000987 R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00002039			printBogys ENDP

 00002039			initialLevelBogyPos PROC
 00002039  50				push eax

				    .IF levelNum == 1
 00002044  66| A1		        mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
 0000204A  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 00002050  66| A1		        mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
 00002056  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 0000205C  66| A1		        mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
 00002062  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 00002068  66| A1		        mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
 0000206E  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 00002074  66| A1		        mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
 0000207A  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 00002080  66| A1		        mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
 00002086  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 2
 00002096  66| A1		        mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
 0000209C  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 000020A2  66| A1		        mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
 000020A8  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 000020AE  66| A1		        mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
 000020B4  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 000020BA  66| A1		        mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
 000020C0  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 000020C6  66| A1		        mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
 000020CC  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 000020D2  66| A1		        mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
 000020D8  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 3
 000020E8  66| A1		        mov ax, [xPosBogy0LevelArr + 8]
	   000000AC R
 000020EE  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 000020F4  66| A1		        mov ax, [xPosBogy1LevelArr + 8]
	   000000B2 R
 000020FA  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 00002100  66| A1		        mov ax, [xPosBogy2LevelArr + 8]
	   000000B8 R
 00002106  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 0000210C  66| A1		        mov ax, [xPosBogy3LevelArr + 8]
	   000000BE R
 00002112  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 00002118  66| A1		        mov ax, [xPosBogy4LevelArr + 8]
	   000000C4 R
 0000211E  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 00002124  66| A1		        mov ax, [xPosBogy5LevelArr + 8]
	   000000CA R
 0000212A  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

 00002130  58			    pop eax
 00002131  C3			    ret
 00002132			initialLevelBogyPos ENDP

 00002132			bogyWalking PROC,
					xyPosInBogy:COORD
 00002135  B9 00000003			mov ecx, 3
 0000213A  BE 00000000			mov esi, 0

					;mov ebx, xyPosInBogy.y
 0000213F			printBogy:
 0000213F  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 0000215C  83 C6 05			add esi, 5
 0000215F  66| FF 45 0A			inc xyPosInBogy.y
 00002163  59				pop ecx
 00002164  E2 D9			loop printBogy
					
					ret
 0000216A			bogyWalking ENDP

 0000216A			bogyClear PROC,
					xyPosInBogy:COORD
 0000216D  B9 00000003			mov ecx, 3
 00002172  BE 00000000			mov esi, 0
 00002177			removeBogy:
 00002177  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00002194  83 C6 05			add esi, 5
 00002197  66| FF 45 0A			inc xyPosInBogy.y
 0000219B  59				pop ecx
 0000219C  E2 D9			loop removeBogy
					ret
 000021A2			bogyClear ENDP

 000021A2			tankWalking PROC,
					xyPosInit:COORD
 000021A5  B9 00000003			mov ecx, 3
 000021AA  BE 00000000			mov esi, 0

					;mov ebx, xyPosInit.y
 000021AF			printTank:
 000021AF  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 000021CC  83 C6 08			add esi, 8
 000021CF  66| FF 45 0A			inc xyPosInit.y
 000021D3  59				pop ecx
 000021D4  E2 D9			loop printTank
					ret
 000021DA			tankWalking ENDP

 000021DA			tankClear PROC,
					xyPosInit:COORD
 000021DD  B9 00000003			mov ecx, 3
 000021E2  BE 00000000			mov esi, 0
 000021E7			removeTank:
 000021E7  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00002204  83 C6 08			add esi, 8
 00002207  66| FF 45 0A			inc xyPosInit.y
 0000220B  59				pop ecx
 0000220C  E2 D9			loop removeTank
					ret
 00002212			tankClear ENDP

 00002212			noWorkWalking PROC,
					xyPosInit:COORD
 00002215			printNoWork:
 00002215  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bullet,
						SIZEOF bullet,
						xyPosInit,
						ADDR cells_Written
 00002230  59				pop ecx
					ret
 00002235			noWorkWalking ENDP

 00002235			noWorkClear PROC,
					xyPosInit:COORD
 00002238			removeNoWork:
 00002238  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR clearBullet,
						SIZEOF clearBullet,
						xyPosInit,
						ADDR cells_Written
 00002253  59				pop ecx
					ret
 00002258			noWorkClear ENDP

 00002258			printGreenLine PROC,
					xyPosInLine:COORD
 0000225B  66| C7 45 08			mov xyPosInLine.x, 20
	   0014
 00002261  66| C7 45 0A			mov xyPosInLine.y, 5
	   0005

 00002267  B9 00000018			mov ecx, 24
 0000226C  BE 00000000			mov esi, 0
 00002271			PrintLine:
 00002271  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInLine,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInLine,
						ADDR cells_Written
 000022A6  66| FF 45 0A			inc xyPosInLine.y
 000022AA  59				pop ecx
 000022AB  E2 C4			loop PrintLine
					ret
 000022B1			printGreenLine ENDP

 000022B1			decStrLevel PROC,
					levelNumDec:WORD
 000022B4  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000022B9  B2 0A			mov dl, 10					;除數
 000022BB  66| 8B 45 08			mov ax, levelNumDec			;被除數
 000022BF			change:
 000022BF  51				push ecx
 000022C0  F6 F2			div dl
 000022C2  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000022C5  49				dec ecx
 000022C6  88 A1 00000967 R		mov [levelStr + ecx], ah
 000022CC  66| 0F B6 C0			movzx ax, al				;商繼續除
 000022D0  59				pop ecx
 000022D1  E2 EC			loop change
					ret
 000022D7			decStrLevel ENDP

 000022D7			decStrScore PROC,
					scoreNumDec:WORD
 000022DA  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000022DF  B2 0A			mov dl, 10					;除數
 000022E1  66| 8B 45 08			mov ax, scoreNumDec			;被除數
 000022E5			change:
 000022E5  51				push ecx
 000022E6  F6 F2			div dl
 000022E8  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000022EB  49				dec ecx
 000022EC  88 A1 0000097D R		mov [scoreStr + ecx], ah
 000022F2  66| 0F B6 C0			movzx ax, al				;商繼續除
 000022F6  59				pop ecx
 000022F7  E2 EC			loop change
					ret
 000022FD			decStrScore ENDP

 000022FD			decStrLives PROC,
					livesNumDec:WORD
 00002300  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00002305  B2 0A			mov dl, 10					;除數
 00002307  66| 8B 45 08			mov ax, livesNumDec			;被除數
 0000230B			change:
 0000230B  51				push ecx
 0000230C  F6 F2			div dl
 0000230E  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00002311  49				dec ecx
 00002312  88 A1 00000983 R		mov [livesStr + ecx], ah
 00002318  66| 0F B6 C0			movzx ax, al				;商繼續除
 0000231C  59				pop ecx
 0000231D  E2 EC			loop change
					ret
 00002323			decStrLives ENDP

 00002323			decStrBogys PROC,
					bogysNumDec:WORD
 00002326  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 0000232B  B2 0A			mov dl, 10					;除數
 0000232D  66| 8B 45 08			mov ax, bogysNumDec			;被除數
 00002331			change:
 00002331  51				push ecx
 00002332  F6 F2			div dl
 00002334  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00002337  49				dec ecx
 00002338  88 A1 00000989 R		mov [bogysStr + ecx], ah
 0000233E  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002342  59				pop ecx
 00002343  E2 EC			loop change
					ret
 00002349			decStrBogys ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 17:15:17
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000C1B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00002349 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 0000216A _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 00002177 _TEXT	
bogyWalking  . . . . . . . . . .	P Near	 00002132 _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  printBogy  . . . . . . . . . .	L Near	 0000213F _TEXT	
decStrBogys  . . . . . . . . . .	P Near	 00002323 _TEXT	Length= 00000026 Public STDCALL
  bogysNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002331 _TEXT	
decStrLevel  . . . . . . . . . .	P Near	 000022B1 _TEXT	Length= 00000026 Public STDCALL
  levelNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000022BF _TEXT	
decStrLives  . . . . . . . . . .	P Near	 000022FD _TEXT	Length= 00000026 Public STDCALL
  livesNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 0000230B _TEXT	
decStrScore  . . . . . . . . . .	P Near	 000022D7 _TEXT	Length= 00000026 Public STDCALL
  scoreNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000022E5 _TEXT	
initialLevelBogyPos  . . . . . .	P Near	 00002039 _TEXT	Length= 000000F9 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00001978 Public STDCALL
  Ex . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 000001FC _TEXT	
  pauseLoop  . . . . . . . . . .	L Near	 000004A7 _TEXT	
  backToGame . . . . . . . . . .	L Near	 000004B6 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00001971 _TEXT	
noWorkClear  . . . . . . . . . .	P Near	 00002235 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeNoWork . . . . . . . . .	L Near	 00002238 _TEXT	
noWorkWalking  . . . . . . . . .	P Near	 00002212 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printNoWork  . . . . . . . . .	L Near	 00002215 _TEXT	
printBogys . . . . . . . . . . .	P Near	 00001FFB _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printEndScene  . . . . . . . . .	P Near	 00001CCB _TEXT	Length= 00000276 Public STDCALL
  printWin . . . . . . . . . . .	L Near	 00001CF1 _TEXT	
  printLose  . . . . . . . . . .	L Near	 00001D28 _TEXT	
  restartOrLeave . . . . . . . .	L Near	 00001EF2 _TEXT	
  ExitEndScene . . . . . . . . .	L Near	 00001F40 _TEXT	
printGameStage . . . . . . . . .	P Near	 00001B45 _TEXT	Length= 00000186 Public STDCALL
  PrintGameSceneTop  . . . . . .	L Near	 00001B45 _TEXT	
  PrintGameScene . . . . . . . .	L Near	 00001B80 _TEXT	
  PrintBar . . . . . . . . . . .	L Near	 00001BD7 _TEXT	
printGreenLine . . . . . . . . .	P Near	 00002258 _TEXT	Length= 00000059 Public STDCALL
  xyPosInLine  . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00002271 _TEXT	
printLevel . . . . . . . . . . .	P Near	 00001F41 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printLives . . . . . . . . . . .	P Near	 00001FBD _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printScore . . . . . . . . . . .	P Near	 00001F7F _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printStartScene  . . . . . . . .	P Near	 00001978 _TEXT	Length= 000001CD Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 000019AA _TEXT	
  PrintOption  . . . . . . . . .	L Near	 000019D7 _TEXT	
  PrintStartTank . . . . . . . .	L Near	 00001A45 _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 00001A8E _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 00001ABB _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 00001AF8 _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 00001B25 _TEXT	
  ExitFunc . . . . . . . . . . .	L Near	 00001B43 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 000021DA _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeTank . . . . . . . . . .	L Near	 000021E7 _TEXT	
tankWalking  . . . . . . . . . .	P Near	 000021A2 _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printTank  . . . . . . . . . .	L Near	 000021AF _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
N0 . . . . . . . . . . . . . . .	Word	 0000007A _DATA	
N10  . . . . . . . . . . . . . .	Word	 0000008E _DATA	
N11  . . . . . . . . . . . . . .	Word	 00000090 _DATA	
N12  . . . . . . . . . . . . . .	Word	 00000092 _DATA	
N13  . . . . . . . . . . . . . .	Word	 00000094 _DATA	
N14  . . . . . . . . . . . . . .	Word	 00000096 _DATA	
N15  . . . . . . . . . . . . . .	Word	 00000098 _DATA	
N16  . . . . . . . . . . . . . .	Word	 0000009A _DATA	
N17  . . . . . . . . . . . . . .	Word	 0000009C _DATA	
N18  . . . . . . . . . . . . . .	Word	 0000009E _DATA	
N19  . . . . . . . . . . . . . .	Word	 000000A0 _DATA	
N1 . . . . . . . . . . . . . . .	Word	 0000007C _DATA	
N20  . . . . . . . . . . . . . .	Word	 000000A2 _DATA	
N2 . . . . . . . . . . . . . . .	Word	 0000007E _DATA	
N3 . . . . . . . . . . . . . . .	Word	 00000080 _DATA	
N4 . . . . . . . . . . . . . . .	Word	 00000082 _DATA	
N5 . . . . . . . . . . . . . . .	Word	 00000084 _DATA	
N6 . . . . . . . . . . . . . . .	Word	 00000086 _DATA	
N7 . . . . . . . . . . . . . . .	Word	 00000088 _DATA	
N8 . . . . . . . . . . . . . . .	Word	 0000008A _DATA	
N9 . . . . . . . . . . . . . . .	Word	 0000008C _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 00000987 _DATA	
bogysStr . . . . . . . . . . . .	Byte	 00000989 _DATA	
bogys  . . . . . . . . . . . . .	Byte	 0000095D _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bullet . . . . . . . . . . . . .	Byte	 00000929 _DATA	
cells_Written  . . . . . . . . .	DWord	 000000E0 _DATA	
clearBogy  . . . . . . . . . . .	Byte	 0000091A _DATA	
clearBullet  . . . . . . . . . .	Byte	 00000930 _DATA	
clearTank  . . . . . . . . . . .	Byte	 000008F3 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 0000036C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameBgM  . . . . . . . . . . . .	Byte	 000009FC _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 0000098D _DATA	
gameBogy . . . . . . . . . . . .	Byte	 0000090B _DATA	
gameIntro  . . . . . . . . . . .	Byte	 0000048A _DATA	
gameTank . . . . . . . . . . . .	Byte	 000008DB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 00000939 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 0000037F _DATA	
levelNum . . . . . . . . . . . .	Word	 00000965 _DATA	
levelStr . . . . . . . . . . . .	Byte	 00000967 _DATA	
level  . . . . . . . . . . . . .	Byte	 0000093D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000937 _DATA	
livesNum . . . . . . . . . . . .	Word	 00000981 _DATA	
livesStr . . . . . . . . . . . .	Byte	 00000983 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000955 _DATA	
loseStr  . . . . . . . . . . . .	Byte	 00000B43 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
nextLevel  . . . . . . . . . . .	Byte	 000003A7 _DATA	
paused . . . . . . . . . . . . .	Byte	 0000096B _DATA	
playing  . . . . . . . . . . . .	Byte	 00000973 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restart  . . . . . . . . . . . .	Byte	 00000392 _DATA	
scoreNum . . . . . . . . . . . .	Word	 0000097B _DATA	
scoreStr . . . . . . . . . . . .	Byte	 0000097D _DATA	
score  . . . . . . . . . . . . .	Byte	 0000094D _DATA	
startBogy  . . . . . . . . . . .	Byte	 00000467 _DATA	
startStr . . . . . . . . . . . .	Byte	 000000E4 _DATA	
startTank  . . . . . . . . . . .	Byte	 000003BF _DATA	
state  . . . . . . . . . . . . .	Byte	 00000945 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winStr . . . . . . . . . . . . .	Byte	 00000A6B _DATA	
windowBound  . . . . . . . . . .	SMALL_RECT  00000012 _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000000 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosBogy0LevelArr  . . . . . . .	Word	 000000A4 _DATA	
xPosBogy1LevelArr  . . . . . . .	Word	 000000AA _DATA	
xPosBogy2LevelArr  . . . . . . .	Word	 000000B0 _DATA	
xPosBogy3LevelArr  . . . . . . .	Word	 000000B6 _DATA	
xPosBogy4LevelArr  . . . . . . .	Word	 000000BC _DATA	
xPosBogy5LevelArr  . . . . . . .	Word	 000000C2 _DATA	
xyPosBogy0 . . . . . . . . . . .	COORD	 000000C8 _DATA	
xyPosBogy1 . . . . . . . . . . .	COORD	 000000CC _DATA	
xyPosBogy2 . . . . . . . . . . .	COORD	 000000D0 _DATA	
xyPosBogy3 . . . . . . . . . . .	COORD	 000000D4 _DATA	
xyPosBogy4 . . . . . . . . . . .	COORD	 000000D8 _DATA	
xyPosBogy5 . . . . . . . . . . .	COORD	 000000DC _DATA	
xyPosNoWork0 . . . . . . . . . .	COORD	 00000026 _DATA	
xyPosNoWork10  . . . . . . . . .	COORD	 0000004E _DATA	
xyPosNoWork11  . . . . . . . . .	COORD	 00000052 _DATA	
xyPosNoWork12  . . . . . . . . .	COORD	 00000056 _DATA	
xyPosNoWork13  . . . . . . . . .	COORD	 0000005A _DATA	
xyPosNoWork14  . . . . . . . . .	COORD	 0000005E _DATA	
xyPosNoWork15  . . . . . . . . .	COORD	 00000062 _DATA	
xyPosNoWork16  . . . . . . . . .	COORD	 00000066 _DATA	
xyPosNoWork17  . . . . . . . . .	COORD	 0000006A _DATA	
xyPosNoWork18  . . . . . . . . .	COORD	 0000006E _DATA	
xyPosNoWork19  . . . . . . . . .	COORD	 00000072 _DATA	
xyPosNoWork1 . . . . . . . . . .	COORD	 0000002A _DATA	
xyPosNoWork20  . . . . . . . . .	COORD	 00000076 _DATA	
xyPosNoWork2 . . . . . . . . . .	COORD	 0000002E _DATA	
xyPosNoWork3 . . . . . . . . . .	COORD	 00000032 _DATA	
xyPosNoWork4 . . . . . . . . . .	COORD	 00000036 _DATA	
xyPosNoWork5 . . . . . . . . . .	COORD	 0000003A _DATA	
xyPosNoWork6 . . . . . . . . . .	COORD	 0000003E _DATA	
xyPosNoWork7 . . . . . . . . . .	COORD	 00000042 _DATA	
xyPosNoWork8 . . . . . . . . . .	COORD	 00000046 _DATA	
xyPosNoWork9 . . . . . . . . . .	COORD	 0000004A _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000022 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 0000001E _DATA	
yellowColor  . . . . . . . . . .	Word	 0000093B _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
