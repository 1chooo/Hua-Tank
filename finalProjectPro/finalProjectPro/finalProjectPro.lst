Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/19/22 22:18:28
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				printStartScene PROTO
				decStrLevel PROTO, levelNumDec:WORD
				decStrScore PROTO, scoreNumDec:WORD
				decStrLives PROTO, livesNumDec:WORD
				decStrBogys PROTO, bogysNumDec:WORD

				printLevel PROTO, xyPosInit:COORD
				printScore PROTO, xyPosInit:COORD
				printLives PROTO, xyPosInit:COORD
				printBogys PROTO, xyPosInit:COORD

				bogyWalking PROTO, xyPosInBogy:COORD
				bogyClear   PROTO, xyPosInBogy:COORD
				printGreenLine PROTO, xyPosInLine:COORD

				tankWalking PROTO, xyPosInit:COORD
				tankClear   PROTO, xyPosInit:COORD
				;controlTank PROTO

				; bullet move
				noWorkWalking PROTO, xyPosInit:COORD
				noWorkClear   PROTO, xyPosInit:COORD

				printEndScene PROTO
				printGameStage PROTO

				initialLevelBogyPos PROTO

				; 	玩遊戲   ebx = 1
				; 	暫停		ebx = 2
				; 	結束畫面	ebx = 3
				; 	離開程式	ebx = 4

 00000000			.data
					; 視窗的變數們
 00000000 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy",0 ; 標題
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 00000012 0000 0000 007D		windowBound    SMALL_RECT <0,0,125,25>    ; 視窗大小
	   0019
 0000001A 00000000			consoleHandle  DWORD ?

 0000001E 0006 0005			xyPos COORD   <6,5>
 00000022 0007 000F			xyPosTank COORD    <7,15>

 00000026 000F 0006			xyPosNoWork0 COORD <15,6>
 0000002A 000F 0007			xyPosNoWork1 COORD <15,7>
 0000002E 000F 0008			xyPosNoWork2 COORD <15,8>
 00000032 000F 0009			xyPosNoWork3 COORD <15,9>
 00000036 000F 000A			xyPosNoWork4 COORD <15,10>
 0000003A 000F 000B			xyPosNoWork5 COORD <15,11>
 0000003E 000F 000C			xyPosNoWork6 COORD <15,12>
 00000042 000F 000D			xyPosNoWork7 COORD <15,13>
 00000046 000F 000E			xyPosNoWork8 COORD <15,14>
 0000004A 000F 000F			xyPosNoWork9 COORD <15,15>
 0000004E 000F 0010			xyPosNoWork10 COORD <15,16>
 00000052 000F 0011			xyPosNoWork11 COORD <15,17>
 00000056 000F 0012			xyPosNoWork12 COORD <15,18>
 0000005A 000F 0013			xyPosNoWork13 COORD <15,19>
 0000005E 000F 0014			xyPosNoWork14 COORD <15,20>
 00000062 000F 0015			xyPosNoWork15 COORD <15,21>
 00000066 000F 0016			xyPosNoWork16 COORD <15,22>
 0000006A 000F 0017			xyPosNoWork17 COORD <15,23>
 0000006E 000F 0018			xyPosNoWork18 COORD <15,24>
 00000072 000F 0019			xyPosNoWork19 COORD <15,25>
 00000076 000F 001A			xyPosNoWork20 COORD <15,26>

 0000007A 0000				N0  WORD 0
 0000007C 0000				N1  WORD 0
 0000007E 0000				N2  WORD 0
 00000080 0000				N3  WORD 0
 00000082 0000				N4  WORD 0
 00000084 0000				N5  WORD 0
 00000086 0000				N6  WORD 0
 00000088 0000				N7  WORD 0
 0000008A 0000				N8  WORD 0
 0000008C 0000				N9  WORD 0
 0000008E 0000				N10 WORD 0
 00000090 0000				N11 WORD 0
 00000092 0000				N12 WORD 0
 00000094 0000				N13 WORD 0
 00000096 0000				N14 WORD 0
 00000098 0000				N15 WORD 0
 0000009A 0000				N16 WORD 0
 0000009C 0000				N17 WORD 0
 0000009E 0000				N18 WORD 0
 000000A0 0000				N19 WORD 0
 000000A2 0000				N20 WORD 0

 000000A4 008E 00EA 00DF		xPosBogy0LevelArr WORD 142, 234, 223
 000000AA 0087 0071 007A	    xPosBogy1LevelArr WORD 135, 113, 122
 000000B0 006E 00F3 00AF	    xPosBogy2LevelArr WORD 110, 243, 175
 000000B6 0078 006E 007B	    xPosBogy3LevelArr WORD 120, 110, 123
 000000BC 00AF 007C 0099	    xPosBogy4LevelArr WORD 175, 124, 153
 000000C2 007F 0082 00BE	    xPosBogy5LevelArr WORD 127, 130, 190

 000000C8 0000 0005		    xyPosBogy0 COORD   <?,5>
 000000CC 0000 0009		    xyPosBogy1 COORD   <?,9>
 000000D0 0000 000D		    xyPosBogy2 COORD   <?,13>
 000000D4 0000 0011		    xyPosBogy3 COORD   <?,17>
 000000D8 0000 0015		    xyPosBogy4 COORD   <?,21>
 000000DC 0000 0019		    xyPosBogy5 COORD   <?,25>

 000000E0 00000000			cells_Written DWORD ?

					; 開始畫面的字
 000000E4 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 00000150  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _|/ ____ \    |_   _ \  .'   `.  /  ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 7C 2F 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2F 20
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 000001BC  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / A \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/  /   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 41
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 20
	   2F 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000228  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __ \      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 20
	   5C 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 00000294  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\  \___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 20
	   5C 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 00000300  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20

 0000036C  0000002C [			startColor WORD 44 DUP(0Ah), 25 DUP(0fh), 39 DUP(0Bh)
	    000A
	   ]
	   00000019 [
	    000F
	   ]
	   00000027 [
	    000B
	   ]
					
					;印開始畫面的提示字
 00000444 50 72 65 73 73		enterMsg  BYTE "Press 'E' to enter",0
	   20 27 45 27 20
	   74 6F 20 65 6E
	   74 65 72 00
 00000457 50 72 65 73 73		leaveMsg  BYTE "Press 'L' to leave",0
	   20 27 4C 27 20
	   74 6F 20 6C 65
	   61 76 65 00
 0000046A 50 72 65 73 73		restart   BYTE "Press 'R' to restart",0
	   20 27 52 27 20
	   74 6F 20 72 65
	   73 74 61 72 74
	   00
 0000047F 50 72 65 73 73		nextLevel BYTE "Press 'N' to next level",0
	   20 27 4E 27 20
	   74 6F 20 6E 65
	   78 74 20 6C 65
	   76 65 6C 00
 00000497 54 68 65 20 64		finalMsg  BYTE "The day is saved, thanks to the Powerful Hua Tank!",0
	   61 79 20 69 73
	   20 73 61 76 65
	   64 2C 20 74 68
	   61 6E 6B 73 20
	   74 6F 20 74 68
	   65 20 50 6F 77
	   65 72 66 75 6C
	   20 48 75 61 20
	   54 61 6E 6B 21
	   00
 000004CA  00000032 [			finalColor WORD 50 DUP(0Ah)
	    000A
	   ]
					
					;印坦克
 0000052E 20 20 20 20 20		startTank BYTE "       \                "
	   20 20 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 00000546  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 0000055E  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 00000576  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 0000058E  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 000005A6  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 000005BE  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20

 000005D6  00000018 [			startTankColor WORD 24 DUP(0Ah)
	    000A
	   ]
 00000606  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
 00000636  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
 00000666  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
 00000696  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
 000006C6  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
 000006F6  00000018 [						   WORD 24 DUP(0Ah)
	    000A
	   ]
					;印Bogy
 00000726 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 0000072D  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 00000734  2F 20 3D 3D 3D				  BYTE "/ === \"
	   20 5C
 0000073B  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 00000742  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20

 00000749  00000007 [			startBogyColor WORD 7 DUP(0Bh)
	    000B
	   ]
 00000757  00000007 [						   WORD 7 DUP(0Bh)
	    000B
	   ]
 00000765  00000007 [						   WORD 7 DUP(0Bh)
	    000B
	   ]
 00000773  00000007 [						   WORD 7 DUP(0Bh)
	    000B
	   ]
 00000781  00000007 [						   WORD 7 DUP(0Bh)
	    000B
	   ]

 0000078F 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 000007D0  20 20 20 20 20	              BYTE "                       Game Introduction:                        "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000811  20 20 20 20 20	              BYTE "             Control the Hua Tank to kill the Bogy.              "
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000852  20 20 20 20 20	              BYTE "              Don't let Bogy cross the green line,               "
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000893  20 20 20 20 20				  BYTE "                 or your life will shock down!!                  "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000008D4  20 20 20 53 74	              BYTE "   Start with 10 lives, once the live reaches zero, you lose!!   "
	   61 72 74 20 77
	   69 74 68 20 31
	   30 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 20
 00000915  20 20 20 20 20	              BYTE "      Kill the last monsters, if you still alive, you win!!      "
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 20
 00000956  20 20 20 20 20	              BYTE "                                                                 "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000997  20 20 20 20 20	              BYTE "                    How to control the tank:                     "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000009D8  20 20 20 20 20	              BYTE "                + press 'up'    to move up                       "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000A19  20 20 20 20 20	              BYTE "                + press 'down'  to move down                     "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000A5A  20 20 20 20 20	              BYTE "                + press 'right' to fire bullet                   "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000A9B  20 20 20 20 20	              BYTE "                                                                 "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000ADC  20 20 20 20 20	              BYTE "                          How to play:                           "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000B1D  20 20 20 20 20	              BYTE "                + press 'space' to start game                    "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000B5E  20 20 20 20 20	              BYTE "                + press 'P'     to pause game                    "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000B9F  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A

 00000BE0  00000041 [			gameIntroColor WORD 65 DUP(0Eh)
	    000E
	   ]
					
 00000C62 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 00000C6A  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 00000C72  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20

 00000C7A 20 20 20 20 20		clearTank BYTE "        "
	   20 20 20
 00000C82  20 20 20 20 20				  BYTE "        "
	   20 20 20
 00000C8A  20 20 20 20 20				  BYTE "        "
	   20 20 20

 00000C92  00000008 [			tankColor WORD 8 DUP(0Ah)
	    000A
	   ]
 00000CA2  00000008 [					  WORD 8 DUP(0Ah)
	    000A
	   ]
 00000CB2  00000008 [					  WORD 8 DUP(0Ah)
	    000A
	   ]

 00000CC2  00000008 [			tankColorClear WORD 8 DUP(0Fh)
	    000F
	   ]
 00000CD2  00000008 [						   WORD 8 DUP(0Fh)
	    000F
	   ]
 00000CE2  00000008 [					       WORD 8 DUP(0Fh)
	    000F
	   ]

 00000CF2 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 00000CF7  7C 4F 76 4F 7C				  BYTE "|OvO|"
 00000CFC  7C 5F 7C 5F 7C				  BYTE "|_|_|"

 00000D01 20 20 20 20 20		clearBogy BYTE "     "
 00000D06  20 20 20 20 20				  BYTE "     "
 00000D0B  20 20 20 20 20				  BYTE "     "
							  
 00000D10  00000005 [			gameBogyColor0 WORD 5 DUP(0Eh)
	    000E
	   ]
 00000D1A  00000005 [			               WORD 5 DUP(0Eh)
	    000E
	   ]
 00000D24  00000005 [						   WORD 5 DUP(0Eh)
	    000E
	   ]

 00000D2E  00000005 [			gameBogyColor1 WORD 5 DUP(0Bh)
	    000B
	   ]
 00000D38  00000005 [			               WORD 5 DUP(0Bh)
	    000B
	   ]
 00000D42  00000005 [						   WORD 5 DUP(0Bh)
	    000B
	   ]

 00000D4C  00000005 [			gameBogyColor2 WORD 5 DUP(0Dh)
	    000D
	   ]
 00000D56  00000005 [			               WORD 5 DUP(0Dh)
	    000D
	   ]
 00000D60  00000005 [						   WORD 5 DUP(0Dh)
	    000D
	   ]

 00000D6A 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 00000D71 20 20 20 20 20		clearBullet BYTE "      ",0
	   20 00

 00000D78  00000006 [			bulletColor WORD 6 DUP(0fh)
	    000F
	   ]

 00000D84 7C 00				line BYTE "|",0
 00000D86 000A				greenColor WORD 0Ah

 00000D88 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 00000D90 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 00000D98 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000DA0 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 00000DA8 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000DB0 0001				levelNum WORD 1
 00000DB2  00000004 [			levelStr BYTE 4 DUP(?)
	    00
	   ]

 00000DB6 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 00000DBE 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 00000DC6 0000				scoreNum WORD 0
 00000DC8 0000				scoreNumInLevel WORD ?
 00000DCA  00000004 [			scoreStr BYTE 4 DUP(?)
	    00
	   ]

 00000DCE 000A				livesNum WORD 10
 00000DD0 0000				livesNumInLevel WORD ?
 00000DD2  00000004 [			livesStr BYTE 4 DUP(?)
	    00
	   ]
					
 00000DD6 0000				bogysNum WORD ?
 00000DD8  00000004 [			bogysStr BYTE 4 DUP(?)
	    00
	   ]

 00000DDC  0000006E [			gameBgTB BYTE 110 DUP("*"),0
	    2A
	   ] 00
 00000E4B 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0	
	   0000006C [
	    20
	   ] 2A 00
					
 00000EBA 20 20 5F 5F 5F		winStr  BYTE "  ____      ____ _____ ____  _____  "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   20
 00000EDE  20 7C 5F 20 20			    BYTE " |_  _|    |_  _|_   _|_   \|_   _| "
	   5F 7C 20 20 20
	   20 7C 5F 20 20
	   5F 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 20 5C 7C 5F
	   20 20 20 5F 7C
	   20
 00000F02  20 20 20 5C 20			    BYTE "   \ \  /\  / /   | |   |   \ | |   "
	   5C 20 20 2F 5C
	   20 20 2F 20 2F
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 5C 20
	   7C 20 7C 20 20
	   20
 00000F26  20 20 20 20 5C			    BYTE "    \ \/  \/ /    | |   | |\ \| |   "
	   20 5C 2F 20 20
	   5C 2F 20 2F 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5C 20 5C
	   7C 20 7C 20 20
	   20
 00000F4A  20 20 20 20 20			    BYTE "     \  /\  /    _| |_ _| |_\   |_  "
	   5C 20 20 2F 5C
	   20 20 2F 20 20
	   20 20 5F 7C 20
	   7C 5F 20 5F 7C
	   20 7C 5F 5C 20
	   20 20 7C 5F 20
	   20
 00000F6E  20 20 20 20 20			    BYTE "      \/  \/    |_____|_____|\____| "
	   20 5C 2F 20 20
	   5C 2F 20 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5C
	   5F 5F 5F 5F 7C
	   20

 00000F92  00000024 [			winColor WORD 36 DUP(0Ah)
	    000A
	   ]
 00000FDA  00000024 [			loseColor WORD 36 DUP(0Bh)
	    000B
	   ]

 00001022 20 5F 5F 5F 5F		loseStr BYTE " _____      ___    ______  ________ "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20
 00001046  7C 5F 20 20 20				BYTE "|_   _|   .'   `..' ____ \|_   __  |"
	   5F 7C 20 20 20
	   2E 27 20 20 20
	   60 2E 2E 27 20
	   5F 5F 5F 5F 20
	   5C 7C 5F 20 20
	   20 5F 5F 20 20
	   7C
 0000106A  20 20 7C 20 7C				BYTE "  | |    /  .-.  | (____\_| | |_ \_|"	
	   20 20 20 20 2F
	   20 20 2E 2D 2E
	   20 20 7C 20 28
	   5F 5F 5F 5F 5C
	   5F 7C 20 7C 20
	   7C 5F 20 5C 5F
	   7C
 0000108E  20 20 7C 20 7C				BYTE "  | |   _| |   | |_.____ \  |  _| _ "
	   20 20 20 5F 7C
	   20 7C 20 20 20
	   7C 20 7C 5F 2E
	   5F 5F 5F 5F 20
	   5C 20 20 7C 20
	   20 5F 7C 20 5F
	   20
 000010B2  20 5F 7C 20 7C				BYTE " _| |__/ \  `-'  / \____) \_| |__/ |"
	   5F 5F 2F 20 5C
	   20 20 60 2D 27
	   20 20 2F 20 5C
	   5F 5F 5F 5F 29
	   20 5C 5F 7C 20
	   7C 5F 5F 2F 20
	   7C
 000010D6  7C 5F 5F 5F 5F				BYTE "|________|`.___.' \_______/________|"
	   5F 5F 5F 5F 7C
	   60 2E 5F 5F 5F
	   2E 27 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 2F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C


 00000000			.code

 00000000			main PROC
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001A R		mov consoleHandle, eax
					
					INVOKE SetConsoleTitle, ADDR windowTitleStr			; 設定視窗標題
					
					INVOKE SetConsoleWindowInfo,						; 設定視窗大小
				     	consoleHandle,
				     	TRUE,
				     	ADDR windowBound
					
					INVOKE printStartScene

 0000002D			Ex:	
					.IF ebx == 3
 00000032  E8 00000000 E			call Clrscr
						INVOKE printEndScene
					.ENDIF

					.IF ebx == 4        ;直接離開
 00000041  E8 00000000 E			call Clrscr
 00000046  E9 00001DC7				jmp ExitProgram
					.ENDIF

					.IF ebx == 1 ; 進入遊戲
 00000054  66| A1				mov ax, livesNum
	   00000DCE R
 0000005A  66| A3				mov livesNumInLevel, ax
	   00000DD0 R

 00000060  66| A1				mov ax, scoreNum
	   00000DC6 R
 00000066  66| A3				mov scoreNumInLevel, ax
	   00000DC8 R

						.IF levelNum == 1
 00000076  66| C7 05					mov bogysNum, 10
	   00000DD6 R
	   000A
						.ENDIF
						.IF levelNum == 2
 00000089  66| C7 05					mov bogysNum, 15
	   00000DD6 R
	   000F
						.ENDIF
						.IF levelNum == 3
 0000009C  66| C7 05					mov bogysNum, 20
	   00000DD6 R
	   0014
						.ENDIF
						INVOKE printGameStage


						INVOKE initialLevelBogyPos

 000000AF  66| C7 05				mov xyPosTank.y, 15
	   00000024 R
	   000F

 000000B8  66| C7 05				mov N0, 0
	   0000007A R
	   0000
 000000C1  66| C7 05				mov N1, 0
	   0000007C R
	   0000
 000000CA  66| C7 05				mov N2, 0
	   0000007E R
	   0000
 000000D3  66| C7 05				mov N3, 0
	   00000080 R
	   0000
 000000DC  66| C7 05				mov N4 , 0 
	   00000082 R
	   0000
 000000E5  66| C7 05				mov N5 , 0 
	   00000084 R
	   0000
 000000EE  66| C7 05				mov N6 , 0 
	   00000086 R
	   0000
 000000F7  66| C7 05				mov N7 , 0 
	   00000088 R
	   0000
 00000100  66| C7 05				mov N8 , 0 
	   0000008A R
	   0000
 00000109  66| C7 05				mov N9 , 0 
	   0000008C R
	   0000
 00000112  66| C7 05				mov N10, 0 
	   0000008E R
	   0000
 0000011B  66| C7 05				mov N11, 0 
	   00000090 R
	   0000
 00000124  66| C7 05				mov N12, 0 
	   00000092 R
	   0000
 0000012D  66| C7 05				mov N13, 0 
	   00000094 R
	   0000
 00000136  66| C7 05				mov N14, 0 
	   00000096 R
	   0000
 0000013F  66| C7 05				mov N15, 0 
	   00000098 R
	   0000
 00000148  66| C7 05				mov N16, 0 
	   0000009A R
	   0000
 00000151  66| C7 05				mov N17, 0 
	   0000009C R
	   0000
 0000015A  66| C7 05				mov N18, 0 
	   0000009E R
	   0000
 00000163  66| C7 05				mov N19, 0 
	   000000A0 R
	   0000
 0000016C  66| C7 05				mov N20, 0
	   000000A2 R
	   0000

 00000175  66| C7 05				mov xyPosNoWork0.x , 15
	   00000026 R
	   000F
 0000017E  66| C7 05				mov xyPosNoWork1.x , 15
	   0000002A R
	   000F
 00000187  66| C7 05				mov xyPosNoWork2.x , 15
	   0000002E R
	   000F
 00000190  66| C7 05				mov xyPosNoWork3.x , 15
	   00000032 R
	   000F
 00000199  66| C7 05				mov xyPosNoWork4.x , 15
	   00000036 R
	   000F
 000001A2  66| C7 05				mov xyPosNoWork5.x , 15
	   0000003A R
	   000F
 000001AB  66| C7 05				mov xyPosNoWork6.x , 15
	   0000003E R
	   000F
 000001B4  66| C7 05				mov xyPosNoWork7.x , 15
	   00000042 R
	   000F
 000001BD  66| C7 05				mov xyPosNoWork8.x , 15
	   00000046 R
	   000F
 000001C6  66| C7 05				mov xyPosNoWork9.x , 15
	   0000004A R
	   000F
 000001CF  66| C7 05				mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
 000001D8  66| C7 05				mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 000001E1  66| C7 05				mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 000001EA  66| C7 05				mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 000001F3  66| C7 05				mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
 000001FC  66| C7 05				mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00000205  66| C7 05				mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 0000020E  66| C7 05				mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 00000217  66| C7 05				mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
 00000220  66| C7 05				mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00000229  66| C7 05				mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
					.ENDIF

 00000232			GameLoop:
					INVOKE tankWalking, xyPosTank

					.IF N0 == 1
				        INVOKE noWorkWalking, xyPosNoWork0 
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkWalking, xyPosNoWork1 
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkWalking, xyPosNoWork2 
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkWalking, xyPosNoWork3 
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkWalking, xyPosNoWork4 
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkWalking, xyPosNoWork5 
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkWalking, xyPosNoWork6 
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkWalking, xyPosNoWork7 
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkWalking, xyPosNoWork8 
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkWalking, xyPosNoWork9 
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkWalking, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkWalking, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkWalking, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkWalking, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkWalking, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkWalking, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkWalking, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkWalking, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkWalking, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkWalking, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkWalking, xyPosNoWork20
				    .ENDIF

					.IF xyPosBogy0.x < 107
						INVOKE bogyWalking, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyWalking, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyWalking, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyWalking, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyWalking, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyWalking, xyPosBogy5
					.ENDIF

 00000474  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 0000047D  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR playing,
						SIZEOF playing,
						xyPos,
						ADDR cells_Written
 000004A3  E8 00000000 E		call ReadKey

					.IF ax == 1970h
 000004AE  66| C7 05			mov xyPos.x, 36
	   0000001E R
	   0024
 000004B7  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR paused,
						SIZEOF paused,
						xyPos,
						ADDR cells_Written
 000004DD			pauseLoop:
 000004DD  E8 00000000 E			call ReadKey
						.IF ax == 3920h
 000004E8  EB 02					jmp backToGame
						.ENDIF
 000004EA  EB F1				jmp pauseLoop
					.ENDIF

 000004EC			backToGame:

					.IF ax == 4800h
						INVOKE tankClear, xyPosTank
 000004FD  66| 83 2D				sub xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y < 5
 0000050F  66| C7 05					mov xyPosTank.y, 5
	   00000024 R
	   0005
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 5000h
						INVOKE tankClear, xyPosTank
 00000534  66| 83 05				add xyPosTank.y, 2
	   00000024 R 02
						.IF xyPosTank.y > 25
 00000546  66| C7 05					mov xyPosTank.y, 25
	   00000024 R
	   0019
						.ENDIF
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 4D00h
						.IF xyPosTank.y == 5
 0000056E  66| C7 05		            mov N0, 1
	   0000007A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 6
 00000581  66| C7 05		            mov N1, 1
	   0000007C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 7
 00000594  66| C7 05		            mov N2, 1
	   0000007E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 8
 000005A7  66| C7 05		            mov N3, 1
	   00000080 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 9
 000005BA  66| C7 05		            mov N4, 1
	   00000082 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 10
 000005CD  66| C7 05		            mov N5, 1
	   00000084 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 11
 000005E0  66| C7 05		            mov N6, 1
	   00000086 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 12
 000005F3  66| C7 05		            mov N7, 1
	   00000088 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 13
 00000606  66| C7 05		            mov N8, 1
	   0000008A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 14
 00000619  66| C7 05		            mov N9, 1
	   0000008C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 15
 0000062C  66| C7 05		            mov N10, 1
	   0000008E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 16
 0000063F  66| C7 05		            mov N11, 1
	   00000090 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 17
 00000652  66| C7 05		            mov N12, 1
	   00000092 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 18
 00000665  66| C7 05		            mov N13, 1
	   00000094 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 19
 00000678  66| C7 05		            mov N14, 1
	   00000096 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 20
 0000068B  66| C7 05		            mov N15, 1
	   00000098 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 21
 0000069E  66| C7 05		            mov N16, 1
	   0000009A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 22
 000006B1  66| C7 05		            mov N17, 1
	   0000009C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 23
 000006C4  66| C7 05		            mov N18, 1
	   0000009E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 24
 000006D7  66| C7 05		            mov N19, 1
	   000000A0 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 25
 000006EA  66| C7 05		            mov N20, 1
	   000000A2 R
	   0001
				        .ENDIF
					.ENDIF

 000006F3  50				push eax
 000006F4  B8 00000096			mov eax, 150
 000006F9  E8 00000000 E		call Delay
 000006FE  58				pop eax

					.IF xyPosBogy0.x < 107
						INVOKE bogyClear, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyClear, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyClear, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyClear, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyClear, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyClear, xyPosBogy5
					.ENDIF

					; clear no work
					.IF N0 == 1
				        INVOKE noWorkClear, xyPosNoWork0
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkClear, xyPosNoWork1
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkClear, xyPosNoWork2
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkClear, xyPosNoWork3
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkClear, xyPosNoWork4
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkClear, xyPosNoWork5
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkClear, xyPosNoWork6
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkClear, xyPosNoWork7
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkClear, xyPosNoWork8
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkClear, xyPosNoWork9
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkClear, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkClear, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkClear, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkClear, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkClear, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkClear, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkClear, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkClear, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkClear, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkClear, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkClear, xyPosNoWork20
				    .ENDIF

					
					INVOKE printGreenLine, xyPos

					.IF levelNum == 1
 0000094B  66| 83 2D				sub xyPosBogy0.x, 1
	   000000C8 R 01
 00000953  66| 83 2D				sub xyPosBogy1.x, 1
	   000000CC R 01
 0000095B  66| 83 2D				sub xyPosBogy2.x, 1
	   000000D0 R 01
 00000963  66| 83 2D				sub xyPosBogy3.x, 1
	   000000D4 R 01
 0000096B  66| 83 2D				sub xyPosBogy4.x, 1
	   000000D8 R 01
 00000973  66| 83 2D				sub xyPosBogy5.x, 1
	   000000DC R 01
					.ENDIF
					.IF levelNum == 2
 00000985  50					push eax
 00000986  B8 00000002				mov eax, 2
 0000098B  E8 00000000 E			call RandomRange
 00000990  40					inc eax
 00000991  66| 29 05				sub xyPosBogy0.x, ax
	   000000C8 R
 00000998  B8 00000002				mov eax, 2
 0000099D  E8 00000000 E			call RandomRange
 000009A2  40					inc eax
 000009A3  66| 29 05				sub xyPosBogy1.x, ax
	   000000CC R
 000009AA  B8 00000002				mov eax, 2
 000009AF  E8 00000000 E			call RandomRange
 000009B4  40					inc eax
 000009B5  66| 29 05				sub xyPosBogy2.x, ax
	   000000D0 R
 000009BC  B8 00000002				mov eax, 2
 000009C1  E8 00000000 E			call RandomRange
 000009C6  40					inc eax
 000009C7  66| 29 05				sub xyPosBogy3.x, ax
	   000000D4 R
 000009CE  B8 00000002				mov eax, 2
 000009D3  E8 00000000 E			call RandomRange
 000009D8  40					inc eax
 000009D9  66| 29 05				sub xyPosBogy4.x, ax
	   000000D8 R
 000009E0  B8 00000002				mov eax, 2
 000009E5  E8 00000000 E			call RandomRange
 000009EA  40					inc eax
 000009EB  66| 29 05				sub xyPosBogy5.x, ax
	   000000DC R
 000009F2  58					pop eax
					.ENDIF
					.IF levelNum == 3
 000009FD  50					push eax
 000009FE  B8 00000005				mov eax, 5
 00000A03  E8 00000000 E			call RandomRange
 00000A08  66| 29 05				sub xyPosBogy0.x, ax
	   000000C8 R
 00000A0F  B8 00000007				mov eax, 7
 00000A14  E8 00000000 E			call RandomRange
 00000A19  66| 29 05				sub xyPosBogy1.x, ax
	   000000CC R
 00000A20  B8 00000008				mov eax, 8
 00000A25  E8 00000000 E			call RandomRange
 00000A2A  66| 29 05				sub xyPosBogy2.x, ax
	   000000D0 R
 00000A31  B8 00000007				mov eax, 7
 00000A36  E8 00000000 E			call RandomRange
 00000A3B  66| 29 05				sub xyPosBogy3.x, ax
	   000000D4 R
 00000A42  B8 00000006				mov eax, 6
 00000A47  E8 00000000 E			call RandomRange
 00000A4C  66| 29 05				sub xyPosBogy4.x, ax
	   000000D8 R
 00000A53  B8 00000005				mov eax, 5
 00000A58  E8 00000000 E			call RandomRange
 00000A5D  66| 29 05				sub xyPosBogy5.x, ax
	   000000DC R
 00000A64  58					pop eax
					.ENDIF

					.IF N0 == 1
 00000A73  66| 83 05		        add xyPosNoWork0.x, 4
	   00000026 R 04
						.IF levelNum == 3
 00000A85  B8 00000003					mov eax, 3
 00000A8A  E8 00000000 E				call RandomRange
 00000A8F  66| 01 05					add xyPosNoWork0.x, ax
	   00000026 R
						.ENDIF
 00000A96  50			        push eax
 00000A97  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000A9D  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork0.x >= ax
 00000AAE  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 00000AB7  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
 00000AC0  66| 83 C0 06					add ax, 6
 00000AC4  66| BA 006C					mov dx, 108
 00000AC8  66| 2B D0					sub dx, ax
							.IF dx > 50
 00000AD1  66| BA 0032						mov dx, 50
							.ENDIF
 00000AD5  66| 01 15		            add scoreNum, dx 
	   00000DC6 R
 00000ADC  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000B04  BB 00000003		                mov ebx, 3
 00000B09  E9 FFFFF51F		                jmp Ex
				            .ENDIF
							.IF levelNum == 1
 00000B18  66| A1						mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
							.ENDIF
							.IF levelNum == 2
 00000B28  66| A1						mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
							.ENDIF
							.IF levelNum == 3
 00000B38  66| A1						mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
							.ENDIF
 00000B3E  66| A3					mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 00000B44  58			        pop eax
				        .IF xyPosNoWork0.x > 106
 00000B4F  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 00000B58  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N1 == 1
 00000B6F  66| 83 05		        add xyPosNoWork1.x, 4
	   0000002A R 04
				        .IF levelNum == 3
 00000B81  B8 00000003					mov eax, 3
 00000B86  E8 00000000 E				call RandomRange
 00000B8B  66| 01 05					add xyPosNoWork1.x, ax
	   0000002A R
						.ENDIF
 00000B92  50					push eax
 00000B93  66| A1		        mov ax, xyPosBogy0.x
	   000000C8 R
 00000B99  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork1.x >= ax
 00000BAA  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000BB3  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
 00000BBC  66| 83 C0 06		            add ax, 6
 00000BC0  66| BA 006C					mov dx, 108
 00000BC4  66| 2B D0					sub dx, ax
							.IF dx > 50
 00000BCD  66| BA 0032						mov dx, 50
							.ENDIF
 00000BD1  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00000BD8  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000C00  BB 00000003		                mov ebx, 3
 00000C05  E9 FFFFF423		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000C14  66| A1		                mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
				            .ENDIF
				            .IF levelNum == 2
 00000C24  66| A1		                mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
				            .ENDIF
				            .IF levelNum == 3
 00000C34  66| A1		                mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
				            .ENDIF
 00000C3A  66| A3		            mov xyPosBogy0.x, ax
	   000000C8 R
				        .ENDIF
 00000C40  58			        pop eax
				        .IF xyPosNoWork1.x > 106
 00000C4B  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000C54  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N2 == 1
 00000C67  66| 83 05		        add xyPosNoWork2.x, 4
	   0000002E R 04
				        .IF levelNum == 3
 00000C79  B8 00000003					mov eax, 3
 00000C7E  E8 00000000 E				call RandomRange
 00000C83  66| 01 05					add xyPosNoWork2.x, ax
	   0000002E R
						.ENDIF
						.IF xyPosNoWork2.x > 106
 00000C94  66| C7 05		            mov N2, 0
	   0000007E R
	   0000
 00000C9D  66| C7 05		            mov xyPosNoWork2.x, 15
	   0000002E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N3 == 1
 00000CB4  66| 83 05		        add xyPosNoWork3.x, 4
	   00000032 R 04
						.IF levelNum == 3
 00000CC6  B8 00000003					mov eax, 3
 00000CCB  E8 00000000 E				call RandomRange
 00000CD0  66| 01 05					add xyPosNoWork3.x, ax
	   00000032 R
						.ENDIF
 00000CD7  50			        push eax
 00000CD8  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000CDE  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork3.x >= ax
 00000CEF  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000CF8  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
 00000D01  66| 83 C0 06		            add ax, 6
 00000D05  66| BA 006C					mov dx, 108
 00000D09  66| 2B D0					sub dx, ax
							.IF dx > 50
 00000D12  66| BA 0032						mov dx, 50
							.ENDIF
 00000D16  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00000D1D  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000D45  BB 00000003		                mov ebx, 3
 00000D4A  E9 FFFFF2DE		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000D59  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000D69  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000D79  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000D7F  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000D85  58			        pop eax
				        .IF xyPosNoWork3.x > 106
 00000D90  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000D99  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N4 == 1
 00000DB0  66| 83 05		        add xyPosNoWork4.x, 4
	   00000036 R 04
						.IF levelNum == 3
 00000DC2  B8 00000003					mov eax, 3
 00000DC7  E8 00000000 E				call RandomRange
 00000DCC  66| 01 05					add xyPosNoWork4.x, ax
	   00000036 R
						.ENDIF
 00000DD3  50			        push eax
 00000DD4  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000DDA  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork4.x >= ax
 00000DEB  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000DF4  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
 00000DFD  66| 83 C0 06		            add ax, 6
 00000E01  66| BA 006C					mov dx, 108
 00000E05  66| 2B D0					sub dx, ax
							.IF dx > 50
 00000E0E  66| BA 0032						mov dx, 50
							.ENDIF
 00000E12  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00000E19  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000E41  BB 00000003		                mov ebx, 3
 00000E46  E9 FFFFF1E2		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000E55  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000E65  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000E75  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000E7B  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000E81  58			        pop eax
				        .IF xyPosNoWork4.x > 106
 00000E8C  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 00000E95  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N5 == 1
 00000EAC  66| 83 05		        add xyPosNoWork5.x, 4
	   0000003A R 04
				        .IF levelNum == 3
 00000EBE  B8 00000003					mov eax, 3
 00000EC3  E8 00000000 E				call RandomRange
 00000EC8  66| 01 05					add xyPosNoWork5.x, ax
	   0000003A R
						.ENDIF
 00000ECF  50					push eax
 00000ED0  66| A1		        mov ax, xyPosBogy1.x
	   000000CC R
 00000ED6  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork5.x >= ax
 00000EE7  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000EF0  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
 00000EF9  66| 83 C0 06		            add ax, 6
 00000EFD  66| BA 006C					mov dx, 108
 00000F01  66| 2B D0					sub dx, ax
							.IF dx > 50
 00000F0A  66| BA 0032						mov dx, 50
							.ENDIF
 00000F0E  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00000F15  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000F3D  BB 00000003		                mov ebx, 3
 00000F42  E9 FFFFF0E6		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00000F51  66| A1		                mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
				            .ENDIF
				            .IF levelNum == 2
 00000F61  66| A1		                mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
				            .ENDIF
				            .IF levelNum == 3
 00000F71  66| A1		                mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
				            .ENDIF
 00000F77  66| A3		            mov xyPosBogy1.x, ax
	   000000CC R
				        .ENDIF
 00000F7D  58			        pop eax
				        .IF xyPosNoWork5.x > 106
 00000F88  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000F91  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N6 == 1
 00000FA4  66| 83 05		        add xyPosNoWork6.x, 4
	   0000003E R 04
						.IF levelNum == 3
 00000FB6  B8 00000003					mov eax, 3
 00000FBB  E8 00000000 E				call RandomRange
 00000FC0  66| 01 05					add xyPosNoWork5.x, ax
	   0000003A R
						.ENDIF
				        .IF xyPosNoWork6.x > 106
 00000FD1  66| C7 05		            mov N6, 0
	   00000086 R
	   0000
 00000FDA  66| C7 05		            mov xyPosNoWork6.x, 15
	   0000003E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N7 == 1
 00000FF1  66| 83 05		        add xyPosNoWork7.x, 4
	   00000042 R 04
				        .IF levelNum == 3
 00001003  B8 00000003					mov eax, 3
 00001008  E8 00000000 E				call RandomRange
 0000100D  66| 01 05					add xyPosNoWork7.x, ax
	   00000042 R
						.ENDIF
 00001014  50					push eax
 00001015  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 0000101B  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork7.x >= ax
 0000102C  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00001035  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
 0000103E  66| 83 C0 06		            add ax, 6
 00001042  66| BA 006C					mov dx, 108
 00001046  66| 2B D0					sub dx, ax
							.IF dx > 50
 0000104F  66| BA 0032						mov dx, 50
							.ENDIF
 00001053  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 0000105A  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001082  BB 00000003		                mov ebx, 3
 00001087  E9 FFFFEFA1		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001096  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 000010A6  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 000010B6  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 000010BC  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 000010C2  58			        pop eax
				        .IF xyPosNoWork7.x > 106
 000010CD  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 000010D6  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N8 == 1
 000010ED  66| 83 05		        add xyPosNoWork8.x, 4
	   00000046 R 04
				        .IF levelNum == 3
 000010FF  B8 00000003					mov eax, 3
 00001104  E8 00000000 E				call RandomRange
 00001109  66| 01 05					add xyPosNoWork8.x, ax
	   00000046 R
						.ENDIF
 00001110  50					push eax
 00001111  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00001117  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork8.x >= ax
 00001128  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00001131  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
 0000113A  66| 83 C0 06		            add ax, 6
 0000113E  66| BA 006C					mov dx, 108
 00001142  66| 2B D0					sub dx, ax
							.IF dx > 50
 0000114B  66| BA 0032						mov dx, 50
							.ENDIF
 0000114F  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001156  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000117E  BB 00000003		                mov ebx, 3
 00001183  E9 FFFFEEA5		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001192  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 000011A2  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 000011B2  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 000011B8  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 000011BE  58			        pop eax
				        .IF xyPosNoWork8.x > 106
 000011C9  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 000011D2  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N9 == 1
 000011E9  66| 83 05		        add xyPosNoWork9.x, 4
	   0000004A R 04
				        .IF levelNum == 3
 000011FB  B8 00000003					mov eax, 3
 00001200  E8 00000000 E				call RandomRange
 00001205  66| 01 05					add xyPosNoWork9.x, ax
	   0000004A R
						.ENDIF
 0000120C  50					push eax
 0000120D  66| A1		        mov ax, xyPosBogy2.x
	   000000D0 R
 00001213  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork9.x >= ax
 00001224  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 0000122D  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
 00001236  66| 83 C0 06		            add ax, 6
 0000123A  66| BA 006C					mov dx, 108
 0000123E  66| 2B D0					sub dx, ax
							.IF dx > 50
 00001247  66| BA 0032						mov dx, 50
							.ENDIF
 0000124B  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001252  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000127A  BB 00000003		                mov ebx, 3
 0000127F  E9 FFFFEDA9		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000128E  66| A1		                mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
				            .ENDIF
				            .IF levelNum == 2
 0000129E  66| A1		                mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
				            .ENDIF
				            .IF levelNum == 3
 000012AE  66| A1		                mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
				            .ENDIF
 000012B4  66| A3		            mov xyPosBogy2.x, ax
	   000000D0 R
				        .ENDIF
 000012BA  58			        pop eax
				        .IF xyPosNoWork9.x > 106
 000012C5  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 000012CE  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N10 == 1
 000012E1  66| 83 05				add xyPosNoWork10.x, 4
	   0000004E R 04
						.IF levelNum == 3
 000012F3  B8 00000003					mov eax, 3
 000012F8  E8 00000000 E				call RandomRange
 000012FD  66| 01 05					add xyPosNoWork10.x, ax
	   0000004E R
						.ENDIF
						.IF xyPosNoWork10.x > 106
 0000130E  66| C7 05					mov N10, 0
	   0000008E R
	   0000
 00001317  66| C7 05					mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
						.ENDIF
					.ENDIF

					.IF N11 == 1
 0000132E  66| 83 05				add xyPosNoWork11.x, 4
	   00000052 R 04
						.IF levelNum == 3
 00001340  B8 00000003					mov eax, 3
 00001345  E8 00000000 E				call RandomRange
 0000134A  66| 01 05					add xyPosNoWork11.x, ax
	   00000052 R
						.ENDIF
 00001351  50					push eax
 00001352  66| A1				mov ax, xyPosBogy3.x
	   000000D4 R
 00001358  66| 83 E8 06				sub ax, 6
						.IF xyPosNoWork11.x >= ax
 00001369  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00001372  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 0000137B  66| 83 C0 06					add ax, 6
 0000137F  66| BA 006C					mov dx, 108
 00001383  66| 2B D0					sub dx, ax
							.IF dx > 50
 0000138C  66| BA 0032						mov dx, 50
							.ENDIF
 00001390  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001397  66| 83 2D					sub bogysNum, 1
	   00000DD6 R 01
							INVOKE printScore, xyPos
							INVOKE printBogys, xyPos
							.IF bogysNum == 0
 000013BF  BB 00000003						mov ebx, 3
 000013C4  E9 FFFFEC64						jmp Ex
							.ENDIF

							.IF levelNum == 1
 000013D3  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000013E3  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 000013F3  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 000013F9  66| A3					mov xyPosBogy3.x, ax
	   000000D4 R
						.ENDIF
 000013FF  58					pop eax
						.IF xyPosNoWork11.x > 106
 0000140A  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00001413  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
						.ENDIF
					.ENDIF

					.IF N12 == 1
 0000142A  66| 83 05		        add xyPosNoWork12.x, 4
	   00000056 R 04
						.IF levelNum == 3
 0000143C  B8 00000003					mov eax, 3
 00001441  E8 00000000 E				call RandomRange
 00001446  66| 01 05					add xyPosNoWork12.x, ax
	   00000056 R
						.ENDIF
 0000144D  50			        push eax
 0000144E  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 00001454  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork12.x >= ax
 00001465  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 0000146E  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 00001477  66| 83 C0 06		            add ax, 6
 0000147B  66| BA 006C					mov dx, 108
 0000147F  66| 2B D0					sub dx, ax
							.IF dx > 50
 00001488  66| BA 0032						mov dx, 50
							.ENDIF
 0000148C  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001493  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000014BB  BB 00000003		                mov ebx, 3
 000014C0  E9 FFFFEB68		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 000014CF  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000014DF  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 000014EF  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 000014F5  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 000014FB  58			        pop eax
				        .IF xyPosNoWork12.x > 106
 00001506  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 0000150F  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N13 == 1
 00001526  66| 83 05		        add xyPosNoWork13.x, 4
	   0000005A R 04
						.IF levelNum == 3
 00001538  B8 00000003					mov eax, 3
 0000153D  E8 00000000 E				call RandomRange
 00001542  66| 01 05					add xyPosNoWork13.x, ax
	   0000005A R
						.ENDIF
 00001549  50			        push eax
 0000154A  66| A1		        mov ax, xyPosBogy3.x
	   000000D4 R
 00001550  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork13.x >= ax
 00001561  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 0000156A  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 00001573  66| 83 C0 06		            add ax, 6
 00001577  66| BA 006C					mov dx, 108
 0000157B  66| 2B D0					sub dx, ax
							.IF dx > 50
 00001584  66| BA 0032						mov dx, 50
							.ENDIF
 00001588  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 0000158F  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000015B7  BB 00000003		                mov ebx, 3
 000015BC  E9 FFFFEA6C		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 000015CB  66| A1		                mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
				            .ENDIF
				            .IF levelNum == 2
 000015DB  66| A1		                mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
				            .ENDIF
				            .IF levelNum == 3
 000015EB  66| A1		                mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
				            .ENDIF
 000015F1  66| A3		            mov xyPosBogy3.x, ax
	   000000D4 R
				        .ENDIF
 000015F7  58			        pop eax
				        .IF xyPosNoWork13.x > 106
 00001602  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 0000160B  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N14 == 1
 0000161E  66| 83 05		        add xyPosNoWork14.x, 4
	   0000005E R 04
						.IF levelNum == 3
 00001630  B8 00000003					mov eax, 3
 00001635  E8 00000000 E				call RandomRange
 0000163A  66| 01 05					add xyPosNoWork14.x, ax
	   0000005E R
						.ENDIF
				        .IF xyPosNoWork14.x > 106
 0000164B  66| C7 05		            mov N14, 0
	   00000096 R
	   0000
 00001654  66| C7 05		            mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N15 == 1
 0000166B  66| 83 05		        add xyPosNoWork15.x, 4
	   00000062 R 04
				        .IF levelNum == 3
 0000167D  B8 00000003					mov eax, 3
 00001682  E8 00000000 E				call RandomRange
 00001687  66| 01 05					add xyPosNoWork15.x, ax
	   00000062 R
						.ENDIF
 0000168E  50					push eax
 0000168F  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 00001695  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork15.x >= ax
 000016A6  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 000016AF  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 000016B8  66| 83 C0 06		            add ax, 6
 000016BC  66| BA 006C					mov dx, 108
 000016C0  66| 2B D0					sub dx, ax
							.IF dx > 50
 000016C9  66| BA 0032						mov dx, 50
							.ENDIF
 000016CD  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 000016D4  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000016FC  BB 00000003		                mov ebx, 3
 00001701  E9 FFFFE927		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001710  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 00001720  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 00001730  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 00001736  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 0000173C  58			        pop eax
				        .IF xyPosNoWork15.x > 106
 00001747  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 00001750  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
				        .ENDIF
				    .ENDIF
					
					.IF N16 == 1
 00001767  66| 83 05		        add xyPosNoWork16.x, 4
	   00000066 R 04
				        .IF levelNum == 3
 00001779  B8 00000003					mov eax, 3
 0000177E  E8 00000000 E				call RandomRange
 00001783  66| 01 05					add xyPosNoWork16.x, ax
	   00000066 R
						.ENDIF
 0000178A  50					push eax
 0000178B  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 00001791  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork16.x >= ax
 000017A2  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 000017AB  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 000017B4  66| 83 C0 06		            add ax, 6
 000017B8  66| BA 006C					mov dx, 108
 000017BC  66| 2B D0					sub dx, ax
							.IF dx > 50
 000017C5  66| BA 0032						mov dx, 50
							.ENDIF
 000017C9  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 000017D0  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000017F8  BB 00000003		                mov ebx, 3
 000017FD  E9 FFFFE82B		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 0000180C  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 0000181C  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 0000182C  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 00001832  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 00001838  58			        pop eax
				        .IF xyPosNoWork16.x > 106
 00001843  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 0000184C  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N17 == 1
 00001863  66| 83 05		        add xyPosNoWork17.x, 4
	   0000006A R 04
				        .IF levelNum == 3
 00001875  B8 00000003					mov eax, 3
 0000187A  E8 00000000 E				call RandomRange
 0000187F  66| 01 05					add xyPosNoWork17.x, ax
	   0000006A R
						.ENDIF
 00001886  50					push eax
 00001887  66| A1		        mov ax, xyPosBogy4.x
	   000000D8 R
 0000188D  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork17.x >= ax
 0000189E  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 000018A7  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 000018B0  66| 83 C0 06		            add ax, 6
 000018B4  66| BA 006C					mov dx, 108
 000018B8  66| 2B D0					sub dx, ax
							.IF dx > 50
 000018C1  66| BA 0032						mov dx, 50
							.ENDIF
 000018C5  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 000018CC  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000018F4  BB 00000003		                mov ebx, 3
 000018F9  E9 FFFFE72F		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001908  66| A1		                mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
				            .ENDIF
				            .IF levelNum == 2
 00001918  66| A1		                mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
				            .ENDIF
				            .IF levelNum == 3
 00001928  66| A1		                mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
				            .ENDIF
 0000192E  66| A3		            mov xyPosBogy4.x, ax
	   000000D8 R
				        .ENDIF
 00001934  58			        pop eax
				        .IF xyPosNoWork17.x > 106
 0000193F  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00001948  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N18 == 1
 0000195B  66| 83 05		        add xyPosNoWork18.x, 4
	   0000006E R 04
						.IF levelNum == 3
 0000196D  B8 00000003					mov eax, 3
 00001972  E8 00000000 E				call RandomRange
 00001977  66| 01 05					add xyPosNoWork18.x, ax
	   0000006E R
						.ENDIF
				        .IF xyPosNoWork18.x > 106
 00001988  66| C7 05		            mov N18, 0
	   0000009E R
	   0000
 00001991  66| C7 05		            mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N19 == 1
 000019A8  66| 83 05		        add xyPosNoWork19.x, 4
	   00000072 R 04
				        .IF levelNum == 3
 000019BA  B8 00000003					mov eax, 3
 000019BF  E8 00000000 E				call RandomRange
 000019C4  66| 01 05					add xyPosNoWork19.x, ax
	   00000072 R
						.ENDIF
 000019CB  50					push eax
 000019CC  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 000019D2  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork19.x >= ax
 000019E3  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 000019EC  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 000019F5  66| 83 C0 06		            add ax, 6
 000019F9  66| BA 006C					mov dx, 108
 000019FD  66| 2B D0					sub dx, ax
							.IF dx > 50
 00001A06  66| BA 0032						mov dx, 50
							.ENDIF
 00001A0A  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001A11  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001A39  BB 00000003		                mov ebx, 3
 00001A3E  E9 FFFFE5EA		                jmp Ex
				            .ENDIF

							.IF levelNum == 1
 00001A4D  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 00001A5D  66| A1		                mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
				            .ENDIF
				            .IF levelNum == 3
 00001A6D  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
 00001A73  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 00001A79  58			        pop eax
				        .IF xyPosNoWork19.x > 106
 00001A84  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 00001A8D  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N20 == 1
 00001AA4  66| 83 05		        add xyPosNoWork20.x, 4
	   00000076 R 04
				        .IF levelNum == 3
 00001AB6  B8 00000003					mov eax, 3
 00001ABB  E8 00000000 E				call RandomRange
 00001AC0  66| 01 05					add xyPosNoWork20.x, ax
	   00000076 R
						.ENDIF
 00001AC7  50					push eax
 00001AC8  66| A1		        mov ax, xyPosBogy5.x
	   000000DC R
 00001ACE  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork20.x >= ax
 00001ADF  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001AE8  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
 00001AF1  66| 83 C0 06		            add ax, 6
 00001AF5  66| BA 006C					mov dx, 108
 00001AF9  66| 2B D0					sub dx, ax
							.IF dx > 50
 00001B02  66| BA 0032						mov dx, 50
							.ENDIF
 00001B06  66| 01 15		            add scoreNum, dx
	   00000DC6 R
 00001B0D  66| 83 2D		            sub bogysNum, 1
	   00000DD6 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00001B35  BB 00000003		                mov ebx, 3
 00001B3A  E9 FFFFE4EE		                jmp Ex
				            .ENDIF
				            
							.IF levelNum == 1
 00001B49  66| A1		                mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
				            .ENDIF
				            .IF levelNum == 2
 00001B59  66| A1		                mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
				            .ENDIF
				            .IF levelNum == 3
 00001B69  66| A1		                mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
				            .ENDIF
 00001B6F  66| A3		            mov xyPosBogy5.x, ax
	   000000DC R
				        .ENDIF
 00001B75  58			        pop eax
				        .IF xyPosNoWork20.x > 106
 00001B80  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001B89  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF xyPosBogy0.x <= 16
 00001B9C  50					push eax
						.IF levelNum == 1
 00001BA7  66| A1					mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
						.ENDIF
						.IF levelNum == 2
 00001BB7  66| A1					mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
						.ENDIF
						.IF levelNum == 3
 00001BC7  66| A1					mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
						.ENDIF
 00001BCD  66| A3				mov xyPosBogy0.x, ax
	   000000C8 R
 00001BD3  58					pop eax
 00001BD4  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001BF1  BB 00000003					mov ebx, 3 ;之後要改3
 00001BF6  E9 FFFFE432					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy1.x <= 16
 00001C05  50					push eax
						.IF levelNum == 1
 00001C10  66| A1					mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
						.ENDIF
						.IF levelNum == 2
 00001C20  66| A1					mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
						.ENDIF
						.IF levelNum == 3
 00001C30  66| A1					mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
						.ENDIF
 00001C36  66| A3				mov xyPosBogy1.x, ax
	   000000CC R
 00001C3C  58					pop eax
 00001C3D  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001C5A  BB 00000003					mov ebx, 3 ;之後要改3
 00001C5F  E9 FFFFE3C9					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy2.x <= 16
 00001C6E  50					push eax
						.IF levelNum == 1
 00001C79  66| A1					mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
						.ENDIF
						.IF levelNum == 2
 00001C89  66| A1					mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
						.ENDIF
						.IF levelNum == 3
 00001C99  66| A1					mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
						.ENDIF
 00001C9F  66| A3				mov xyPosBogy2.x, ax
	   000000D0 R
 00001CA5  58					pop eax
 00001CA6  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001CC3  BB 00000003					mov ebx, 3 ;之後要改3
 00001CC8  E9 FFFFE360					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy3.x <= 16
 00001CD7  50					push eax
						.IF levelNum == 1
 00001CE2  66| A1					mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
						.ENDIF
						.IF levelNum == 2
 00001CF2  66| A1					mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
						.ENDIF
						.IF levelNum == 3
 00001D02  66| A1					mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
						.ENDIF
 00001D08  66| A3				mov xyPosBogy3.x, ax
	   000000D4 R
 00001D0E  58					pop eax
 00001D0F  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001D2C  BB 00000003					mov ebx, 3 ;之後要改3
 00001D31  E9 FFFFE2F7					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy4.x <= 16
 00001D40  50					push eax
						.IF levelNum == 1
 00001D4B  66| A1					mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
						.ENDIF
						.IF levelNum == 2
 00001D5B  66| A1					mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
						.ENDIF
						.IF levelNum == 3
 00001D6B  66| A1					mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
						.ENDIF
 00001D71  66| A3				mov xyPosBogy4.x, ax
	   000000D8 R
 00001D77  58					pop eax
 00001D78  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001D95  BB 00000003					mov ebx, 3 ;之後要改3
 00001D9A  E9 FFFFE28E					jmp Ex		
						.ENDIF
					.ENDIF

					.IF xyPosBogy5.x <= 16
 00001DA9  50					push eax
						.IF levelNum == 1
 00001DB4  66| A1					mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
						.ENDIF
						.IF levelNum == 2
 00001DC4  66| A1					mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
						.ENDIF
						.IF levelNum == 3
 00001DD4  66| A1					mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
						.ENDIF
 00001DDA  66| A3				mov xyPosBogy5.x, ax
	   000000DC R
 00001DE0  58					pop eax
 00001DE1  66| 83 2D				sub livesNum, 1
	   00000DCE R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001DFE  BB 00000003					mov ebx, 3 ;之後要改3
 00001E03  E9 FFFFE225					jmp Ex		
						.ENDIF
					.ENDIF
					
 00001E08  E9 FFFFE425			jmp GameLoop
 00001E0D  E8 00000000 E		call WaitMsg

 00001E12			ExitProgram:
					exit
 00001E19			main ENDP

 00001E19			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 00001E1F  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 00001E26  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
				    	consoleHandle,
				        ADDR cursorInfo

					; 清空畫面
 00001E3C  E8 00000000 E		call Clrscr

 00001E41  B9 00000006			mov ecx, 6
 00001E46  BE 00000000			mov esi, 0

				; 印開始畫面的標題
 00001E4B			ShowStartStr:
 00001E4B  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR startColor,
						108,
						xyPos,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108,
						xyPos,
						ADDR cells_Written

 00001E88  83 C6 6C			add esi, 108
 00001E8B  66| FF 05			inc xyPos.y
	   00000020 R
 00001E92  59				pop ecx
 00001E93  E2 B6			loop ShowStartStr

				; 印開始畫面的選項
 00001E95			PrintOption:
 00001E95  66| 83 05		    add xyPos.y, 7
	   00000020 R 07
 00001E9D  66| 83 05		    add xyPos.x, 48
	   0000001E R 30

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR enterMsg,
				        SIZEOF enterMsg,
				        xyPos,
				        ADDR cells_Written

 00001EC2  66| 83 05		    add xyPos.y, 2
	   00000020 R 02

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR LeaveMsg,
				        SIZEOF LeaveMsg,
				        xyPos,
				        ADDR cells_Written

 00001EE7  B9 00000007			mov ecx, 7
 00001EEC  BE 00000000			mov esi, 0
 00001EF1  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 00001EFA  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00001F03			PrintStartTankColor:
 00001F03  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR [startTankColor + esi],
						24,
						xyPos,
						ADDR cells_Written

 00001F23  83 C6 30			add esi, 48
 00001F26  66| FF 05			inc xyPos.y
	   00000020 R
 00001F2D  59				pop ecx
 00001F2E  E2 D3			loop PrintStartTankColor

 00001F30  B9 00000007			mov ecx, 7
 00001F35  BE 00000000			mov esi, 0
 00001F3A  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 00001F43  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00001F4C			PrintStartTank:
 00001F4C  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written

 00001F6C  83 C6 18			add esi, 24
 00001F6F  66| FF 05			inc xyPos.y
	   00000020 R
 00001F76  59				pop ecx
 00001F77  E2 D3			loop PrintStartTank

 00001F79  B9 00000005			mov ecx, 5
 00001F7E  BE 00000000			mov esi, 0
 00001F83  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 00001F8C  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001F95			PrintStartBogyColor:
 00001F95  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR [startBogyColor + esi],
						7,
						xyPos,
						ADDR cells_Written

 00001FB5  83 C6 0E			add esi, 14
 00001FB8  66| FF 05			inc xyPos.y
	   00000020 R
 00001FBF  59				pop ecx
 00001FC0  E2 D3			loop PrintStartBogyColor

 00001FC2  B9 00000005			mov ecx, 5
 00001FC7  BE 00000000			mov esi, 0
 00001FCC  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 00001FD5  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001FDE			PrintStartBogy:
 00001FDE  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written

 00001FFE  83 C6 07			add esi, 7
 00002001  66| FF 05			inc xyPos.y
	   00000020 R
 00002008  59				pop ecx
 00002009  E2 D3			loop PrintStartBogy

 0000200B			StartOrNot:
 0000200B  E8 00000000 E	    call ReadChar

					.IF ax == 1265h     ;press e to start game
 00002016  E8 00000000 E	        call Clrscr
 0000201B  66| C7 05				mov xyPos.x, 28
	   0000001E R
	   001C
 00002024  66| C7 05				mov xyPos.y, 7
	   00000020 R
	   0007

 0000202D  B9 00000011				mov ecx, 17
 00002032  BE 00000000				mov esi, 0
 00002037  EB 0F				jmp PrintIntro
				    .ENDIF
				    .IF ax == 266ch     ;press l to leave
 0000203F  BB 00000004				mov ebx, 4
				        ret
				    .ENDIF
 00002046  EB C3			jmp StartOrNot

 00002048			PrintIntro:
 00002048  51				push ecx
					.IF xyPos.y == 8
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF

					.IF xyPos.y == 15
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF

					.IF xyPos.y == 20
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written

 000020DD  83 C6 41			add esi, 65
 000020E0  66| FF 05			inc xyPos.y
	   00000020 R
 000020E7  59				pop ecx
 000020E8  66| 49			dec cx
 000020EA  66| 83 F9 00		    cmp cx, 0
 000020EE  0F 85 FFFFFF54	    jne PrintIntro

 000020F4			GameOrNot:
 000020F4  E8 00000000 E	    call ReadChar
					.IF ax == 3920h     ;press space to start game
 000020FF  E8 00000000 E	        call Clrscr
						INVOKE printGameStage
 00002109  BB 00000001				mov ebx, 1
 0000210E  EB 02				jmp ExitFunc
					.ENDIF
 00002110  EB E2			jmp GameOrNot

 00002112			ExitFunc:
					ret
 00002114			printStartScene ENDP

 00002114			printGameStage PROC
 00002114				PrintGameSceneTop:
 00002114  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 0000211D  66| C7 05			mov xyPos.y, 4
	   00000020 R
	   0004
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00002143  66| FF 05			inc xyPos.y
	   00000020 R

 0000214A  B9 00000018			mov ecx, 24
 0000214F			PrintGameScene:
 0000214F  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 0000216D  66| FF 05			inc xyPos.y
	   00000020 R
 00002174  59				pop ecx
 00002175  E2 D8			loop PrintGameScene

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 00002194  66| FF 05			inc xyPos.y
	   00000020 R

					INVOKE printGreenLine, xyPos
					
 000021A6			PrintBar:
 000021A6  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 000021AF  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written

					INVOKE printLevel, xyPos

 000021E0  66| C7 05			mov xyPos.x, 29
	   0000001E R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written
					
 00002206  66| C7 05			mov xyPos.x, 56
	   0000001E R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

					INVOKE printScore, xyPos

 00002237  66| C7 05			mov xyPos.x, 80
	   0000001E R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

					INVOKE printLives, xyPos

 00002268  66| C7 05			mov xyPos.x, 104
	   0000001E R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

					INVOKE printBogys, xyPos
 00002299  C3				ret
 0000229A			printGameStage ENDP

 0000229A			printEndScene PROC
 0000229A  66| C7 05			mov xyPos.x, 40
	   0000001E R
	   0028
 000022A3  66| C7 05			mov xyPos.y, 5
	   00000020 R
	   0005
 000022AC  B9 00000006			mov ecx, 6
 000022B1  BE 00000000			mov esi, 0
					.IF bogysNum == 0
 000022C0			printWin:
 000022C0  51					push ecx
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR winColor,
							36,
							xyPos,
							ADDR cells_Written
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [winStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 000022FD  59					pop ecx
 000022FE  83 C6 24				add esi, 36
 00002301  66| FF 05				inc xyPos.y
	   00000020 R
 00002308  E2 B6				loop printWin
 0000230A  66| B8 000A				mov ax, 10
 0000230E  66| F7 25				mul livesNum
	   00000DCE R
 00002315  66| 01 05				add scoreNum, ax
	   00000DC6 R
					.ENDIF

					.IF livesNum == 0
 00002326			printLose:
 00002326  51					push ecx
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR loseColor,
							36,
							xyPos,
							ADDR cells_Written
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [loseStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 00002363  59					pop ecx
 00002364  83 C6 24				add esi, 36
 00002367  66| FF 05				inc xyPos.y
	   00000020 R
 0000236E  E2 B6				loop printLose
						
 00002370  C6 05 00000D98 R			mov score, 0
	   00
					.ENDIF

 00002377  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F
 00002380  66| C7 05			mov xyPos.x, 32
	   0000001E R
	   0020
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

 000023A6  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 000023AE  66| 8B 15			mov dx, scoreNum
	   00000DC6 R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPos,
						ADDR cells_Written

 000023DC  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

 00002401  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00002409  66| 8B 15			mov dx, livesNum
	   00000DCE R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPos,
						ADDR cells_Written

 00002437  66| 83 05			add xyPos.x, 15
	   0000001E R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

 0000245C  66| 83 05			add xyPos.x, 7
	   0000001E R 07
 00002464  66| 8B 15			mov dx, bogysNum
	   00000DD6 R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPos,
						ADDR cells_Written

 00002492  66| 83 05			add xyPos.y, 3
	   00000020 R 03
 0000249A  66| C7 05			mov xyPos.x, 50
	   0000001E R
	   0032
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR restart,
						SIZEOF restart,
						xyPos,
						ADDR cells_Written

 000024C0  66| 83 05			add xyPos.y, 2
	   00000020 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg,
						xyPos,
						ADDR cells_Written

					.IF bogysNum == 0
 000024EF  66| 83 05				add xyPos.y, 2
	   00000020 R 02
						.IF levelNum < 3
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR nextLevel,
								SIZEOF nextLevel,
								xyPos,
								ADDR cells_Written
						.ENDIF
						.IF levelNum == 3
 00002528  66| 83 2D					sub xyPos.x, 15
	   0000001E R 0F
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR finalColor,
								50,
								xyPos,
								ADDR cells_Written
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR finalMsg,
								SIZEOF finalMsg,
								xyPos,
								ADDR cells_Written
						.ENDIF
					.ENDIF

 0000256A			restartOrLeave:
 0000256A  E8 00000000 E		call ReadChar
					; restart
					.IF ax == 1372h
 00002575  66| A1				mov ax, livesNumInLevel
	   00000DD0 R
 0000257B  66| A3				mov livesNum, ax
	   00000DCE R

 00002581  66| A1				mov ax, scoreNumInLevel
	   00000DC8 R
 00002587  66| A3				mov scoreNum, ax
	   00000DC6 R
 0000258D  BB 00000001				mov ebx, 1
 00002592  E8 00000000 E			call Clrscr
 00002597  EB 37				jmp ExitEndScene
					.ENDIF
					; exit
					.IF ax == 266ch
 0000259F  BB 00000004				mov ebx, 4
 000025A4  EB 2A				jmp ExitEndScene
					.ENDIF
					; next level
					.IF bogysNum == 0
						.IF ax == 316eh
 000025B6  BB 00000001					mov ebx, 1
							.IF levelNum < 3
 000025C5  66| FF 05						inc levelNum
	   00000DB0 R
							.ENDIF
 000025CC  EB 02					jmp ExitEndScene
						.ENDIF
					.ENDIF
 000025CE  EB 9A			jmp restartOrLeave

 000025D0			ExitEndScene:
 000025D0  C3				ret
 000025D1			printEndScene ENDP

 000025D1			printLevel PROC,
					xyPosInit:COORD
 000025D4  66| C7 45 08			mov xyPosInit.x, 12
	   000C
 000025DA  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 000025E0  66| 8B 15			mov dx, levelNum
	   00000DB0 R
					INVOKE decStrLevel, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR levelStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 0000260F			printLevel ENDP

 0000260F			printScore PROC,
					xyPosInit:COORD
 00002612  66| C7 45 08			mov xyPosInit.x, 63
	   003F
 00002618  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000261E  66| 8B 15			mov dx, scoreNum
	   00000DC6 R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 0000264D			printScore ENDP

 0000264D			printLives PROC,
					xyPosInit:COORD
 00002650  66| C7 45 08			mov xyPosInit.x, 87
	   0057
 00002656  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000265C  66| 8B 15			mov dx, livesNum
	   00000DCE R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 0000268B			printLives ENDP

 0000268B			printBogys PROC,
					xyPosInit:COORD
 0000268E  66| C7 45 08			mov xyPosInit.x, 111
	   006F
 00002694  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000269A  66| 8B 15			mov dx, bogysNum
	   00000DD6 R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 000026C9			printBogys ENDP

 000026C9			initialLevelBogyPos PROC
 000026C9  50				push eax

				    .IF levelNum == 1
 000026D4  66| A1		        mov ax, [xPosBogy0LevelArr + 0]
	   000000A4 R
 000026DA  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 000026E0  66| A1		        mov ax, [xPosBogy1LevelArr + 0]
	   000000AA R
 000026E6  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 000026EC  66| A1		        mov ax, [xPosBogy2LevelArr + 0]
	   000000B0 R
 000026F2  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 000026F8  66| A1		        mov ax, [xPosBogy3LevelArr + 0]
	   000000B6 R
 000026FE  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 00002704  66| A1		        mov ax, [xPosBogy4LevelArr + 0]
	   000000BC R
 0000270A  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 00002710  66| A1		        mov ax, [xPosBogy5LevelArr + 0]
	   000000C2 R
 00002716  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 2
 00002726  66| A1		        mov ax, [xPosBogy0LevelArr + 2]
	   000000A6 R
 0000272C  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 00002732  66| A1		        mov ax, [xPosBogy1LevelArr + 2]
	   000000AC R
 00002738  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 0000273E  66| A1		        mov ax, [xPosBogy2LevelArr + 2]
	   000000B2 R
 00002744  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 0000274A  66| A1		        mov ax, [xPosBogy3LevelArr + 2]
	   000000B8 R
 00002750  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 00002756  66| A1		        mov ax, [xPosBogy4LevelArr + 2]
	   000000BE R
 0000275C  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 00002762  66| A1		        mov ax, [xPosBogy5LevelArr + 2]
	   000000C4 R
 00002768  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

				    .IF levelNum == 3
 00002778  66| A1		        mov ax, [xPosBogy0LevelArr + 4]
	   000000A8 R
 0000277E  66| A3		        mov xyPosBogy0.x, ax
	   000000C8 R

 00002784  66| A1		        mov ax, [xPosBogy1LevelArr + 4]
	   000000AE R
 0000278A  66| A3		        mov xyPosBogy1.x, ax
	   000000CC R

 00002790  66| A1		        mov ax, [xPosBogy2LevelArr + 4]
	   000000B4 R
 00002796  66| A3		        mov xyPosBogy2.x, ax
	   000000D0 R

 0000279C  66| A1		        mov ax, [xPosBogy3LevelArr + 4]
	   000000BA R
 000027A2  66| A3		        mov xyPosBogy3.x, ax
	   000000D4 R

 000027A8  66| A1		        mov ax, [xPosBogy4LevelArr + 4]
	   000000C0 R
 000027AE  66| A3		        mov xyPosBogy4.x, ax
	   000000D8 R

 000027B4  66| A1		        mov ax, [xPosBogy5LevelArr + 4]
	   000000C6 R
 000027BA  66| A3		        mov xyPosBogy5.x, ax
	   000000DC R
				    .ENDIF

 000027C0  58			    pop eax
 000027C1  C3			    ret
 000027C2			initialLevelBogyPos ENDP

 000027C2			bogyWalking PROC,
					xyPosInBogy:COORD

 000027C5  B9 00000003			mov ecx, 3
 000027CA  BE 00000000			mov esi, 0

					.IF xyPosInBogy.x > 15 
						.IF xyPosInBogy.x <= 58
 000027DD			addBogyColor0:
 000027DD  51						push ecx
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR [gameBogyColor0 + esi],
								5,
								xyPosInBogy,
								ADDR cells_Written
 000027FA  83 C6 0A					add esi, 10
 000027FD  66| FF 45 0A					inc xyPosInBogy.y
 00002801  59						pop ecx
 00002802  E2 D9					loop addBogyColor0
						.ENDIF
					.ENDIF

					.IF xyPosInBogy.x > 58 
						.IF xyPosInBogy.x <= 83
 00002812			addBogyColor1:
 00002812  51						push ecx
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR [gameBogyColor1 + esi],
								5,
								xyPosInBogy,
								ADDR cells_Written
 0000282F  83 C6 0A					add esi, 10
 00002832  66| FF 45 0A					inc xyPosInBogy.y
 00002836  59						pop ecx
 00002837  E2 D9					loop addBogyColor1
						.ENDIF
					.ENDIF

					.IF xyPosInBogy.x > 83
 00002840			addBogyColor2:
 00002840  51					push ecx
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR [gameBogyColor2 + esi],
							5,
							xyPosInBogy,
							ADDR cells_Written
 0000285D  83 C6 0A				add esi, 10
 00002860  66| FF 45 0A				inc xyPosInBogy.y
 00002864  59					pop ecx
 00002865  E2 D9				loop addBogyColor2
					.ENDIF

 00002867  B9 00000003			mov ecx, 3
 0000286C  BE 00000000			mov esi, 0
 00002871  66| 83 6D 0A			sub xyPosInBogy.y, 3
	   03
 00002876			printBogy:
 00002876  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00002893  83 C6 05			add esi, 5
 00002896  66| FF 45 0A			inc xyPosInBogy.y
 0000289A  59				pop ecx
 0000289B  E2 D9			loop printBogy
					
					ret
 000028A1			bogyWalking ENDP

 000028A1			bogyClear PROC,
					xyPosInBogy:COORD
 000028A4  B9 00000003			mov ecx, 3
 000028A9  BE 00000000			mov esi, 0
 000028AE			removeBogy:
 000028AE  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 000028CB  83 C6 05			add esi, 5
 000028CE  66| FF 45 0A			inc xyPosInBogy.y
 000028D2  59				pop ecx
 000028D3  E2 D9			loop removeBogy
					ret
 000028D9			bogyClear ENDP

 000028D9			tankWalking PROC,
					xyPosInit:COORD
 000028DC  B9 00000003			mov ecx, 3
 000028E1  BE 00000000			mov esi, 0
 000028E6			colorTank:
 000028E6  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR [tankColor + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00002903  83 C6 08			add esi, 8
 00002906  66| FF 45 0A			inc xyPosInit.y
 0000290A  59				pop ecx
 0000290B  E2 D9			loop colorTank

 0000290D  B9 00000003			mov ecx, 3
 00002912  BE 00000000			mov esi, 0
 00002917  66| 83 6D 0A			sub xyPosInit.y, 3
	   03
 0000291C			printTank:
 0000291C  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00002939  83 C6 08			add esi, 8
 0000293C  66| FF 45 0A			inc xyPosInit.y
 00002940  59				pop ecx
 00002941  E2 D9			loop printTank
					ret
 00002947			tankWalking ENDP

 00002947			tankClear PROC,
					xyPosInit:COORD
 0000294A  B9 00000003			mov ecx, 3
 0000294F  BE 00000000			mov esi, 0
 00002954			colorTankClear:
 00002954  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR [tankColorClear + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00002971  83 C6 08			add esi, 8
 00002974  66| FF 45 0A			inc xyPosInit.y
 00002978  59				pop ecx
 00002979  E2 D9			loop colorTankClear

 0000297B  B9 00000003			mov ecx, 3
 00002980  BE 00000000			mov esi, 0
 00002985  66| 83 6D 0A			sub xyPosInit.y, 3
	   03
 0000298A			removeTank:
 0000298A  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 000029A7  83 C6 08			add esi, 8
 000029AA  66| FF 45 0A			inc xyPosInit.y
 000029AE  59				pop ecx
 000029AF  E2 D9			loop removeTank
					ret
 000029B5			tankClear ENDP

 000029B5			noWorkWalking PROC,
					xyPosInit:COORD
 000029B8			printNoWork:
 000029B8  51				push ecx

					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR bulletColor,
						6,
						xyPosInit,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bullet,
						SIZEOF bullet,
						xyPosInit,
						ADDR cells_Written
 000029ED  59				pop ecx
					ret
 000029F2			noWorkWalking ENDP

 000029F2			noWorkClear PROC,
					xyPosInit:COORD
 000029F5			removeNoWork:
 000029F5  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR clearBullet,
						SIZEOF clearBullet,
						xyPosInit,
						ADDR cells_Written
 00002A10  59				pop ecx
					ret
 00002A15			noWorkClear ENDP

 00002A15			printGreenLine PROC,
					xyPosInLine:COORD
 00002A18  66| C7 45 08			mov xyPosInLine.x, 20
	   0014
 00002A1E  66| C7 45 0A			mov xyPosInLine.y, 5
	   0005

 00002A24  B9 00000018			mov ecx, 24
 00002A29  BE 00000000			mov esi, 0
 00002A2E			PrintLine:
 00002A2E  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInLine,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInLine,
						ADDR cells_Written
 00002A63  66| FF 45 0A			inc xyPosInLine.y
 00002A67  59				pop ecx
 00002A68  E2 C4			loop PrintLine
					ret
 00002A6E			printGreenLine ENDP

 00002A6E			decStrLevel PROC,
					levelNumDec:WORD
 00002A71  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00002A76  B2 0A			mov dl, 10					;除數
 00002A78  66| 8B 45 08			mov ax, levelNumDec			;被除數
 00002A7C			change:
 00002A7C  51				push ecx
 00002A7D  F6 F2			div dl
 00002A7F  80 C4 30			add ah, '0'					
 00002A82  49				dec ecx
 00002A83  88 A1 00000DB2 R		mov [levelStr + ecx], ah
 00002A89  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002A8D  59				pop ecx
 00002A8E  E2 EC			loop change
					ret
 00002A94			decStrLevel ENDP

 00002A94			decStrScore PROC,
					scoreNumDec:WORD
 00002A97  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00002A9C  B2 0A			mov dl, 10					;除數
 00002A9E  66| 8B 45 08			mov ax, scoreNumDec			;被除數
 00002AA2			change:
 00002AA2  51				push ecx
 00002AA3  F6 F2			div dl
 00002AA5  80 C4 30			add ah, '0'					
 00002AA8  49				dec ecx
 00002AA9  88 A1 00000DCA R		mov [scoreStr + ecx], ah
 00002AAF  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002AB3  59				pop ecx
 00002AB4  E2 EC			loop change
					ret
 00002ABA			decStrScore ENDP

 00002ABA			decStrLives PROC,
					livesNumDec:WORD
 00002ABD  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00002AC2  B2 0A			mov dl, 10					;除數
 00002AC4  66| 8B 45 08			mov ax, livesNumDec			;被除數
 00002AC8			change:
 00002AC8  51				push ecx
 00002AC9  F6 F2			div dl
 00002ACB  80 C4 30			add ah, '0'					
 00002ACE  49				dec ecx
 00002ACF  88 A1 00000DD2 R		mov [livesStr + ecx], ah
 00002AD5  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002AD9  59				pop ecx
 00002ADA  E2 EC			loop change
					ret
 00002AE0			decStrLives ENDP

 00002AE0			decStrBogys PROC,
					bogysNumDec:WORD
 00002AE3  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00002AE8  B2 0A			mov dl, 10					;除數
 00002AEA  66| 8B 45 08			mov ax, bogysNumDec			;被除數
 00002AEE			change:
 00002AEE  51				push ecx
 00002AEF  F6 F2			div dl
 00002AF1  80 C4 30			add ah, '0'					
 00002AF4  49				dec ecx
 00002AF5  88 A1 00000DD8 R		mov [bogysStr + ecx], ah
 00002AFB  66| 0F B6 C0			movzx ax, al				;商繼續除
 00002AFF  59				pop ecx
 00002B00  E2 EC			loop change
					ret
 00002B06			decStrBogys ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/19/22 22:18:28
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000010FA Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00002B06 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 000028A1 _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 000028AE _TEXT	
bogyWalking  . . . . . . . . . .	P Near	 000027C2 _TEXT	Length= 000000DF Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  addBogyColor0  . . . . . . . .	L Near	 000027DD _TEXT	
  addBogyColor1  . . . . . . . .	L Near	 00002812 _TEXT	
  addBogyColor2  . . . . . . . .	L Near	 00002840 _TEXT	
  printBogy  . . . . . . . . . .	L Near	 00002876 _TEXT	
decStrBogys  . . . . . . . . . .	P Near	 00002AE0 _TEXT	Length= 00000026 Public STDCALL
  bogysNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002AEE _TEXT	
decStrLevel  . . . . . . . . . .	P Near	 00002A6E _TEXT	Length= 00000026 Public STDCALL
  levelNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002A7C _TEXT	
decStrLives  . . . . . . . . . .	P Near	 00002ABA _TEXT	Length= 00000026 Public STDCALL
  livesNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002AC8 _TEXT	
decStrScore  . . . . . . . . . .	P Near	 00002A94 _TEXT	Length= 00000026 Public STDCALL
  scoreNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00002AA2 _TEXT	
initialLevelBogyPos  . . . . . .	P Near	 000026C9 _TEXT	Length= 000000F9 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00001E19 Public STDCALL
  Ex . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000232 _TEXT	
  pauseLoop  . . . . . . . . . .	L Near	 000004DD _TEXT	
  backToGame . . . . . . . . . .	L Near	 000004EC _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00001E12 _TEXT	
noWorkClear  . . . . . . . . . .	P Near	 000029F2 _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeNoWork . . . . . . . . .	L Near	 000029F5 _TEXT	
noWorkWalking  . . . . . . . . .	P Near	 000029B5 _TEXT	Length= 0000003D Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printNoWork  . . . . . . . . .	L Near	 000029B8 _TEXT	
printBogys . . . . . . . . . . .	P Near	 0000268B _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printEndScene  . . . . . . . . .	P Near	 0000229A _TEXT	Length= 00000337 Public STDCALL
  printWin . . . . . . . . . . .	L Near	 000022C0 _TEXT	
  printLose  . . . . . . . . . .	L Near	 00002326 _TEXT	
  restartOrLeave . . . . . . . .	L Near	 0000256A _TEXT	
  ExitEndScene . . . . . . . . .	L Near	 000025D0 _TEXT	
printGameStage . . . . . . . . .	P Near	 00002114 _TEXT	Length= 00000186 Public STDCALL
  PrintGameSceneTop  . . . . . .	L Near	 00002114 _TEXT	
  PrintGameScene . . . . . . . .	L Near	 0000214F _TEXT	
  PrintBar . . . . . . . . . . .	L Near	 000021A6 _TEXT	
printGreenLine . . . . . . . . .	P Near	 00002A15 _TEXT	Length= 00000059 Public STDCALL
  xyPosInLine  . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00002A2E _TEXT	
printLevel . . . . . . . . . . .	P Near	 000025D1 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printLives . . . . . . . . . . .	P Near	 0000264D _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printScore . . . . . . . . . . .	P Near	 0000260F _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printStartScene  . . . . . . . .	P Near	 00001E19 _TEXT	Length= 000002FB Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 00001E4B _TEXT	
  PrintOption  . . . . . . . . .	L Near	 00001E95 _TEXT	
  PrintStartTankColor  . . . . .	L Near	 00001F03 _TEXT	
  PrintStartTank . . . . . . . .	L Near	 00001F4C _TEXT	
  PrintStartBogyColor  . . . . .	L Near	 00001F95 _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 00001FDE _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 0000200B _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 00002048 _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 000020F4 _TEXT	
  ExitFunc . . . . . . . . . . .	L Near	 00002112 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 00002947 _TEXT	Length= 0000006E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  colorTankClear . . . . . . . .	L Near	 00002954 _TEXT	
  removeTank . . . . . . . . . .	L Near	 0000298A _TEXT	
tankWalking  . . . . . . . . . .	P Near	 000028D9 _TEXT	Length= 0000006E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  colorTank  . . . . . . . . . .	L Near	 000028E6 _TEXT	
  printTank  . . . . . . . . . .	L Near	 0000291C _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
N0 . . . . . . . . . . . . . . .	Word	 0000007A _DATA	
N10  . . . . . . . . . . . . . .	Word	 0000008E _DATA	
N11  . . . . . . . . . . . . . .	Word	 00000090 _DATA	
N12  . . . . . . . . . . . . . .	Word	 00000092 _DATA	
N13  . . . . . . . . . . . . . .	Word	 00000094 _DATA	
N14  . . . . . . . . . . . . . .	Word	 00000096 _DATA	
N15  . . . . . . . . . . . . . .	Word	 00000098 _DATA	
N16  . . . . . . . . . . . . . .	Word	 0000009A _DATA	
N17  . . . . . . . . . . . . . .	Word	 0000009C _DATA	
N18  . . . . . . . . . . . . . .	Word	 0000009E _DATA	
N19  . . . . . . . . . . . . . .	Word	 000000A0 _DATA	
N1 . . . . . . . . . . . . . . .	Word	 0000007C _DATA	
N20  . . . . . . . . . . . . . .	Word	 000000A2 _DATA	
N2 . . . . . . . . . . . . . . .	Word	 0000007E _DATA	
N3 . . . . . . . . . . . . . . .	Word	 00000080 _DATA	
N4 . . . . . . . . . . . . . . .	Word	 00000082 _DATA	
N5 . . . . . . . . . . . . . . .	Word	 00000084 _DATA	
N6 . . . . . . . . . . . . . . .	Word	 00000086 _DATA	
N7 . . . . . . . . . . . . . . .	Word	 00000088 _DATA	
N8 . . . . . . . . . . . . . . .	Word	 0000008A _DATA	
N9 . . . . . . . . . . . . . . .	Word	 0000008C _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 00000DD6 _DATA	
bogysStr . . . . . . . . . . . .	Byte	 00000DD8 _DATA	
bogys  . . . . . . . . . . . . .	Byte	 00000DA8 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletColor  . . . . . . . . . .	Word	 00000D78 _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000D6A _DATA	
cells_Written  . . . . . . . . .	DWord	 000000E0 _DATA	
clearBogy  . . . . . . . . . . .	Byte	 00000D01 _DATA	
clearBullet  . . . . . . . . . .	Byte	 00000D71 _DATA	
clearTank  . . . . . . . . . . .	Byte	 00000C7A _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 00000444 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
finalColor . . . . . . . . . . .	Word	 000004CA _DATA	
finalMsg . . . . . . . . . . . .	Byte	 00000497 _DATA	
gameBgM  . . . . . . . . . . . .	Byte	 00000E4B _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 00000DDC _DATA	
gameBogyColor0 . . . . . . . . .	Word	 00000D10 _DATA	
gameBogyColor1 . . . . . . . . .	Word	 00000D2E _DATA	
gameBogyColor2 . . . . . . . . .	Word	 00000D4C _DATA	
gameBogy . . . . . . . . . . . .	Byte	 00000CF2 _DATA	
gameIntroColor . . . . . . . . .	Word	 00000BE0 _DATA	
gameIntro  . . . . . . . . . . .	Byte	 0000078F _DATA	
gameTank . . . . . . . . . . . .	Byte	 00000C62 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 00000D86 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 00000457 _DATA	
levelNum . . . . . . . . . . . .	Word	 00000DB0 _DATA	
levelStr . . . . . . . . . . . .	Byte	 00000DB2 _DATA	
level  . . . . . . . . . . . . .	Byte	 00000D88 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000D84 _DATA	
livesNumInLevel  . . . . . . . .	Word	 00000DD0 _DATA	
livesNum . . . . . . . . . . . .	Word	 00000DCE _DATA	
livesStr . . . . . . . . . . . .	Byte	 00000DD2 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000DA0 _DATA	
loseColor  . . . . . . . . . . .	Word	 00000FDA _DATA	
loseStr  . . . . . . . . . . . .	Byte	 00001022 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
nextLevel  . . . . . . . . . . .	Byte	 0000047F _DATA	
paused . . . . . . . . . . . . .	Byte	 00000DB6 _DATA	
playing  . . . . . . . . . . . .	Byte	 00000DBE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restart  . . . . . . . . . . . .	Byte	 0000046A _DATA	
scoreNumInLevel  . . . . . . . .	Word	 00000DC8 _DATA	
scoreNum . . . . . . . . . . . .	Word	 00000DC6 _DATA	
scoreStr . . . . . . . . . . . .	Byte	 00000DCA _DATA	
score  . . . . . . . . . . . . .	Byte	 00000D98 _DATA	
startBogyColor . . . . . . . . .	Word	 00000749 _DATA	
startBogy  . . . . . . . . . . .	Byte	 00000726 _DATA	
startColor . . . . . . . . . . .	Word	 0000036C _DATA	
startStr . . . . . . . . . . . .	Byte	 000000E4 _DATA	
startTankColor . . . . . . . . .	Word	 000005D6 _DATA	
startTank  . . . . . . . . . . .	Byte	 0000052E _DATA	
state  . . . . . . . . . . . . .	Byte	 00000D90 _DATA	
tankColorClear . . . . . . . . .	Word	 00000CC2 _DATA	
tankColor  . . . . . . . . . . .	Word	 00000C92 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winColor . . . . . . . . . . . .	Word	 00000F92 _DATA	
winStr . . . . . . . . . . . . .	Byte	 00000EBA _DATA	
windowBound  . . . . . . . . . .	SMALL_RECT  00000012 _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000000 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPosBogy0LevelArr  . . . . . . .	Word	 000000A4 _DATA	
xPosBogy1LevelArr  . . . . . . .	Word	 000000AA _DATA	
xPosBogy2LevelArr  . . . . . . .	Word	 000000B0 _DATA	
xPosBogy3LevelArr  . . . . . . .	Word	 000000B6 _DATA	
xPosBogy4LevelArr  . . . . . . .	Word	 000000BC _DATA	
xPosBogy5LevelArr  . . . . . . .	Word	 000000C2 _DATA	
xyPosBogy0 . . . . . . . . . . .	COORD	 000000C8 _DATA	
xyPosBogy1 . . . . . . . . . . .	COORD	 000000CC _DATA	
xyPosBogy2 . . . . . . . . . . .	COORD	 000000D0 _DATA	
xyPosBogy3 . . . . . . . . . . .	COORD	 000000D4 _DATA	
xyPosBogy4 . . . . . . . . . . .	COORD	 000000D8 _DATA	
xyPosBogy5 . . . . . . . . . . .	COORD	 000000DC _DATA	
xyPosNoWork0 . . . . . . . . . .	COORD	 00000026 _DATA	
xyPosNoWork10  . . . . . . . . .	COORD	 0000004E _DATA	
xyPosNoWork11  . . . . . . . . .	COORD	 00000052 _DATA	
xyPosNoWork12  . . . . . . . . .	COORD	 00000056 _DATA	
xyPosNoWork13  . . . . . . . . .	COORD	 0000005A _DATA	
xyPosNoWork14  . . . . . . . . .	COORD	 0000005E _DATA	
xyPosNoWork15  . . . . . . . . .	COORD	 00000062 _DATA	
xyPosNoWork16  . . . . . . . . .	COORD	 00000066 _DATA	
xyPosNoWork17  . . . . . . . . .	COORD	 0000006A _DATA	
xyPosNoWork18  . . . . . . . . .	COORD	 0000006E _DATA	
xyPosNoWork19  . . . . . . . . .	COORD	 00000072 _DATA	
xyPosNoWork1 . . . . . . . . . .	COORD	 0000002A _DATA	
xyPosNoWork20  . . . . . . . . .	COORD	 00000076 _DATA	
xyPosNoWork2 . . . . . . . . . .	COORD	 0000002E _DATA	
xyPosNoWork3 . . . . . . . . . .	COORD	 00000032 _DATA	
xyPosNoWork4 . . . . . . . . . .	COORD	 00000036 _DATA	
xyPosNoWork5 . . . . . . . . . .	COORD	 0000003A _DATA	
xyPosNoWork6 . . . . . . . . . .	COORD	 0000003E _DATA	
xyPosNoWork7 . . . . . . . . . .	COORD	 00000042 _DATA	
xyPosNoWork8 . . . . . . . . . .	COORD	 00000046 _DATA	
xyPosNoWork9 . . . . . . . . . .	COORD	 0000004A _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000022 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 0000001E _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
