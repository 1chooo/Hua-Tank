Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 07:06:21
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				printStartScene PROTO
				decStrLevel PROTO, levelNumDec:WORD
				decStrScore PROTO, scoreNumDec:WORD
				decStrLives PROTO, livesNumDec:WORD
				decStrBogys PROTO, bogysNumDec:WORD

				printLevel PROTO, xyPosInit:COORD
				printScore PROTO, xyPosInit:COORD
				printLives PROTO, xyPosInit:COORD
				printBogys PROTO, xyPosInit:COORD

				bogyWalking PROTO, xyPosInBogy:COORD
				bogyClear   PROTO, xyPosInBogy:COORD
				printGreenLine PROTO, xyPosInLine:COORD

				tankWalking PROTO, xyPosInit:COORD
				tankClear   PROTO, xyPosInit:COORD
				;controlTank PROTO

				; bullet move
				noWorkWalking PROTO, xyPosInit:COORD
				noWorkClear   PROTO, xyPosInit:COORD

				; 	玩遊戲   ebx = 1
				; 	暫停		ebx = 2
				; 	結束畫面	ebx = 3
				; 	離開程式	ebx = 4

 00000000			.data
					; 視窗的變數們
 00000000 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy",0 ; 標題
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 00000012 0000 0000 007D		windowBound    SMALL_RECT <0,0,125,25>    ; 視窗大小
	   0019
 0000001A 00000000			consoleHandle  DWORD ?

 0000001E 0006 0005			xyPos COORD   <6,5>
 00000022 0007 000F			xyPosTank COORD    <7,15>

 00000026 000F 0006			xyPosNoWork0 COORD <15,6>
 0000002A 000F 0007			xyPosNoWork1 COORD <15,7>
 0000002E 000F 0008			xyPosNoWork2 COORD <15,8>
 00000032 000F 0009			xyPosNoWork3 COORD <15,9>
 00000036 000F 000A			xyPosNoWork4 COORD <15,10>
 0000003A 000F 000B			xyPosNoWork5 COORD <15,11>
 0000003E 000F 000C			xyPosNoWork6 COORD <15,12>
 00000042 000F 000D			xyPosNoWork7 COORD <15,13>
 00000046 000F 000E			xyPosNoWork8 COORD <15,14>
 0000004A 000F 000F			xyPosNoWork9 COORD <15,15>
 0000004E 000F 0010			xyPosNoWork10 COORD <15,16>
 00000052 000F 0011			xyPosNoWork11 COORD <15,17>
 00000056 000F 0012			xyPosNoWork12 COORD <15,18>
 0000005A 000F 0013			xyPosNoWork13 COORD <15,19>
 0000005E 000F 0014			xyPosNoWork14 COORD <15,20>
 00000062 000F 0015			xyPosNoWork15 COORD <15,21>
 00000066 000F 0016			xyPosNoWork16 COORD <15,22>
 0000006A 000F 0017			xyPosNoWork17 COORD <15,23>
 0000006E 000F 0018			xyPosNoWork18 COORD <15,24>
 00000072 000F 0019			xyPosNoWork19 COORD <15,25>
 00000076 000F 001A			xyPosNoWork20 COORD <15,26>

 0000007A 0000				N0  WORD 0
 0000007C 0000				N1  WORD 0
 0000007E 0000				N2  WORD 0
 00000080 0000				N3  WORD 0
 00000082 0000				N4  WORD 0
 00000084 0000				N5  WORD 0
 00000086 0000				N6  WORD 0
 00000088 0000				N7  WORD 0
 0000008A 0000				N8  WORD 0
 0000008C 0000				N9  WORD 0
 0000008E 0000				N10 WORD 0
 00000090 0000				N11 WORD 0
 00000092 0000				N12 WORD 0
 00000094 0000				N13 WORD 0
 00000096 0000				N14 WORD 0
 00000098 0000				N15 WORD 0
 0000009A 0000				N16 WORD 0
 0000009C 0000				N17 WORD 0
 0000009E 0000				N18 WORD 0
 000000A0 0000				N19 WORD 0
 000000A2 0000				N20 WORD 0

 000000A4 006B 0005			xyPosBogy0 COORD   <107,5>
 000000A8 006C 0009			xyPosBogy1 COORD   <108,9>
 000000AC 006D 000D			xyPosBogy2 COORD   <109,13>
 000000B0 006E 0011			xyPosBogy3 COORD   <110,17>
 000000B4 006F 0015			xyPosBogy4 COORD   <111,21>
 000000B8 0070 0019			xyPosBogy5 COORD   <112,25>
 000000BC 00000000			cells_Written DWORD ?

					; 開始畫面的字
 000000C0 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 0000012C  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _.' ____ \    |_   _ \  .'   `.  .' ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 2E 27 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2E 27
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 00000198  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / _ \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/ .'   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 5F
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 2E
	   27 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000204  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __'.      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 27
	   2E 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 00000270  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\ `.___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 60
	   2E 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 000002DC  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20

					;印開始畫面的提示字
 00000348 50 72 65 73 73		enterMsg BYTE "Press ‘E’ to enter"
	   20 A1 A5 45 A1
	   A6 20 74 6F 20
	   65 6E 74 65 72
 0000035C 50 72 65 73 73		leaveMsg BYTE "Press ‘L’ to leave"
	   20 A1 A5 4C A1
	   A6 20 74 6F 20
	   6C 65 61 76 65

					;印坦克
 00000370 20 20 20 20 20		startTank BYTE "       \                "
	   20 20 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 00000388  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 000003A0  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 000003B8  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 000003D0  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 000003E8  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 00000400  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20
					;印Bogy
 00000418 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 0000041F  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 00000426  2F 20 48 55 41				  BYTE "/ HUA \"
	   20 5C
 0000042D  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 00000434  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20

 0000043B 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 0000047C  2A 20 20 20 20	              BYTE "*                      Game Introduction:                       *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000004BD  2A 20 20 20 20	              BYTE "*            Control the Hua Tank to kill the Bogy.             *"
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000004FE  2A 20 20 20 20	              BYTE "*             Don't let Bogy cross the green line,              *"
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000053F  2A 20 20 20 20				  BYTE "*                or your life will shock down!!                 *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000580  2A 20 20 20 53	              BYTE "*   Start with 3 lives, once the live reaches zero, you lose!!  *"
	   74 61 72 74 20
	   77 69 74 68 20
	   33 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 2A
 000005C1  2A 20 20 20 20	              BYTE "*     Kill the last monsters, if you still alive, you win!!     *"
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 2A
 00000602  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000643  2A 20 20 20 20	              BYTE "*                   How to control the tank:                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000684  2A 20 20 20 20	              BYTE "*               + press 'up'    to move up                      *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000006C5  2A 20 20 20 20	              BYTE "*               + press 'down'  to move down                    *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000706  2A 20 20 20 20	              BYTE "*               + press 'right' to fire bullet                  *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000747  2A 20 20 20 20	              BYTE "*                                                               *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 00000788  2A 20 20 20 20	              BYTE "*                         How to play:                          *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 000007C9  2A 20 20 20 20	              BYTE "*               + press 'space' to start game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000080A  2A 20 20 20 20	              BYTE "*               + press 'P'     to pause game                   *"
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
 0000084B  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A

 0000088C 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 00000894  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 0000089C  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20

 000008A4 20 20 20 20 20		clearTank BYTE "        "
	   20 20 20
 000008AC  20 20 20 20 20				  BYTE "        "
	   20 20 20
 000008B4  20 20 20 20 20				  BYTE "        "
	   20 20 20

 000008BC 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 000008C1  7C 4F 76 4F 7C				  BYTE "|OvO|"
 000008C6  7C 5F 7C 5F 7C				  BYTE "|_|_|"

 000008CB 20 20 20 20 20		clearBogy BYTE "     "
 000008D0  20 20 20 20 20				  BYTE "     "
 000008D5  20 20 20 20 20				  BYTE "     "

 000008DA 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 000008E1 20 20 20 20 20		clearBullet BYTE "      ",0
	   20 00

 000008E8 7C 00				line BYTE "|",0
 000008EA 000A				greenColor WORD 0Ah

 000008EC 000E				yellowColor WORD 0Eh

 000008EE 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 000008F6 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 000008FE 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000906 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 0000090E 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000916 0001				levelNum WORD 1
 00000918  00000004 [			levelStr BYTE 4 DUP(?)
	    00
	   ]

 0000091C 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 00000924 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 0000092C 0000				scoreNum WORD 0
 0000092E  00000004 [			scoreStr BYTE 4 DUP(?)
	    00
	   ]

 00000932 000A				livesNum WORD 10
 00000934  00000004 [			livesStr BYTE 4 DUP(?)
	    00
	   ]
					
 00000938 0005				bogysNum WORD 5
 0000093A  00000004 [			bogysStr BYTE 4 DUP(?)
	    00
	   ]

 0000093E  0000006E [			gameBgTB BYTE 110 DUP("*"),0
	    2A
	   ] 00
 000009AD 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0	  
	   0000006C [
	    20
	   ] 2A 00

 00000000			.code

 00000000			main PROC
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 0000001A R		mov consoleHandle, eax
					
					INVOKE SetConsoleTitle, ADDR windowTitleStr			; 設定視窗標題
					
					INVOKE SetConsoleWindowInfo,						; 設定視窗大小
				     	consoleHandle,
				     	TRUE,
				     	ADDR windowBound
					
					INVOKE printStartScene

 0000002D			Ex:	.IF ebx == 4        ;直接離開
 00000032  E8 00000000 E			call Clrscr
 00000037  E9 000012B7				jmp ExitProgram
					.ENDIF

					;print test Bogy

 0000003C  BB 00000001			mov ebx, 1 ; 進入遊戲

 00000041			GameLoop:
					INVOKE tankWalking, xyPosTank
 0000004C  E8 00000000 E		call ReadKey

					.IF ax == 4800h
						INVOKE tankClear, xyPosTank
 00000062  66| 83 2D				sub xyPosTank.y, 1
	   00000024 R 01
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 5000h
						INVOKE tankClear, xyPosTank
 00000086  66| 83 05				add xyPosTank.y, 1
	   00000024 R 01
						INVOKE tankWalking, xyPosTank
					.ENDIF

					.IF ax == 4D00h
						.IF xyPosTank.y == 5
 000000AD  66| C7 05		            mov N0, 1
	   0000007A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 6
 000000C0  66| C7 05		            mov N1, 1
	   0000007C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 7
 000000D3  66| C7 05		            mov N2, 1
	   0000007E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 8
 000000E6  66| C7 05		            mov N3, 1
	   00000080 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 9
 000000F9  66| C7 05		            mov N4, 1
	   00000082 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 10
 0000010C  66| C7 05		            mov N5, 1
	   00000084 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 11
 0000011F  66| C7 05		            mov N6, 1
	   00000086 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 12
 00000132  66| C7 05		            mov N7, 1
	   00000088 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 13
 00000145  66| C7 05		            mov N8, 1
	   0000008A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 14
 00000158  66| C7 05		            mov N9, 1
	   0000008C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 15
 0000016B  66| C7 05		            mov N10, 1
	   0000008E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 16
 0000017E  66| C7 05		            mov N11, 1
	   00000090 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 17
 00000191  66| C7 05		            mov N12, 1
	   00000092 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 18
 000001A4  66| C7 05		            mov N13, 1
	   00000094 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 19
 000001B7  66| C7 05		            mov N14, 1
	   00000096 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 20
 000001CA  66| C7 05		            mov N15, 1
	   00000098 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 21
 000001DD  66| C7 05		            mov N16, 1
	   0000009A R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 22
 000001F0  66| C7 05		            mov N17, 1
	   0000009C R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 23
 00000203  66| C7 05		            mov N18, 1
	   0000009E R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 24
 00000216  66| C7 05		            mov N19, 1
	   000000A0 R
	   0001
				        .ENDIF
				        .IF xyPosTank.y == 25
 00000229  66| C7 05		            mov N20, 1
	   000000A2 R
	   0001
				        .ENDIF
					.ENDIF

					.IF N0 == 1
				        INVOKE noWorkWalking, xyPosNoWork0 
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkWalking, xyPosNoWork1 
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkWalking, xyPosNoWork2 
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkWalking, xyPosNoWork3 
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkWalking, xyPosNoWork4 
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkWalking, xyPosNoWork5 
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkWalking, xyPosNoWork6 
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkWalking, xyPosNoWork7 
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkWalking, xyPosNoWork8 
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkWalking, xyPosNoWork9 
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkWalking, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkWalking, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkWalking, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkWalking, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkWalking, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkWalking, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkWalking, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkWalking, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkWalking, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkWalking, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkWalking, xyPosNoWork20
				    .ENDIF

					.IF xyPosBogy0.x < 107
						INVOKE bogyWalking, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyWalking, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyWalking, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyWalking, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyWalking, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyWalking, xyPosBogy5
					.ENDIF

 00000469  50				push eax
 0000046A  B8 000001F4			mov eax, 500
 0000046F  E8 00000000 E		call Delay
 00000474  58				pop eax

					.IF xyPosBogy0.x < 107
						INVOKE bogyClear, xyPosBogy0
					.ENDIF
					.IF xyPosBogy1.x < 107
						INVOKE bogyClear, xyPosBogy1
					.ENDIF
					.IF xyPosBogy2.x < 107
						INVOKE bogyClear, xyPosBogy2
					.ENDIF
					.IF xyPosBogy3.x < 107
						INVOKE bogyClear, xyPosBogy3
					.ENDIF
					.IF xyPosBogy4.x < 107
						INVOKE bogyClear, xyPosBogy4
					.ENDIF
					.IF xyPosBogy5.x < 107
						INVOKE bogyClear, xyPosBogy5
					.ENDIF

					; clear no work
					.IF N0 == 1
				        INVOKE noWorkClear, xyPosNoWork0
				    .ENDIF
				    .IF N1 == 1
				        INVOKE noWorkClear, xyPosNoWork1
				    .ENDIF
				    .IF N2 == 1
				        INVOKE noWorkClear, xyPosNoWork2
				    .ENDIF
				    .IF N3 == 1
				        INVOKE noWorkClear, xyPosNoWork3
				    .ENDIF
				    .IF N4 == 1
				        INVOKE noWorkClear, xyPosNoWork4
				    .ENDIF
				    .IF N5 == 1
				        INVOKE noWorkClear, xyPosNoWork5
				    .ENDIF
				    .IF N6 == 1
				        INVOKE noWorkClear, xyPosNoWork6
				    .ENDIF
				    .IF N7 == 1
				        INVOKE noWorkClear, xyPosNoWork7
				    .ENDIF
				    .IF N8 == 1
				        INVOKE noWorkClear, xyPosNoWork8
				    .ENDIF
				    .IF N9 == 1
				        INVOKE noWorkClear, xyPosNoWork9
				    .ENDIF
				    .IF N10 == 1
				        INVOKE noWorkClear, xyPosNoWork10 
				    .ENDIF
				    .IF N11 == 1
				        INVOKE noWorkClear, xyPosNoWork11 
				    .ENDIF
				    .IF N12 == 1
				        INVOKE noWorkClear, xyPosNoWork12
				    .ENDIF
				    .IF N13 == 1
				        INVOKE noWorkClear, xyPosNoWork13
				    .ENDIF
				    .IF N14 == 1
				        INVOKE noWorkClear, xyPosNoWork14
				    .ENDIF
				    .IF N15 == 1
				        INVOKE noWorkClear, xyPosNoWork15
				    .ENDIF
				    .IF N16 == 1
				        INVOKE noWorkClear, xyPosNoWork16
				    .ENDIF
				    .IF N17 == 1
				        INVOKE noWorkClear, xyPosNoWork17
				    .ENDIF
				    .IF N18 == 1
				        INVOKE noWorkClear, xyPosNoWork18
				    .ENDIF
				    .IF N19 == 1
				        INVOKE noWorkClear, xyPosNoWork19
				    .ENDIF
				    .IF N20 == 1
				        INVOKE noWorkClear, xyPosNoWork20
				    .ENDIF

					
					INVOKE printGreenLine, xyPos
 000006B7  66| 83 2D			sub xyPosBogy0.x, 1
	   000000A4 R 01
 000006BF  66| 83 2D			sub xyPosBogy1.x, 1
	   000000A8 R 01
 000006C7  66| 83 2D			sub xyPosBogy2.x, 1
	   000000AC R 01
 000006CF  66| 83 2D			sub xyPosBogy3.x, 1
	   000000B0 R 01
 000006D7  66| 83 2D			sub xyPosBogy4.x, 1
	   000000B4 R 01
 000006DF  66| 83 2D			sub xyPosBogy5.x, 1
	   000000B8 R 01

					.IF N0 == 1
 000006F5  66| 83 05		        add xyPosNoWork0.x, 1
	   00000026 R 01
 000006FD  50			        push eax
 000006FE  66| A1		        mov ax, xyPosBogy0.x
	   000000A4 R
 00000704  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork0.x >= ax
 00000711  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 0000071A  66| C7 05		            mov xyPosNoWork0.x, 107
	   00000026 R
	   006B
 00000723  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 0000072B  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000753  BB 00000004		                mov ebx, 4
 00000758  E9 FFFFF8D0		                jmp Ex
				            .ENDIF
 0000075D  66| C7 05		            mov xyPosBogy0.x, 00
	   000000A4 R
	   0000
				        .ENDIF
 00000766  58			        pop eax
				        .IF xyPosNoWork0.x > 106
 00000771  66| C7 05		            mov N0, 0
	   0000007A R
	   0000
 0000077A  66| C7 05		            mov xyPosNoWork0.x, 15
	   00000026 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N1 == 1
 00000791  66| 83 05		        add xyPosNoWork1.x, 1
	   0000002A R 01
 00000799  50			        push eax
 0000079A  66| A1		        mov ax, xyPosBogy0.x
	   000000A4 R
 000007A0  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork1.x >= ax
 000007AD  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 000007B6  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
 000007BF  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 000007C7  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000007EF  BB 00000004		                mov ebx, 4
 000007F4  E9 FFFFF834		                jmp Ex
				            .ENDIF
 000007F9  66| C7 05		            mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
				        .ENDIF
 00000802  58			        pop eax
				        .IF xyPosNoWork1.x > 106
 0000080D  66| C7 05		            mov N1, 0
	   0000007C R
	   0000
 00000816  66| C7 05		            mov xyPosNoWork1.x, 15
	   0000002A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N2 == 1
 00000829  66| 83 05		        add xyPosNoWork2.x, 1
	   0000002E R 01
				        .IF xyPosNoWork2.x > 106
 0000083B  66| C7 05		            mov N2, 0
	   0000007E R
	   0000
 00000844  66| C7 05		            mov xyPosNoWork2.x, 15
	   0000002E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N3 == 1
 0000085B  66| 83 05		        add xyPosNoWork3.x, 1
	   00000032 R 01
 00000863  50			        push eax
 00000864  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 0000086A  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork3.x >= ax
 00000877  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 00000880  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
 00000889  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000891  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000008B9  BB 00000004		                mov ebx, 4
 000008BE  E9 FFFFF76A		                jmp Ex
				            .ENDIF
 000008C3  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 000008CC  58			        pop eax
				        .IF xyPosNoWork3.x > 106
 000008D7  66| C7 05		            mov N3, 0
	   00000080 R
	   0000
 000008E0  66| C7 05		            mov xyPosNoWork3.x, 15
	   00000032 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N4 == 1
 000008F7  66| 83 05		        add xyPosNoWork4.x, 1
	   00000036 R 01
 000008FF  50			        push eax
 00000900  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 00000906  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork4.x >= ax
 00000913  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 0000091C  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
 00000925  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 0000092D  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000955  BB 00000004		                mov ebx, 4
 0000095A  E9 FFFFF6CE		                jmp Ex
				            .ENDIF
 0000095F  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 00000968  58			        pop eax
				        .IF xyPosNoWork4.x > 106
 00000973  66| C7 05		            mov N4, 0
	   00000082 R
	   0000
 0000097C  66| C7 05		            mov xyPosNoWork4.x, 15
	   00000036 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N5 == 1
 00000993  66| 83 05		        add xyPosNoWork5.x, 1
	   0000003A R 01
 0000099B  50			        push eax
 0000099C  66| A1		        mov ax, xyPosBogy1.x
	   000000A8 R
 000009A2  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork5.x >= ax
 000009AF  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 000009B8  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
 000009C1  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 000009C9  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000009F1  BB 00000004		                mov ebx, 4
 000009F6  E9 FFFFF632		                jmp Ex
				            .ENDIF
 000009FB  66| C7 05		            mov xyPosBogy1.x, 108
	   000000A8 R
	   006C
				        .ENDIF
 00000A04  58			        pop eax
				        .IF xyPosNoWork5.x > 106
 00000A0F  66| C7 05		            mov N5, 0
	   00000084 R
	   0000
 00000A18  66| C7 05		            mov xyPosNoWork5.x, 15
	   0000003A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N6 == 1
 00000A2B  66| 83 05		        add xyPosNoWork6.x, 1
	   0000003E R 01
				        .IF xyPosNoWork6.x > 106
 00000A3D  66| C7 05		            mov N6, 0
	   00000086 R
	   0000
 00000A46  66| C7 05		            mov xyPosNoWork6.x, 15
	   0000003E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N7 == 1
 00000A5D  66| 83 05		        add xyPosNoWork7.x, 1
	   00000042 R 01
 00000A65  50			        push eax
 00000A66  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000A6C  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork7.x >= ax
 00000A79  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000A82  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
 00000A8B  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000A93  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000ABB  BB 00000004		                mov ebx, 4
 00000AC0  E9 FFFFF568		                jmp Ex
				            .ENDIF
 00000AC5  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000ACE  58			        pop eax
				        .IF xyPosNoWork7.x > 106
 00000AD9  66| C7 05		            mov N7, 0
	   00000088 R
	   0000
 00000AE2  66| C7 05		            mov xyPosNoWork7.x, 15
	   00000042 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N8 == 1
 00000AF9  66| 83 05		        add xyPosNoWork8.x, 1
	   00000046 R 01
 00000B01  50			        push eax
 00000B02  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000B08  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork8.x >= ax
 00000B15  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000B1E  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
 00000B27  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000B2F  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000B57  BB 00000004		                mov ebx, 4
 00000B5C  E9 FFFFF4CC		                jmp Ex
				            .ENDIF
 00000B61  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000B6A  58			        pop eax
				        .IF xyPosNoWork8.x > 106
 00000B75  66| C7 05		            mov N8, 0
	   0000008A R
	   0000
 00000B7E  66| C7 05		            mov xyPosNoWork8.x, 15
	   00000046 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N9 == 1
 00000B95  66| 83 05		        add xyPosNoWork9.x, 1
	   0000004A R 01
 00000B9D  50			        push eax
 00000B9E  66| A1		        mov ax, xyPosBogy2.x
	   000000AC R
 00000BA4  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork9.x >= ax
 00000BB1  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000BBA  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
 00000BC3  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000BCB  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000BF3  BB 00000004		                mov ebx, 4
 00000BF8  E9 FFFFF430		                jmp Ex
				            .ENDIF
 00000BFD  66| C7 05		            mov xyPosBogy2.x, 109
	   000000AC R
	   006D
				        .ENDIF
 00000C06  58			        pop eax
				        .IF xyPosNoWork9.x > 106
 00000C11  66| C7 05		            mov N9, 0
	   0000008C R
	   0000
 00000C1A  66| C7 05		            mov xyPosNoWork9.x, 15
	   0000004A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N10 == 1
 00000C2D  66| 83 05				add xyPosNoWork10.x, 1
	   0000004E R 01
						.IF xyPosNoWork10.x > 106
 00000C3F  66| C7 05					mov N10, 0
	   0000008E R
	   0000
 00000C48  66| C7 05					mov xyPosNoWork10.x, 15
	   0000004E R
	   000F
						.ENDIF
					.ENDIF

					.IF N11 == 1
 00000C5F  66| 83 05				add xyPosNoWork11.x, 1
	   00000052 R 01
 00000C67  50					push eax
 00000C68  66| A1				mov ax, xyPosBogy3.x
	   000000B0 R
 00000C6E  66| 83 E8 06				sub ax, 6
						.IF xyPosNoWork11.x >= ax
 00000C7B  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00000C84  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
 00000C8D  66| 83 05					add scoreNum, 10
	   0000092C R 0A
 00000C95  66| 83 2D					sub bogysNum, 1
	   00000938 R 01
							INVOKE printScore, xyPos
							INVOKE printBogys, xyPos
							.IF bogysNum == 0
 00000CBD  BB 00000004						mov ebx, 4
 00000CC2  E9 FFFFF366						jmp Ex
							.ENDIF
 00000CC7  66| C7 05					mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
						.ENDIF
 00000CD0  58					pop eax
						.IF xyPosNoWork11.x > 106
 00000CDB  66| C7 05					mov N11, 0
	   00000090 R
	   0000
 00000CE4  66| C7 05					mov xyPosNoWork11.x, 15
	   00000052 R
	   000F
						.ENDIF
					.ENDIF

					.IF N12 == 1
 00000CFB  66| 83 05		        add xyPosNoWork12.x, 1
	   00000056 R 01
 00000D03  50			        push eax
 00000D04  66| A1		        mov ax, xyPosBogy3.x
	   000000B0 R
 00000D0A  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork12.x >= ax
 00000D17  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00000D20  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
 00000D29  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000D31  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000D59  BB 00000004		                mov ebx, 4
 00000D5E  E9 FFFFF2CA		                jmp Ex
				            .ENDIF
 00000D63  66| C7 05		            mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
				        .ENDIF
 00000D6C  58			        pop eax
				        .IF xyPosNoWork12.x > 106
 00000D77  66| C7 05		            mov N12, 0
	   00000092 R
	   0000
 00000D80  66| C7 05		            mov xyPosNoWork12.x, 15
	   00000056 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N13 == 1
 00000D97  66| 83 05		        add xyPosNoWork13.x, 1
	   0000005A R 01
 00000D9F  50			        push eax
 00000DA0  66| A1		        mov ax, xyPosBogy3.x
	   000000B0 R
 00000DA6  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork13.x >= ax
 00000DB3  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 00000DBC  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
 00000DC5  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000DCD  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000DF5  BB 00000004		                mov ebx, 4
 00000DFA  E9 FFFFF22E		                jmp Ex
				            .ENDIF
 00000DFF  66| C7 05		            mov xyPosBogy3.x, 110
	   000000B0 R
	   006E
				        .ENDIF
 00000E08  58			        pop eax
				        .IF xyPosNoWork13.x > 106
 00000E13  66| C7 05		            mov N13, 0
	   00000094 R
	   0000
 00000E1C  66| C7 05		            mov xyPosNoWork13.x, 15
	   0000005A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N14 == 1
 00000E2F  66| 83 05		        add xyPosNoWork14.x, 1
	   0000005E R 01
				        .IF xyPosNoWork14.x > 106
 00000E41  66| C7 05		            mov N14, 0
	   00000096 R
	   0000
 00000E4A  66| C7 05		            mov xyPosNoWork14.x, 15
	   0000005E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N15 == 1
 00000E61  66| 83 05		        add xyPosNoWork15.x, 1
	   00000062 R 01
 00000E69  50			        push eax
 00000E6A  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 00000E70  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork15.x >= ax
 00000E7D  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 00000E86  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
 00000E8F  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000E97  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000EBF  BB 00000004		                mov ebx, 4
 00000EC4  E9 FFFFF164		                jmp Ex
				            .ENDIF
 00000EC9  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 00000ED2  58			        pop eax
				        .IF xyPosNoWork15.x > 106
 00000EDD  66| C7 05		            mov N15, 0
	   00000098 R
	   0000
 00000EE6  66| C7 05		            mov xyPosNoWork15.x, 15
	   00000062 R
	   000F
				        .ENDIF
				    .ENDIF
					
					.IF N16 == 1
 00000EFD  66| 83 05		        add xyPosNoWork16.x, 1
	   00000066 R 01
 00000F05  50			        push eax
 00000F06  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 00000F0C  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork16.x >= ax
 00000F19  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 00000F22  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
 00000F2B  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000F33  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000F5B  BB 00000004		                mov ebx, 4
 00000F60  E9 FFFFF0C8		                jmp Ex
				            .ENDIF
 00000F65  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 00000F6E  58			        pop eax
				        .IF xyPosNoWork16.x > 106
 00000F79  66| C7 05		            mov N16, 0
	   0000009A R
	   0000
 00000F82  66| C7 05		            mov xyPosNoWork16.x, 15
	   00000066 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N17 == 1
 00000F99  66| 83 05		        add xyPosNoWork17.x, 1
	   0000006A R 01
 00000FA1  50			        push eax
 00000FA2  66| A1		        mov ax, xyPosBogy4.x
	   000000B4 R
 00000FA8  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork17.x >= ax
 00000FB5  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 00000FBE  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
 00000FC7  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00000FCF  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 00000FF7  BB 00000004		                mov ebx, 4
 00000FFC  E9 FFFFF02C		                jmp Ex
				            .ENDIF
 00001001  66| C7 05		            mov xyPosBogy4.x, 111
	   000000B4 R
	   006F
				        .ENDIF
 0000100A  58			        pop eax
				        .IF xyPosNoWork17.x > 106
 00001015  66| C7 05		            mov N17, 0
	   0000009C R
	   0000
 0000101E  66| C7 05		            mov xyPosNoWork17.x, 15
	   0000006A R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N18 == 1
 00001031  66| 83 05		        add xyPosNoWork18.x, 1
	   0000006E R 01
				        .IF xyPosNoWork18.x > 106
 00001043  66| C7 05		            mov N18, 0
	   0000009E R
	   0000
 0000104C  66| C7 05		            mov xyPosNoWork18.x, 15
	   0000006E R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N19 == 1
 00001063  66| 83 05		        add xyPosNoWork19.x, 1
	   00000072 R 01
 0000106B  50			        push eax
 0000106C  66| A1		        mov ax, xyPosBogy5.x
	   000000B8 R
 00001072  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork19.x >= ax
 0000107F  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 00001088  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
 00001091  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00001099  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 000010C1  BB 00000004		                mov ebx, 4
 000010C6  E9 FFFFEF62		                jmp Ex
				            .ENDIF
 000010CB  66| C7 05		            mov xyPosBogy5.x, 112
	   000000B8 R
	   0070
				        .ENDIF
 000010D4  58			        pop eax
				        .IF xyPosNoWork19.x > 106
 000010DF  66| C7 05		            mov N19, 0
	   000000A0 R
	   0000
 000010E8  66| C7 05		            mov xyPosNoWork19.x, 15
	   00000072 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF N20 == 1
 000010FF  66| 83 05		        add xyPosNoWork20.x, 1
	   00000076 R 01
 00001107  50			        push eax
 00001108  66| A1		        mov ax, xyPosBogy5.x
	   000000B8 R
 0000110E  66| 83 E8 06		        sub ax, 6
				        .IF xyPosNoWork20.x >= ax
 0000111B  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001124  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
 0000112D  66| 83 05		            add scoreNum, 10
	   0000092C R 0A
 00001135  66| 83 2D		            sub bogysNum, 1
	   00000938 R 01
				            INVOKE printScore, xyPos
				            INVOKE printBogys, xyPos
				            .IF bogysNum == 0
 0000115D  BB 00000004		                mov ebx, 4
 00001162  E9 FFFFEEC6		                jmp Ex
				            .ENDIF
 00001167  66| C7 05		            mov xyPosBogy5.x, 112
	   000000B8 R
	   0070
				        .ENDIF
 00001170  58			        pop eax
				        .IF xyPosNoWork20.x > 106
 0000117B  66| C7 05		            mov N20, 0
	   000000A2 R
	   0000
 00001184  66| C7 05		            mov xyPosNoWork20.x, 15
	   00000076 R
	   000F
				        .ENDIF
				    .ENDIF

					.IF xyPosBogy0.x < 16
 00001197  66| C7 05				mov xyPosBogy0.x, 107
	   000000A4 R
	   006B
 000011A0  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000011BD  BB 00000004					mov ebx, 4 ;之後要改3
 000011C2  E9 FFFFEE66					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy1.x < 16
 000011D1  66| C7 05				mov xyPosBogy1.x, 107
	   000000A8 R
	   006B
 000011DA  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000011F7  BB 00000004					mov ebx, 4 ;之後要改3
 000011FC  E9 FFFFEE2C					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy2.x < 16
 0000120B  66| C7 05				mov xyPosBogy2.x, 107
	   000000AC R
	   006B
 00001214  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 00001231  BB 00000004					mov ebx, 4 ;之後要改3
 00001236  E9 FFFFEDF2					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy3.x < 16
 00001245  66| C7 05				mov xyPosBogy3.x, 107
	   000000B0 R
	   006B
 0000124E  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 0000126B  BB 00000004					mov ebx, 4 ;之後要改3
 00001270  E9 FFFFEDB8					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy4.x < 16
 0000127F  66| C7 05				mov xyPosBogy4.x, 107
	   000000B4 R
	   006B
 00001288  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000012A5  BB 00000004					mov ebx, 4 ;之後要改3
 000012AA  E9 FFFFED7E					jmp Ex		
						.ENDIF
					.ENDIF
					.IF xyPosBogy5.x < 16
 000012B9  66| C7 05				mov xyPosBogy5.x, 107
	   000000B8 R
	   006B
 000012C2  66| 83 2D				sub livesNum, 1
	   00000932 R 01
						INVOKE printLives, xyPos
						.IF livesNum == 0
 000012DF  BB 00000004					mov ebx, 4 ;之後要改3
 000012E4  E9 FFFFED44					jmp Ex		
						.ENDIF
					.ENDIF
					
 000012E9  E9 FFFFED53			jmp GameLoop



 000012EE  E8 00000000 E		call WaitMsg

 000012F3			ExitProgram:
					exit
 000012FA			main ENDP

 000012FA			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 00001300  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 00001307  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
				    	consoleHandle,
				        ADDR cursorInfo

					; 清空畫面
 0000131D  E8 00000000 E		call Clrscr

 00001322  B9 00000006			mov ecx, 6
 00001327  BE 00000000			mov esi, 0

				; 印開始畫面的標題
 0000132C			ShowStartStr:
 0000132C  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108,
						xyPos,
						ADDR cells_Written

 0000134C  83 C6 6C			add esi, 108
 0000134F  66| FF 05			inc xyPos.y
	   00000020 R
 00001356  59				pop ecx
 00001357  E2 D3			loop ShowStartStr

				; 印開始畫面的選項
 00001359			PrintOption:
 00001359  66| 83 05		    add xyPos.y, 7
	   00000020 R 07
 00001361  66| 83 05		    add xyPos.x, 48
	   0000001E R 30

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR enterMsg,
				        SIZEOF enterMsg,
				        xyPos,
				        ADDR cells_Written

 00001386  66| 83 05		    add xyPos.y, 2
	   00000020 R 02

				    INVOKE WriteConsoleOutputCharacter,
				        consoleHandle,
				        ADDR LeaveMsg,
				        SIZEOF LeaveMsg,
				        xyPos,
				        ADDR cells_Written

 000013AB  B9 00000007			mov ecx, 7
 000013B0  BE 00000000			mov esi, 0
 000013B5  66| C7 05			mov xyPos.x, 20
	   0000001E R
	   0014
 000013BE  66| C7 05			mov xyPos.y, 15
	   00000020 R
	   000F

 000013C7			PrintStartTank:
 000013C7  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written

 000013E7  83 C6 18			add esi, 24
 000013EA  66| FF 05			inc xyPos.y
	   00000020 R
 000013F1  59				pop ecx
 000013F2  E2 D3			loop PrintStartTank

 000013F4  B9 00000005			mov ecx, 5
 000013F9  BE 00000000			mov esi, 0
 000013FE  66| C7 05			mov xyPos.x, 85
	   0000001E R
	   0055
 00001407  66| C7 05			mov xyPos.y, 16
	   00000020 R
	   0010

 00001410			PrintStartBogy:
 00001410  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written

 00001430  83 C6 07			add esi, 7
 00001433  66| FF 05			inc xyPos.y
	   00000020 R
 0000143A  59				pop ecx
 0000143B  E2 D3			loop PrintStartBogy

 0000143D			StartOrNot:
 0000143D  E8 00000000 E	    call ReadChar

					.IF ax == 1265h     ;press e to start game
 00001448  E8 00000000 E	        call Clrscr
 0000144D  66| C7 05				mov xyPos.x, 28
	   0000001E R
	   001C
 00001456  66| C7 05				mov xyPos.y, 7
	   00000020 R
	   0007

 0000145F  B9 00000011				mov ecx, 17
 00001464  BE 00000000				mov esi, 0
 00001469  EB 0F				jmp PrintIntro
				    .ENDIF
				    .IF ax == 266ch     ;press l to leave
 00001471  BB 00000004				mov ebx, 4
				        ret
				    .ENDIF
 00001478  EB C3			jmp StartOrNot

 0000147A			PrintIntro:
 0000147A  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written

 0000149A  83 C6 41			add esi, 65
 0000149D  66| FF 05			inc xyPos.y
	   00000020 R
 000014A4  59				pop ecx
 000014A5  E2 D3			loop PrintIntro

 000014A7			GameOrNot:
 000014A7  E8 00000000 E	    call ReadChar
					.IF ax == 3920h     ;press space to start game
 000014B2  E8 00000000 E	        call Clrscr
 000014B7  66| C7 05				mov xyPos.x, 5
	   0000001E R
	   0005
 000014C0  66| C7 05				mov xyPos.y, 4
	   00000020 R
	   0004
 000014C9  EB 02				jmp PrintGameSceneTop
					.ENDIF
 000014CB  EB DA			jmp GameOrNot

 000014CD			PrintGameSceneTop:
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 000014EA  66| FF 05			inc xyPos.y
	   00000020 R

 000014F1  B9 00000018			mov ecx, 24
 000014F6			PrintGameScene:
 000014F6  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 00001514  66| FF 05			inc xyPos.y
	   00000020 R
 0000151B  59				pop ecx
 0000151C  E2 D8			loop PrintGameScene

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 0000153B  66| FF 05			inc xyPos.y
	   00000020 R

					INVOKE printGreenLine, xyPos
					
 0000154D			PrintBar:
 0000154D  66| C7 05			mov xyPos.x, 5
	   0000001E R
	   0005
 00001556  66| C7 05			mov xyPos.y, 2
	   00000020 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written

					INVOKE printLevel, xyPos

 00001587  66| C7 05			mov xyPos.x, 29
	   0000001E R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written
					
 000015AD  66| C7 05			mov xyPos.x, 56
	   0000001E R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

					INVOKE printScore, xyPos

 000015DE  66| C7 05			mov xyPos.x, 80
	   0000001E R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

					INVOKE printLives, xyPos

 0000160F  66| C7 05			mov xyPos.x, 104
	   0000001E R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

					INVOKE printBogys, xyPos

					ret
 00001642			printStartScene ENDP

 00001642			printLevel PROC,
					xyPosInit:COORD
 00001645  66| C7 45 08			mov xyPosInit.x, 12
	   000C
 0000164B  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 00001651  66| 8B 15			mov dx, levelNum
	   00000916 R
					INVOKE decStrLevel, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR levelStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 00001680			printLevel ENDP

 00001680			printScore PROC,
					xyPosInit:COORD
 00001683  66| C7 45 08			mov xyPosInit.x, 63
	   003F
 00001689  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000168F  66| 8B 15			mov dx, scoreNum
	   0000092C R
					INVOKE decStrScore, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR scoreStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 000016BE			printScore ENDP

 000016BE			printLives PROC,
					xyPosInit:COORD
 000016C1  66| C7 45 08			mov xyPosInit.x, 87
	   0057
 000016C7  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 000016CD  66| 8B 15			mov dx, livesNum
	   00000932 R
					INVOKE decStrLives, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR livesStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 000016FC			printLives ENDP

 000016FC			printBogys PROC,
					xyPosInit:COORD
 000016FF  66| C7 45 08			mov xyPosInit.x, 111
	   006F
 00001705  66| C7 45 0A			mov xyPosInit.y, 2
	   0002

 0000170B  66| 8B 15			mov dx, bogysNum
	   00000938 R
					INVOKE decStrBogys, dx

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogysStr,
						4,
						xyPosInit,
						ADDR cells_Written
					ret
 0000173A			printBogys ENDP

 0000173A			bogyWalking PROC,
					xyPosInBogy:COORD
 0000173D  B9 00000003			mov ecx, 3
 00001742  BE 00000000			mov esi, 0

					;mov ebx, xyPosInBogy.y
 00001747			printBogy:
 00001747  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 00001764  83 C6 05			add esi, 5
 00001767  66| FF 45 0A			inc xyPosInBogy.y
 0000176B  59				pop ecx
 0000176C  E2 D9			loop printBogy
					
					ret
 00001772			bogyWalking ENDP

 00001772			bogyClear PROC,
					xyPosInBogy:COORD
 00001775  B9 00000003			mov ecx, 3
 0000177A  BE 00000000			mov esi, 0
 0000177F			removeBogy:
 0000177F  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInBogy,
						ADDR cells_Written
 0000179C  83 C6 05			add esi, 5
 0000179F  66| FF 45 0A			inc xyPosInBogy.y
 000017A3  59				pop ecx
 000017A4  E2 D9			loop removeBogy
					ret
 000017AA			bogyClear ENDP

 000017AA			tankWalking PROC,
					xyPosInit:COORD
 000017AD  B9 00000003			mov ecx, 3
 000017B2  BE 00000000			mov esi, 0

					;mov ebx, xyPosInit.y
 000017B7			printTank:
 000017B7  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 000017D4  83 C6 08			add esi, 8
 000017D7  66| FF 45 0A			inc xyPosInit.y
 000017DB  59				pop ecx
 000017DC  E2 D9			loop printTank
					ret
 000017E2			tankWalking ENDP

 000017E2			tankClear PROC,
					xyPosInit:COORD
 000017E5  B9 00000003			mov ecx, 3
 000017EA  BE 00000000			mov esi, 0
 000017EF			removeTank:
 000017EF  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 0000180C  83 C6 08			add esi, 8
 0000180F  66| FF 45 0A			inc xyPosInit.y
 00001813  59				pop ecx
 00001814  E2 D9			loop removeTank
					ret
 0000181A			tankClear ENDP

 0000181A			noWorkWalking PROC,
					xyPosInit:COORD
 0000181D			printNoWork:
 0000181D  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bullet,
						SIZEOF bullet,
						xyPosInit,
						ADDR cells_Written
 00001838  59				pop ecx
					ret
 0000183D			noWorkWalking ENDP

 0000183D			noWorkClear PROC,
					xyPosInit:COORD
 00001840			removeNoWork:
 00001840  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR clearBullet,
						SIZEOF clearBullet,
						xyPosInit,
						ADDR cells_Written
 0000185B  59				pop ecx
					ret
 00001860			noWorkClear ENDP

 00001860			printGreenLine PROC,
					xyPosInLine:COORD
 00001863  66| C7 45 08			mov xyPosInLine.x, 20
	   0014
 00001869  66| C7 45 0A			mov xyPosInLine.y, 5
	   0005

 0000186F  B9 00000018			mov ecx, 24
 00001874  BE 00000000			mov esi, 0
 00001879			PrintLine:
 00001879  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInLine,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInLine,
						ADDR cells_Written
 000018AE  66| FF 45 0A			inc xyPosInLine.y
 000018B2  59				pop ecx
 000018B3  E2 C4			loop PrintLine
					ret
 000018B9			printGreenLine ENDP

 000018B9			decStrLevel PROC,
					levelNumDec:WORD
 000018BC  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000018C1  B2 0A			mov dl, 10					;除數
 000018C3  66| 8B 45 08			mov ax, levelNumDec			;被除數
 000018C7			change:
 000018C7  51				push ecx
 000018C8  F6 F2			div dl
 000018CA  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000018CD  49				dec ecx
 000018CE  88 A1 00000918 R		mov [levelStr + ecx], ah
 000018D4  66| 0F B6 C0			movzx ax, al				;商繼續除
 000018D8  59				pop ecx
 000018D9  E2 EC			loop change
					ret
 000018DF			decStrLevel ENDP

 000018DF			decStrScore PROC,
					scoreNumDec:WORD
 000018E2  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 000018E7  B2 0A			mov dl, 10					;除數
 000018E9  66| 8B 45 08			mov ax, scoreNumDec			;被除數
 000018ED			change:
 000018ED  51				push ecx
 000018EE  F6 F2			div dl
 000018F0  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 000018F3  49				dec ecx
 000018F4  88 A1 0000092E R		mov [scoreStr + ecx], ah
 000018FA  66| 0F B6 C0			movzx ax, al				;商繼續除
 000018FE  59				pop ecx
 000018FF  E2 EC			loop change
					ret
 00001905			decStrScore ENDP

 00001905			decStrLives PROC,
					livesNumDec:WORD
 00001908  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 0000190D  B2 0A			mov dl, 10					;除數
 0000190F  66| 8B 45 08			mov ax, livesNumDec			;被除數
 00001913			change:
 00001913  51				push ecx
 00001914  F6 F2			div dl
 00001916  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 00001919  49				dec ecx
 0000191A  88 A1 00000934 R		mov [livesStr + ecx], ah
 00001920  66| 0F B6 C0			movzx ax, al				;商繼續除
 00001924  59				pop ecx
 00001925  E2 EC			loop change
					ret
 0000192B			decStrLives ENDP

 0000192B			decStrBogys PROC,
					bogysNumDec:WORD
 0000192E  B9 00000004			mov ecx, 4					;WORD型態最高4位數
 00001933  B2 0A			mov dl, 10					;除數
 00001935  66| 8B 45 08			mov ax, bogysNumDec			;被除數
 00001939			change:
 00001939  51				push ecx
 0000193A  F6 F2			div dl
 0000193C  80 C4 30			add ah, '0'					;餘數轉成字存到levelNum_inLevel
 0000193F  49				dec ecx
 00001940  88 A1 0000093A R		mov [bogysStr + ecx], ah
 00001946  66| 0F B6 C0			movzx ax, al				;商繼續除
 0000194A  59				pop ecx
 0000194B  E2 EC			loop change
					ret
 00001951			decStrBogys ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/18/22 07:06:21
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000A1C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001951 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 00001772 _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 0000177F _TEXT	
bogyWalking  . . . . . . . . . .	P Near	 0000173A _TEXT	Length= 00000038 Public STDCALL
  xyPosInBogy  . . . . . . . . .	DWord	 bp + 00000008
  printBogy  . . . . . . . . . .	L Near	 00001747 _TEXT	
decStrBogys  . . . . . . . . . .	P Near	 0000192B _TEXT	Length= 00000026 Public STDCALL
  bogysNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001939 _TEXT	
decStrLevel  . . . . . . . . . .	P Near	 000018B9 _TEXT	Length= 00000026 Public STDCALL
  levelNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000018C7 _TEXT	
decStrLives  . . . . . . . . . .	P Near	 00001905 _TEXT	Length= 00000026 Public STDCALL
  livesNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 00001913 _TEXT	
decStrScore  . . . . . . . . . .	P Near	 000018DF _TEXT	Length= 00000026 Public STDCALL
  scoreNumDec  . . . . . . . . .	Word	 bp + 00000008
  change . . . . . . . . . . . .	L Near	 000018ED _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000012FA Public STDCALL
  Ex . . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 00000041 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000012F3 _TEXT	
noWorkClear  . . . . . . . . . .	P Near	 0000183D _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeNoWork . . . . . . . . .	L Near	 00001840 _TEXT	
noWorkWalking  . . . . . . . . .	P Near	 0000181A _TEXT	Length= 00000023 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printNoWork  . . . . . . . . .	L Near	 0000181D _TEXT	
printBogys . . . . . . . . . . .	P Near	 000016FC _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printGreenLine . . . . . . . . .	P Near	 00001860 _TEXT	Length= 00000059 Public STDCALL
  xyPosInLine  . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00001879 _TEXT	
printLevel . . . . . . . . . . .	P Near	 00001642 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printLives . . . . . . . . . . .	P Near	 000016BE _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printScore . . . . . . . . . . .	P Near	 00001680 _TEXT	Length= 0000003E Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printStartScene  . . . . . . . .	P Near	 000012FA _TEXT	Length= 00000348 Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 0000132C _TEXT	
  PrintOption  . . . . . . . . .	L Near	 00001359 _TEXT	
  PrintStartTank . . . . . . . .	L Near	 000013C7 _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 00001410 _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 0000143D _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 0000147A _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 000014A7 _TEXT	
  PrintGameSceneTop  . . . . . .	L Near	 000014CD _TEXT	
  PrintGameScene . . . . . . . .	L Near	 000014F6 _TEXT	
  PrintBar . . . . . . . . . . .	L Near	 0000154D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 000017E2 _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeTank . . . . . . . . . .	L Near	 000017EF _TEXT	
tankWalking  . . . . . . . . . .	P Near	 000017AA _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  printTank  . . . . . . . . . .	L Near	 000017B7 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
N0 . . . . . . . . . . . . . . .	Word	 0000007A _DATA	
N10  . . . . . . . . . . . . . .	Word	 0000008E _DATA	
N11  . . . . . . . . . . . . . .	Word	 00000090 _DATA	
N12  . . . . . . . . . . . . . .	Word	 00000092 _DATA	
N13  . . . . . . . . . . . . . .	Word	 00000094 _DATA	
N14  . . . . . . . . . . . . . .	Word	 00000096 _DATA	
N15  . . . . . . . . . . . . . .	Word	 00000098 _DATA	
N16  . . . . . . . . . . . . . .	Word	 0000009A _DATA	
N17  . . . . . . . . . . . . . .	Word	 0000009C _DATA	
N18  . . . . . . . . . . . . . .	Word	 0000009E _DATA	
N19  . . . . . . . . . . . . . .	Word	 000000A0 _DATA	
N1 . . . . . . . . . . . . . . .	Word	 0000007C _DATA	
N20  . . . . . . . . . . . . . .	Word	 000000A2 _DATA	
N2 . . . . . . . . . . . . . . .	Word	 0000007E _DATA	
N3 . . . . . . . . . . . . . . .	Word	 00000080 _DATA	
N4 . . . . . . . . . . . . . . .	Word	 00000082 _DATA	
N5 . . . . . . . . . . . . . . .	Word	 00000084 _DATA	
N6 . . . . . . . . . . . . . . .	Word	 00000086 _DATA	
N7 . . . . . . . . . . . . . . .	Word	 00000088 _DATA	
N8 . . . . . . . . . . . . . . .	Word	 0000008A _DATA	
N9 . . . . . . . . . . . . . . .	Word	 0000008C _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 00000938 _DATA	
bogysStr . . . . . . . . . . . .	Byte	 0000093A _DATA	
bogys  . . . . . . . . . . . . .	Byte	 0000090E _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bullet . . . . . . . . . . . . .	Byte	 000008DA _DATA	
cells_Written  . . . . . . . . .	DWord	 000000BC _DATA	
clearBogy  . . . . . . . . . . .	Byte	 000008CB _DATA	
clearBullet  . . . . . . . . . .	Byte	 000008E1 _DATA	
clearTank  . . . . . . . . . . .	Byte	 000008A4 _DATA	
consoleHandle  . . . . . . . . .	DWord	 0000001A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 00000348 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameBgM  . . . . . . . . . . . .	Byte	 000009AD _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 0000093E _DATA	
gameBogy . . . . . . . . . . . .	Byte	 000008BC _DATA	
gameIntro  . . . . . . . . . . .	Byte	 0000043B _DATA	
gameTank . . . . . . . . . . . .	Byte	 0000088C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 000008EA _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 0000035C _DATA	
levelNum . . . . . . . . . . . .	Word	 00000916 _DATA	
levelStr . . . . . . . . . . . .	Byte	 00000918 _DATA	
level  . . . . . . . . . . . . .	Byte	 000008EE _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 000008E8 _DATA	
livesNum . . . . . . . . . . . .	Word	 00000932 _DATA	
livesStr . . . . . . . . . . . .	Byte	 00000934 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000906 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
paused . . . . . . . . . . . . .	Byte	 0000091C _DATA	
playing  . . . . . . . . . . . .	Byte	 00000924 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreNum . . . . . . . . . . . .	Word	 0000092C _DATA	
scoreStr . . . . . . . . . . . .	Byte	 0000092E _DATA	
score  . . . . . . . . . . . . .	Byte	 000008FE _DATA	
startBogy  . . . . . . . . . . .	Byte	 00000418 _DATA	
startStr . . . . . . . . . . . .	Byte	 000000C0 _DATA	
startTank  . . . . . . . . . . .	Byte	 00000370 _DATA	
state  . . . . . . . . . . . . .	Byte	 000008F6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
windowBound  . . . . . . . . . .	SMALL_RECT  00000012 _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000000 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xyPosBogy0 . . . . . . . . . . .	COORD	 000000A4 _DATA	
xyPosBogy1 . . . . . . . . . . .	COORD	 000000A8 _DATA	
xyPosBogy2 . . . . . . . . . . .	COORD	 000000AC _DATA	
xyPosBogy3 . . . . . . . . . . .	COORD	 000000B0 _DATA	
xyPosBogy4 . . . . . . . . . . .	COORD	 000000B4 _DATA	
xyPosBogy5 . . . . . . . . . . .	COORD	 000000B8 _DATA	
xyPosNoWork0 . . . . . . . . . .	COORD	 00000026 _DATA	
xyPosNoWork10  . . . . . . . . .	COORD	 0000004E _DATA	
xyPosNoWork11  . . . . . . . . .	COORD	 00000052 _DATA	
xyPosNoWork12  . . . . . . . . .	COORD	 00000056 _DATA	
xyPosNoWork13  . . . . . . . . .	COORD	 0000005A _DATA	
xyPosNoWork14  . . . . . . . . .	COORD	 0000005E _DATA	
xyPosNoWork15  . . . . . . . . .	COORD	 00000062 _DATA	
xyPosNoWork16  . . . . . . . . .	COORD	 00000066 _DATA	
xyPosNoWork17  . . . . . . . . .	COORD	 0000006A _DATA	
xyPosNoWork18  . . . . . . . . .	COORD	 0000006E _DATA	
xyPosNoWork19  . . . . . . . . .	COORD	 00000072 _DATA	
xyPosNoWork1 . . . . . . . . . .	COORD	 0000002A _DATA	
xyPosNoWork20  . . . . . . . . .	COORD	 00000076 _DATA	
xyPosNoWork2 . . . . . . . . . .	COORD	 0000002E _DATA	
xyPosNoWork3 . . . . . . . . . .	COORD	 00000032 _DATA	
xyPosNoWork4 . . . . . . . . . .	COORD	 00000036 _DATA	
xyPosNoWork5 . . . . . . . . . .	COORD	 0000003A _DATA	
xyPosNoWork6 . . . . . . . . . .	COORD	 0000003E _DATA	
xyPosNoWork7 . . . . . . . . . .	COORD	 00000042 _DATA	
xyPosNoWork8 . . . . . . . . . .	COORD	 00000046 _DATA	
xyPosNoWork9 . . . . . . . . . .	COORD	 0000004A _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000022 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 0000001E _DATA	
yellowColor  . . . . . . . . . .	Word	 000008EC _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
